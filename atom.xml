<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>放手の风筝博客</title>
  <subtitle>放手の风筝博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mykite.github.io/"/>
  <updated>2017-05-08T08:08:41.000Z</updated>
  <id>https://mykite.github.io/</id>
  
  <author>
    <name>kite</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于h5获取经纬度坑</title>
    <link href="https://mykite.github.io/2017/05/08/%E5%85%B3%E4%BA%8Eh5%E8%8E%B7%E5%8F%96%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%9D%91/"/>
    <id>https://mykite.github.io/2017/05/08/关于h5获取经纬度坑/</id>
    <published>2017-05-08T08:00:43.495Z</published>
    <updated>2017-05-08T08:08:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于在h5获取经纬度如果在http环境下ios10会出现error，POSITION_UNAVAILABLE地理位置不可用，需要使用https</p>
</blockquote>
<p><img src="https://cloud.githubusercontent.com/assets/9413389/25795497/2754b6da-3408-11e7-8dd5-449203099c08.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于在h5获取经纬度如果在http环境下ios10会出现error，POSITION_UNAVAILABLE地理位置不可用，需要使用https&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cloud.githubu
    
    </summary>
    
      <category term="坑" scheme="https://mykite.github.io/categories/%E5%9D%91/"/>
    
    
      <category term="h5" scheme="https://mykite.github.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>zipkin-brave提供对dubbo监控插件基于springboot(四)</title>
    <link href="https://mykite.github.io/2017/04/26/zipkin-brave%E6%8F%90%E4%BE%9B%E5%AF%B9dubbo%E7%9B%91%E6%8E%A7%E6%8F%92%E4%BB%B6%E5%9F%BA%E4%BA%8Espringboot(%E5%9B%9B)/"/>
    <id>https://mykite.github.io/2017/04/26/zipkin-brave提供对dubbo监控插件基于springboot(四)/</id>
    <published>2017-04-26T08:52:49.045Z</published>
    <updated>2017-04-26T08:57:42.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于dubbo提供zipkin链路跟踪"><a href="#基于dubbo提供zipkin链路跟踪" class="headerlink" title="基于dubbo提供zipkin链路跟踪"></a>基于dubbo提供zipkin链路跟踪</h2><h3 id="使用springboot来实现"><a href="#使用springboot来实现" class="headerlink" title="使用springboot来实现"></a>使用springboot来实现</h3><blockquote>
<p>这里我们可以先查看官方针对其他rpc的实现brave-grpc-3.9.0.jar</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>针对dubbo调用前后进行拦截，创建span,关联parentSpanId,traceId</p>
<blockquote>
<p>其中我们要实现4个接口</p>
</blockquote>
<ul>
<li>ClientRequestAdapter</li>
<li>ClientResponseAdapter</li>
<li>ServerRequestAdapter</li>
<li>ServerResponseAdapter</li>
</ul>
<p>DubboClientRequestAdapter实现ClientRequestAdapter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class DubboClientRequestAdapter implements ClientRequestAdapter &#123;</div><div class="line">    private Map&lt;String, String&gt; headers;</div><div class="line"></div><div class="line">    private String              spanName;</div><div class="line"></div><div class="line">    public DubboClientRequestAdapter(@Nullable Map&lt;String, String&gt; headers, @Nullable String spanName) &#123;</div><div class="line">        this.headers = headers;</div><div class="line">        this.spanName = spanName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getSpanName() &#123;</div><div class="line">        return this.spanName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addSpanIdToRequest(SpanId spanId) &#123;</div><div class="line">        if (spanId == null) &#123;</div><div class="line">            headers.put(DubboTraceConst.SAMPLED, &quot;0&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            headers.put(DubboTraceConst.SAMPLED, &quot;1&quot;);</div><div class="line">            headers.put(DubboTraceConst.TRACE_ID, IdConversion.convertToString(spanId.traceId));</div><div class="line">            headers.put(DubboTraceConst.SPAN_ID, IdConversion.convertToString(spanId.spanId));</div><div class="line">            if (spanId.nullableParentId() != null) &#123;</div><div class="line">                headers.put(DubboTraceConst.PARENT_SPAN_ID, IdConversion.convertToString(spanId.parentId));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Collection&lt;KeyValueAnnotation&gt; requestAnnotations() &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Endpoint serverAddress() &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DubboClientResponseAdapter实现ClientResponseAdapter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class DubboClientResponseAdapter implements ClientResponseAdapter &#123;</div><div class="line"></div><div class="line">    private StatusEnum status;</div><div class="line">    </div><div class="line">    public DubboClientResponseAdapter(@Nullable StatusEnum status) &#123;</div><div class="line">        this.status = status;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Collection&lt;KeyValueAnnotation&gt; responseAnnotations() &#123;</div><div class="line">        return Collections.singleton(KeyValueAnnotation.create(DubboTraceConst.STATUS_CODE, status.getDesc()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DubboServerRequestAdapter实现ServerRequestAdapter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class DubboServerRequestAdapter implements ServerRequestAdapter &#123;</div><div class="line"></div><div class="line">    private Map&lt;String, String&gt; headers;</div><div class="line">    private String              spanName;</div><div class="line"></div><div class="line">    public DubboServerRequestAdapter(@Nullable Map&lt;String, String&gt; headers, @Nullable String spanName) &#123;</div><div class="line">        this.headers = headers;</div><div class="line">        this.spanName = spanName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public TraceData getTraceData() &#123;</div><div class="line">        final String sampled = headers.get(DubboTraceConst.SAMPLED);</div><div class="line">        if (sampled != null) &#123;</div><div class="line">            if (sampled.equals(&quot;0&quot;) || sampled.toLowerCase().equals(&quot;false&quot;)) &#123;</div><div class="line">                return TraceData.builder().sample(false).build();</div><div class="line">            &#125; else &#123;</div><div class="line">                final String parentSpanId = headers.get(DubboTraceConst.PARENT_SPAN_ID);</div><div class="line">                final String traceId = headers.get(DubboTraceConst.TRACE_ID);</div><div class="line">                final String spanId = headers.get(DubboTraceConst.SPAN_ID);</div><div class="line">                if (traceId != null &amp;&amp; spanId != null) &#123;</div><div class="line">                    SpanId span = getSpanId(traceId, spanId, parentSpanId);</div><div class="line">                    return TraceData.builder().sample(true).spanId(span).build();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return TraceData.builder().build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getSpanName() &#123;</div><div class="line">        return this.spanName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Collection&lt;KeyValueAnnotation&gt; requestAnnotations() &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static SpanId getSpanId(String traceId, String spanId, String parentSpanId) &#123;</div><div class="line">        return SpanId.builder().traceId(convertToLong(traceId)).spanId(convertToLong(spanId))</div><div class="line">                .parentId(parentSpanId == null ? null : convertToLong(parentSpanId)).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DubboServerResponseAdapter实现ServerResponseAdapter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class DubboServerResponseAdapter implements ServerResponseAdapter &#123;</div><div class="line"></div><div class="line">    private StatusEnum status;</div><div class="line">    </div><div class="line">    public DubboServerResponseAdapter(@Nullable StatusEnum status) &#123;</div><div class="line">        this.status = status;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Collection&lt;KeyValueAnnotation&gt; responseAnnotations() &#123;</div><div class="line">        return Collections.singleton(KeyValueAnnotation.create(DubboTraceConst.STATUS_CODE, status.getDesc()));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="dubbo调用拦截"><a href="#dubbo调用拦截" class="headerlink" title="dubbo调用拦截"></a>dubbo调用拦截</h3><blockquote>
<p>dubbo的调用会执行filterChain,其中区分PROVIDER，CONSUMER 所以可以记录对应的四个时间</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">@Activate(group = &#123;Constants.PROVIDER, Constants.CONSUMER&#125;)</div><div class="line">public class BraveDubboFilter implements Filter &#123;</div><div class="line">    /**</div><div class="line">     * @tips:这里不要用注解的方式</div><div class="line">     */</div><div class="line">    private ClientRequestInterceptor  clientRequestInterceptor;</div><div class="line"></div><div class="line">    private ClientResponseInterceptor clientResponseInterceptor;</div><div class="line"></div><div class="line">    private ServerRequestInterceptor  serverRequestInterceptor;</div><div class="line"></div><div class="line">    private ServerResponseInterceptor serverResponseInterceptor;</div><div class="line"></div><div class="line">    public void setClientRequestInterceptor(ClientRequestInterceptor clientRequestInterceptor) &#123;</div><div class="line">        this.clientRequestInterceptor = clientRequestInterceptor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BraveDubboFilter setClientResponseInterceptor(ClientResponseInterceptor clientResponseInterceptor) &#123;</div><div class="line">        this.clientResponseInterceptor = clientResponseInterceptor;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BraveDubboFilter setServerRequestInterceptor(ServerRequestInterceptor serverRequestInterceptor) &#123;</div><div class="line">        this.serverRequestInterceptor = serverRequestInterceptor;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BraveDubboFilter setServerResponseInterceptor(ServerResponseInterceptor serverResponseInterceptor) &#123;</div><div class="line">        this.serverResponseInterceptor = serverResponseInterceptor;</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException &#123;</div><div class="line">        /*</div><div class="line">         * 监控的 dubbo 服务，不纳入跟踪范围</div><div class="line">         */</div><div class="line">        if (&quot;com.alibaba.dubbo.monitor.MonitorService&quot;.equals(invoker.getInterface().getName())) &#123;</div><div class="line">            return invoker.invoke(invocation);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        RpcContext context = RpcContext.getContext();</div><div class="line">        /*</div><div class="line">         * 调用的方法名 以此作为 span name</div><div class="line">         */</div><div class="line">        String methodName = invocation.getMethodName();</div><div class="line"></div><div class="line">        /*</div><div class="line">         * provider 应用相关信息</div><div class="line">         */</div><div class="line">        StatusEnum status = StatusEnum.OK;</div><div class="line"></div><div class="line">        if (&quot;0&quot;.equals(invocation.getAttachment(DubboTraceConst.SAMPLED))</div><div class="line">                || &quot;false&quot;.equals(invocation.getAttachment(DubboTraceConst.SAMPLED))) &#123;</div><div class="line">            return invoker.invoke(invocation);</div><div class="line">        &#125;</div><div class="line">        //注入</div><div class="line">        if(!inject()) &#123;</div><div class="line">            return invoker.invoke(invocation);</div><div class="line">        &#125;</div><div class="line">        if (context.isConsumerSide()) &#123;</div><div class="line">            System.out.println(&quot;consumer execute&quot;);</div><div class="line">            /*</div><div class="line">             * Client side</div><div class="line">             */</div><div class="line">            clientRequestInterceptor.handle(new DubboClientRequestAdapter(invocation.getAttachments(), methodName));</div><div class="line">            Result result = null;</div><div class="line">            try &#123;</div><div class="line">                result = invoker.invoke(invocation);</div><div class="line">            &#125; catch (RpcException e) &#123;</div><div class="line">                status = StatusEnum.ERROR;</div><div class="line">                throw e;</div><div class="line">            &#125; finally &#123;</div><div class="line">                final DubboClientResponseAdapter clientResponseAdapter = new DubboClientResponseAdapter(status);</div><div class="line">                clientResponseInterceptor.handle(clientResponseAdapter);</div><div class="line">            &#125;</div><div class="line">            return result;</div><div class="line">        &#125; else if (context.isProviderSide()) &#123;</div><div class="line">            System.out.println(&quot;provider execute&quot;);</div><div class="line">            serverRequestInterceptor.handle(new DubboServerRequestAdapter(context.getAttachments(), methodName));</div><div class="line"></div><div class="line">            Result result = null;</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                result = invoker.invoke(invocation);</div><div class="line">            &#125; finally &#123;</div><div class="line">                serverResponseInterceptor.handle(new DubboServerResponseAdapter(status));</div><div class="line">            &#125;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line">        return invoker.invoke(invocation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean inject() &#123;</div><div class="line">        Brave brave = ApplicationContextHolder.getBean(Brave.class);</div><div class="line">        if(brave == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        this.setClientRequestInterceptor(brave.clientRequestInterceptor());</div><div class="line">        this.setClientResponseInterceptor(brave.clientResponseInterceptor());</div><div class="line">        this.setServerRequestInterceptor(brave.serverRequestInterceptor());</div><div class="line">        this.setServerResponseInterceptor(brave.serverResponseInterceptor());</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用springboot-configuration"><a href="#使用springboot-configuration" class="headerlink" title="使用springboot configuration"></a>使用springboot configuration</h3><p>基于注解启用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType.TYPE)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">@Import(DubboTraceConfiguration.class)</div><div class="line">public @interface EnableDubboTrace &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@ConditionalOnClass(Brave.class)</div><div class="line">public class DubboTraceConfiguration &#123;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public ApplicationContextAware holder() &#123;</div><div class="line">        return new ApplicationContextHolder();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ApplicationContextHolder<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ApplicationContextHolder implements ApplicationContextAware &#123;</div><div class="line"></div><div class="line">    private static ApplicationContext applicationContext;</div><div class="line">    </div><div class="line">    public void setApplicationContext(ApplicationContext ctx) throws BeansException &#123;</div><div class="line">        setCtx(ctx);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private static void setCtx(ApplicationContext ctx) &#123;</div><div class="line">        applicationContext = ctx;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType)&#123;</div><div class="line">        return applicationContext.getBean(requiredType);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Object getBean(String classStr) &#123;</div><div class="line">        return applicationContext.getBean(classStr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其他类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public interface DubboTraceConst &#123;</div><div class="line"></div><div class="line">    String SAMPLED        = &quot;dubbo.trace.sampled&quot;;</div><div class="line"></div><div class="line">    String PARENT_SPAN_ID = &quot;dubbo.trace.parentSpanId&quot;;</div><div class="line">    </div><div class="line">    String SPAN_ID        = &quot;dubbo.trace.spanId&quot;;</div><div class="line">    </div><div class="line">    String TRACE_ID        = &quot;dubbo.trace.traceId&quot;;</div><div class="line">    </div><div class="line">    String STATUS_CODE  = &quot;dubbo.trace.staus_code&quot;;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public enum StatusEnum &#123;</div><div class="line">    OK(200, &quot;OK&quot;),</div><div class="line">    ERROR(500, &quot;ERROR&quot;);</div><div class="line">    </div><div class="line">    private int code;</div><div class="line">    private String desc;</div><div class="line">    </div><div class="line">    private StatusEnum(int code, String desc) &#123;</div><div class="line">        this.code = code;</div><div class="line">        this.desc = desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getCode() &#123;</div><div class="line">        return code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDesc() &#123;</div><div class="line">        return desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>针对dubbo filter进行配置文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">src/main/resources/META-INF/dubbo/com.alibaba.dubbo.rpc.Filter</div><div class="line">BraveDubboFilter=com.kite.zipkin.filter.BraveDubboFilter</div></pre></td></tr></table></figure></p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><blockquote>
<p>ps:前置条件是已经有了Brave</p>
</blockquote>
<p>导入依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.kite.zipkin&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;dubbo-zipkin-spring-starter&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>前置条件配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class ZipkinConfig &#123;</div><div class="line">    //span（一次请求信息或者一次链路调用）信息收集器  </div><div class="line">    @Bean  </div><div class="line">    public SpanCollector spanCollector() &#123;  </div><div class="line">        Config config = HttpSpanCollector.Config.builder()  </div><div class="line">                .compressionEnabled(false)// 默认false，span在transport之前是否会被gzipped  </div><div class="line">                .connectTimeout(5000)  </div><div class="line">                .flushInterval(1)  </div><div class="line">                .readTimeout(6000)  </div><div class="line">                .build();  </div><div class="line">        return HttpSpanCollector.create(&quot;http://localhost:9411&quot;, config, new EmptySpanCollectorMetricsHandler());  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //作为各调用链路，只需要负责将指定格式的数据发送给zipkin  </div><div class="line">    @Bean  </div><div class="line">    public Brave brave(SpanCollector spanCollector)&#123;  </div><div class="line">        Builder builder = new Builder(&quot;service1&quot;);//指定serviceName  </div><div class="line">        builder.spanCollector(spanCollector);  </div><div class="line">        builder.traceSampler(Sampler.create(1));//采集率  </div><div class="line">        return builder.build();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"> </div><div class="line">      </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动dubboTrace<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDubboTrace</div><div class="line">public class Application &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现效果<br><img src="https://cloud.githubusercontent.com/assets/9413389/25425799/b098f5ea-2a9f-11e7-8437-175925165106.png" alt="image"></p>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><ul>
<li>如果需要添加其他信息在requestAnnotations()里面进行添加</li>
<li>当前实现方式为依赖应用方提供Brave配置，如果不想由应用方提供可以使用springboot的，@ConditionalOnMissingBean来进行创建<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2></li>
<li><a href="https://mykite.github.io/2017/04/21/zipkin%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/">zipkin简单介绍及环境搭建（一）</a></li>
<li><a href="https://mykite.github.io/2017/04/24/zipkin-server%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/">zipkin-server源码分析（二）</a></li>
<li><a href="https://mykite.github.io/2017/04/25/zipkin-java-brave%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/">zipkin-java-brave源码分析（三）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基于dubbo提供zipkin链路跟踪&quot;&gt;&lt;a href=&quot;#基于dubbo提供zipkin链路跟踪&quot; class=&quot;headerlink&quot; title=&quot;基于dubbo提供zipkin链路跟踪&quot;&gt;&lt;/a&gt;基于dubbo提供zipkin链路跟踪&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
      <category term="zipkin" scheme="https://mykite.github.io/categories/zipkin/"/>
    
    
      <category term="源码分析" scheme="https://mykite.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="springboot" scheme="https://mykite.github.io/tags/springboot/"/>
    
      <category term="zipkin" scheme="https://mykite.github.io/tags/zipkin/"/>
    
  </entry>
  
  <entry>
    <title>zipkin-java-brave源码分析（三）</title>
    <link href="https://mykite.github.io/2017/04/25/zipkin-java-brave%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://mykite.github.io/2017/04/25/zipkin-java-brave源码分析（三）/</id>
    <published>2017-04-25T07:44:22.590Z</published>
    <updated>2017-04-25T07:45:42.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是brave"><a href="#什么是brave" class="headerlink" title="什么是brave"></a>什么是brave</h2><blockquote>
<p>brave是zipkin官方提供的java版本zipkin-client实现</p>
</blockquote>
<h2 id="brave提供的功能"><a href="#brave提供的功能" class="headerlink" title="brave提供的功能"></a>brave提供的功能</h2><p>基于brave3.9.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;modules&gt;</div><div class="line">    &lt;module&gt;brave-core&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-benchmarks&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-http&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-core-spring&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-resteasy-spring&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-resteasy3-spring&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-spancollector-http&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-spancollector-scribe&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-spancollector-kafka&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-spancollector-local&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-sampler-zookeeper&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-jersey&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-jersey2&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-jaxrs2&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-grpc&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-apache-http-interceptors&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-spring-web-servlet-interceptor&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-spring-resttemplate-interceptors&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-mysql&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-web-servlet-filter&lt;/module&gt;</div><div class="line">    &lt;module&gt;brave-okhttp&lt;/module&gt;</div><div class="line">  &lt;/modules&gt;</div></pre></td></tr></table></figure></p>
<h2 id="基于http提供brave源码分析"><a href="#基于http提供brave源码分析" class="headerlink" title="基于http提供brave源码分析"></a>基于http提供brave源码分析</h2><h3 id="brave-spancollector-http"><a href="#brave-spancollector-http" class="headerlink" title="brave-spancollector-http"></a>brave-spancollector-http</h3><p><img src="https://cloud.githubusercontent.com/assets/9413389/25365788/c5f0f6de-299d-11e7-9f01-8b5cf7df0ec3.png" alt="image"><br>提供httpCollector收集器</p>
<h3 id="brave-web-servlet-filter"><a href="#brave-web-servlet-filter" class="headerlink" title="brave-web-servlet-filter"></a>brave-web-servlet-filter</h3><p><img src="https://cloud.githubusercontent.com/assets/9413389/25365805/e47cd172-299d-11e7-9f60-5416b3e20884.png" alt="image"><br>基于http请求提供过滤器</p>
<h3 id="brave-apache-http-interceptors"><a href="#brave-apache-http-interceptors" class="headerlink" title="brave-apache-http-interceptors"></a>brave-apache-http-interceptors</h3><p><img src="https://cloud.githubusercontent.com/assets/9413389/25365910/9ab78dba-299e-11e7-92d8-389e906c81aa.png" alt="image"><br>基于apache-http-client发起气球提供拦截器</p>
<h3 id="基于springboot启动"><a href="#基于springboot启动" class="headerlink" title="基于springboot启动"></a>基于springboot启动</h3><h4 id="step1配置"><a href="#step1配置" class="headerlink" title="step1配置"></a>step1配置</h4><ul>
<li>针对collector的SpanCollector   </li>
<li>针对http请求的filter BraveServletFilter</li>
<li>针对数据发送的Brave</li>
<li>针对http-client请求的拦截器BraveHttpRequestInterceptor，BraveHttpResponseInterceptor<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class ZipkinConfig &#123;</div><div class="line">    //span（一次请求信息或者一次链路调用）信息收集器  </div><div class="line">    @Bean  </div><div class="line">    public SpanCollector spanCollector() &#123;  </div><div class="line">        Config config = HttpSpanCollector.Config.builder()  </div><div class="line">                .compressionEnabled(false)// 默认false，span在transport之前是否会被gzipped  </div><div class="line">                .connectTimeout(5000)  </div><div class="line">                .flushInterval(1)  </div><div class="line">                .readTimeout(6000)  </div><div class="line">                .build();  </div><div class="line">        return HttpSpanCollector.create(&quot;http://localhost:9411&quot;, config, new EmptySpanCollectorMetricsHandler());  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //作为各调用链路，只需要负责将指定格式的数据发送给zipkin  </div><div class="line">    @Bean  </div><div class="line">    public Brave brave(SpanCollector spanCollector)&#123;  </div><div class="line">        Builder builder = new Builder(&quot;service1&quot;);//指定serviceName  </div><div class="line">        builder.spanCollector(spanCollector);  </div><div class="line">        builder.traceSampler(Sampler.create(1));//采集率  </div><div class="line">        return builder.build();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    //设置server的（服务端收到请求和服务端完成处理，并将结果发送给客户端）过滤器  </div><div class="line">    @Bean  </div><div class="line">    public BraveServletFilter braveServletFilter(Brave brave) &#123;  </div><div class="line">        BraveServletFilter filter = new BraveServletFilter(brave.serverRequestInterceptor(),  </div><div class="line">                brave.serverResponseInterceptor(), new DefaultSpanNameProvider());  </div><div class="line">        return filter;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //设置client的（发起请求和获取到服务端返回信息）拦截器  </div><div class="line">    @Bean  </div><div class="line">    public CloseableHttpClient okHttpClient(Brave brave)&#123;  </div><div class="line">       CloseableHttpClient httpclient = HttpClients.custom()</div><div class="line">                .addInterceptorFirst(new BraveHttpRequestInterceptor(brave.clientRequestInterceptor(), new DefaultSpanNameProvider()))</div><div class="line">                .addInterceptorFirst(new BraveHttpResponseInterceptor(brave.clientResponseInterceptor()))</div><div class="line">                .build();</div><div class="line">        return httpclient;  </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="基于http发起请求服务端处理"><a href="#基于http发起请求服务端处理" class="headerlink" title="基于http发起请求服务端处理"></a>基于http发起请求服务端处理</h3><p>post or get url : <a href="http://localhost/service1" target="_blank" rel="external">http://localhost/service1</a></p>
<blockquote>
<p>相关代码请查看 zipkin简单介绍及环境搭建（一）</p>
</blockquote>
<p>流程图<br><img src="https://cloud.githubusercontent.com/assets/9413389/25368353/6b7c2bfe-29ae-11e7-865b-9ea501825697.png" alt="brave-http-collector-receive"><br>point<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">针对请求，如果Sampledheader包含(X-B3-Sampled)会获取header中的ParentSpanId,TraceId,SpanId直接返回，否者会认为这是一个新的请求会构建Span</div><div class="line">HttpServerRequestAdapter.getTraceData()</div><div class="line">public TraceData getTraceData() &#123;</div><div class="line">        final String sampled = serverRequest.getHttpHeaderValue(BraveHttpHeaders.Sampled.getName());</div><div class="line">        if (sampled != null) &#123;</div><div class="line">            if (sampled.equals(&quot;0&quot;) || sampled.toLowerCase().equals(&quot;false&quot;)) &#123;</div><div class="line">                return TraceData.builder().sample(false).build();</div><div class="line">            &#125; else &#123;</div><div class="line">                final String parentSpanId = serverRequest.getHttpHeaderValue(BraveHttpHeaders.ParentSpanId.getName());</div><div class="line">                final String traceId = serverRequest.getHttpHeaderValue(BraveHttpHeaders.TraceId.getName());</div><div class="line">                final String spanId = serverRequest.getHttpHeaderValue(BraveHttpHeaders.SpanId.getName());</div><div class="line"></div><div class="line">                if (traceId != null &amp;&amp; spanId != null) &#123;</div><div class="line">                    SpanId span = getSpanId(traceId, spanId, parentSpanId);</div><div class="line">                    return TraceData.builder().sample(true).spanId(span).build();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return TraceData.builder().build();</div><div class="line">    &#125;</div><div class="line">针对请求的采样</div><div class="line">traceSampler().isSampled(newTraceId)，没有使用zk情况下CountingSampler来决定</div><div class="line">public synchronized boolean isSampled(long traceIdIgnored) &#123;</div><div class="line">    boolean result = sampleDecisions.get(i++);</div><div class="line">    if (i == 100) i = 0;</div><div class="line">    return result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="基于apache-http发起请求"><a href="#基于apache-http发起请求" class="headerlink" title="基于apache-http发起请求"></a>基于apache-http发起请求</h3><p>流程图<br><img src="https://cloud.githubusercontent.com/assets/9413389/25368387/9c3f54fa-29ae-11e7-8490-a3e7219d7dbe.png" alt="brave-http-client-send"></p>
<h3 id="如何在代码中添加自己的annotation-or-binaryAnnotation"><a href="#如何在代码中添加自己的annotation-or-binaryAnnotation" class="headerlink" title="如何在代码中添加自己的annotation or binaryAnnotation"></a>如何在代码中添加自己的annotation or binaryAnnotation</h3><p>直接注入Brave即可 ps(不建议这样做，代码侵入。 zipkin不建议添加大量数据)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class ZipkinBraveController &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private CloseableHttpClient httpClient;</div><div class="line">    @Autowired</div><div class="line">    private com.github.kristofa.brave.Brave brave;</div><div class="line">    </div><div class="line">    @GetMapping(&quot;/service1&quot;)</div><div class="line">    public String myboot() throws Exception &#123;</div><div class="line">        brave.serverTracer().submitBinaryAnnotation(&quot;状态&quot;, &quot;成功&quot;); </div><div class="line">        Thread.sleep(100);//100ms</div><div class="line">        HttpGet get = new HttpGet(&quot;http://localhost:81/test&quot;);</div><div class="line">        CloseableHttpResponse execute = httpClient.execute(get);</div><div class="line">        /*</div><div class="line">         * 1、执行execute()的前后，会执行相应的拦截器（cs,cr）</div><div class="line">         * 2、请求在被调用方执行的前后，也会执行相应的拦截器（sr,ss）</div><div class="line">         */</div><div class="line">        return EntityUtils.toString(execute.getEntity(), &quot;utf-8&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><ul>
<li>如果collector要使用kafka直接切换spanController即可，需要server端进行对应配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">client端</div><div class="line">        KafkaSpanCollector.create(KafkaSpanCollector.Config.builder().kafkaProperties(null).build(), new EmptySpanCollectorMetricsHandler());</div><div class="line"></div><div class="line">server端需要配置kafka配置</div><div class="line">final class KafkaZooKeeperSetCondition extends SpringBootCondition &#123;</div><div class="line">  static final String PROPERTY_NAME = &quot;zipkin.collector.kafka.zookeeper&quot;;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata a) &#123;</div><div class="line">    String kafkaZookeeper = context.getEnvironment().getProperty(PROPERTY_NAME);</div><div class="line">    return kafkaZookeeper == null || kafkaZookeeper.isEmpty() ?</div><div class="line">        ConditionOutcome.noMatch(PROPERTY_NAME + &quot; isn&apos;t set&quot;) :</div><div class="line">        ConditionOutcome.match();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><a href="https://mykite.github.io/2017/04/21/zipkin%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/">zipkin简单介绍及环境搭建（一）</a></li>
<li><a href="https://mykite.github.io/2017/04/24/zipkin-server%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/">zipkin-server源码分析（二）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是brave&quot;&gt;&lt;a href=&quot;#什么是brave&quot; class=&quot;headerlink&quot; title=&quot;什么是brave&quot;&gt;&lt;/a&gt;什么是brave&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;brave是zipkin官方提供的java版本zipkin-cli
    
    </summary>
    
      <category term="zipkin" scheme="https://mykite.github.io/categories/zipkin/"/>
    
    
      <category term="源码分析" scheme="https://mykite.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="springboot" scheme="https://mykite.github.io/tags/springboot/"/>
    
      <category term="zipkin" scheme="https://mykite.github.io/tags/zipkin/"/>
    
  </entry>
  
  <entry>
    <title>zipkin-server源码分析（二）</title>
    <link href="https://mykite.github.io/2017/04/24/zipkin-server%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://mykite.github.io/2017/04/24/zipkin-server源码分析（二）/</id>
    <published>2017-04-24T07:40:20.425Z</published>
    <updated>2017-04-24T07:43:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><ul>
<li><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="external">github</a></li>
</ul>
<h2 id="zipkin-server配置文件"><a href="#zipkin-server配置文件" class="headerlink" title="zipkin-server配置文件"></a>zipkin-server配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line">zipkin:</div><div class="line">  self-tracing:</div><div class="line">    # Set to true to enable self-tracing.</div><div class="line">    enabled: $&#123;SELF_TRACING_ENABLED:false&#125;</div><div class="line">    # percentage to self-traces to retain</div><div class="line">    sample-rate: $&#123;SELF_TRACING_SAMPLE_RATE:1.0&#125;</div><div class="line">    # Interval in seconds to flush self-tracing data to storage.</div><div class="line">    flush-interval: $&#123;SELF_TRACING_FLUSH_INTERVAL:1&#125;</div><div class="line">  collector:</div><div class="line">    # percentage to traces to retain</div><div class="line">    sample-rate: $&#123;COLLECTOR_SAMPLE_RATE:1.0&#125;</div><div class="line">    kafka:</div><div class="line">      # ZooKeeper host string, comma-separated host:port value.</div><div class="line">      zookeeper: $&#123;KAFKA_ZOOKEEPER:&#125;</div><div class="line">      # Name of topic to poll for spans</div><div class="line">      topic: $&#123;KAFKA_TOPIC:zipkin&#125;</div><div class="line">      # Consumer group this process is consuming on behalf of.</div><div class="line">      group-id: $&#123;KAFKA_GROUP_ID:zipkin&#125;</div><div class="line">      # Count of consumer threads consuming the topic</div><div class="line">      streams: $&#123;KAFKA_STREAMS:1&#125;</div><div class="line">      # Maximum size of a message containing spans in bytes</div><div class="line">      max-message-size: $&#123;KAFKA_MAX_MESSAGE_SIZE:1048576&#125;</div><div class="line">    scribe:</div><div class="line">      enabled: $&#123;SCRIBE_ENABLED:false&#125;</div><div class="line">      category: zipkin</div><div class="line">      port: $&#123;COLLECTOR_PORT:9410&#125;</div><div class="line">  query:</div><div class="line">    # 7 days in millis</div><div class="line">    lookback: $&#123;QUERY_LOOKBACK:86400000&#125;</div><div class="line">    # The Cache-Control max-age (seconds) for /api/v1/services and /api/v1/spans</div><div class="line">    names-max-age: 300</div><div class="line">    # CORS allowed-origins.</div><div class="line">    allowed-origins: &quot;*&quot;</div><div class="line"></div><div class="line">  storage:</div><div class="line">    strict-trace-id: $&#123;STRICT_TRACE_ID:true&#125;</div><div class="line">    type: $&#123;STORAGE_TYPE:mem&#125;</div><div class="line">    cassandra:</div><div class="line">      # Comma separated list of hosts / ip addresses part of Cassandra cluster.</div><div class="line">      contact-points: $&#123;CASSANDRA_CONTACT_POINTS:localhost&#125;</div><div class="line">      # Name of the datacenter that will be considered &quot;local&quot; for latency load balancing. When unset, load-balancing is round-robin.</div><div class="line">      local-dc: $&#123;CASSANDRA_LOCAL_DC:&#125;</div><div class="line">      # Will throw an exception on startup if authentication fails.</div><div class="line">      username: $&#123;CASSANDRA_USERNAME:&#125;</div><div class="line">      password: $&#123;CASSANDRA_PASSWORD:&#125;</div><div class="line">      keyspace: $&#123;CASSANDRA_KEYSPACE:zipkin&#125;</div><div class="line">      # Max pooled connections per datacenter-local host.</div><div class="line">      max-connections: $&#123;CASSANDRA_MAX_CONNECTIONS:8&#125;</div><div class="line">      # Ensuring that schema exists, if enabled tries to execute script /zipkin-cassandra-core/resources/cassandra-schema-cql3.txt.</div><div class="line">      ensure-schema: $&#123;CASSANDRA_ENSURE_SCHEMA:true&#125;</div><div class="line">      # 7 days in seconds</div><div class="line">      span-ttl: $&#123;CASSANDRA_SPAN_TTL:604800&#125;</div><div class="line">      # 3 days in seconds</div><div class="line">      index-ttl: $&#123;CASSANDRA_INDEX_TTL:259200&#125;</div><div class="line">      # the maximum trace index metadata entries to cache</div><div class="line">      index-cache-max: $&#123;CASSANDRA_INDEX_CACHE_MAX:100000&#125;</div><div class="line">      # how long to cache index metadata about a trace. 1 minute in seconds</div><div class="line">      index-cache-ttl: $&#123;CASSANDRA_INDEX_CACHE_TTL:60&#125;</div><div class="line">      # how many more index rows to fetch than the user-supplied query limit</div><div class="line">      index-fetch-multiplier: $&#123;CASSANDRA_INDEX_FETCH_MULTIPLIER:3&#125;</div><div class="line">      # Using ssl for connection, rely on Keystore</div><div class="line">      use-ssl: $&#123;CASSANDRA_USE_SSL:false&#125;</div><div class="line">    cassandra3:</div><div class="line">      # Comma separated list of hosts / ip addresses part of Cassandra cluster.</div><div class="line">      contact-points: $&#123;CASSANDRA3_CONTACT_POINTS:localhost&#125;</div><div class="line">      # Name of the datacenter that will be considered &quot;local&quot; for latency load balancing. When unset, load-balancing is round-robin.</div><div class="line">      local-dc: $&#123;CASSANDRA3_LOCAL_DC:&#125;</div><div class="line">      # Will throw an exception on startup if authentication fails.</div><div class="line">      username: $&#123;CASSANDRA3_USERNAME:&#125;</div><div class="line">      password: $&#123;CASSANDRA3_PASSWORD:&#125;</div><div class="line">      keyspace: $&#123;CASSANDRA3_KEYSPACE:zipkin3&#125;</div><div class="line">      # Max pooled connections per datacenter-local host.</div><div class="line">      max-connections: $&#123;CASSANDRA3_MAX_CONNECTIONS:8&#125;</div><div class="line">      # Ensuring that schema exists, if enabled tries to execute script /cassandra3-schema.cql</div><div class="line">      ensure-schema: $&#123;CASSANDRA3_ENSURE_SCHEMA:true&#125;</div><div class="line">      # how many more index rows to fetch than the user-supplied query limit</div><div class="line">      index-fetch-multiplier: $&#123;CASSANDRA3_INDEX_FETCH_MULTIPLIER:3&#125;</div><div class="line">      # Using ssl for connection, rely on Keystore</div><div class="line">      use-ssl: $&#123;CASSANDRA3_USE_SSL:false&#125;</div><div class="line">    elasticsearch:</div><div class="line">      # host is left unset intentionally, to defer the decision</div><div class="line">      hosts: $&#123;ES_HOSTS:&#125;</div><div class="line">      pipeline: $&#123;ES_PIPELINE:&#125;</div><div class="line">      max-requests: $&#123;ES_MAX_REQUESTS:64&#125;</div><div class="line">      aws:</div><div class="line">        domain: $&#123;ES_AWS_DOMAIN:&#125;</div><div class="line">        region: $&#123;ES_AWS_REGION:&#125;</div><div class="line">      index: $&#123;ES_INDEX:zipkin&#125;</div><div class="line">      date-separator: $&#123;ES_DATE_SEPARATOR:-&#125;</div><div class="line">      index-shards: $&#123;ES_INDEX_SHARDS:5&#125;</div><div class="line">      index-replicas: $&#123;ES_INDEX_REPLICAS:1&#125;</div><div class="line">      username: $&#123;ES_USERNAME:&#125;</div><div class="line">      password: $&#123;ES_PASSWORD:&#125;</div><div class="line">    mysql:</div><div class="line">      host: $&#123;MYSQL_HOST:localhost&#125;</div><div class="line">      port: $&#123;MYSQL_TCP_PORT:3306&#125;</div><div class="line">      username: $&#123;MYSQL_USER:&#125;</div><div class="line">      password: $&#123;MYSQL_PASS:&#125;</div><div class="line">      db: $&#123;MYSQL_DB:zipkin&#125;</div><div class="line">      max-active: $&#123;MYSQL_MAX_CONNECTIONS:10&#125;</div><div class="line">      use-ssl: $&#123;MYSQL_USE_SSL:false&#125;</div><div class="line">  ui:</div><div class="line">    ## Values below here are mapped to ZipkinUiProperties, served as /config.json</div><div class="line">    # Default limit for Find Traces</div><div class="line">    query-limit: 10</div><div class="line">    # The value here becomes a label in the top-right corner</div><div class="line">    environment:</div><div class="line">    # Default duration to look back when finding traces.</div><div class="line">    # Affects the &quot;Start time&quot; element in the UI. 1 hour in millis</div><div class="line">    default-lookback: 3600000</div><div class="line">    # Which sites this Zipkin UI covers. Regex syntax. (e.g. http:\/\/example.com\/.*)</div><div class="line">    # Multiple sites can be specified, e.g.</div><div class="line">    # - .*example1.com</div><div class="line">    # - .*example2.com</div><div class="line">    # Default is &quot;match all websites&quot;</div><div class="line">    instrumented: .*</div><div class="line"></div><div class="line">server:</div><div class="line">  port: $&#123;QUERY_PORT:9411&#125;</div><div class="line">  compression:</div><div class="line">    enabled: true</div><div class="line">    # compresses any response over min-response-size (default is 2KiB)</div><div class="line">    # Includes dynamic json content and large static assets from zipkin-ui</div><div class="line">    mime-types: application/json,application/javascript,text/css,image/svg</div><div class="line"></div><div class="line">spring:</div><div class="line">  mvc:</div><div class="line">    favicon:</div><div class="line">      # zipkin has its own favicon</div><div class="line">      enabled: false</div><div class="line">  autoconfigure:</div><div class="line">    exclude:</div><div class="line">      # otherwise we might initialize even when not needed (ex when storage type is cassandra)</div><div class="line">      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</div><div class="line"></div><div class="line">info:</div><div class="line">  zipkin:</div><div class="line">    version: &quot;@project.version@&quot;</div><div class="line"></div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    # Silence Invalid method name: &apos;__can__finagle__trace__v3__&apos;</div><div class="line">    com.facebook.swift.service.ThriftServiceProcessor: &apos;OFF&apos;</div><div class="line">#     # investigate /api/v1/dependencies</div><div class="line">#     zipkin.internal.DependencyLinker: &apos;DEBUG&apos;</div><div class="line">#     # log cassandra queries (DEBUG is without values)</div><div class="line">#     com.datastax.driver.core.QueryLogger: &apos;TRACE&apos;</div><div class="line">#     # log cassandra trace propagation</div><div class="line">#     com.datastax.driver.core.Message: &apos;TRACE&apos;</div></pre></td></tr></table></figure>
<h2 id="zipkin-server启动"><a href="#zipkin-server启动" class="headerlink" title="zipkin-server启动"></a>zipkin-server启动</h2><blockquote>
<p>zipkin基于springboot</p>
</blockquote>
<p>zipkin-server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableZipkinServer</div><div class="line">public class ZipkinServer &#123;</div><div class="line"></div><div class="line">  public static void main(String[] args) &#123;</div><div class="line">    new SpringApplicationBuilder(ZipkinServer.class)</div><div class="line">        .listeners(new RegisterZipkinHealthIndicators())</div><div class="line">        .properties(&quot;spring.config.name=zipkin-server&quot;).run(args);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">导入</div><div class="line">@Target(ElementType.TYPE)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">@Import(&#123;ZipkinServerConfiguration.class, BraveConfiguration.class, ZipkinQueryApiV1.class, ZipkinHttpCollector.class&#125;)</div><div class="line">public @interface EnableZipkinServer &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>step1.构建存储</p>
<ul>
<li>StorageComponent<br><img src="https://cloud.githubusercontent.com/assets/9413389/25321799/1fb02d1c-28e4-11e7-9f5b-da8f018b33e6.png" alt="image"></li>
<li>SpanStore<br><img src="https://cloud.githubusercontent.com/assets/9413389/25321868/86ad59c2-28e4-11e7-8b61-375af4703372.png" alt="image"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">storage:</div><div class="line">    strict-trace-id: $&#123;STRICT_TRACE_ID:true&#125;</div><div class="line">    type: $&#123;STORAGE_TYPE:mem&#125;</div><div class="line">配置文件默认使用为mem内存存储</div><div class="line">可以修改 -XX为springboot对应配置</div><div class="line">-XXstorage.type=对应存储结构</div><div class="line"></div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class ZipkinServerConfiguration &#123;</div><div class="line"></div><div class="line">  ... </div><div class="line"></div><div class="line">  //对应默认存储配置，只有当zipkin.storage.type=mem才会执行</div><div class="line">  @Configuration</div><div class="line">  // &quot;matchIfMissing = true&quot; ensures this is used when there&apos;s no configured storage type</div><div class="line">  @ConditionalOnProperty(name = &quot;zipkin.storage.type&quot;, havingValue = &quot;mem&quot;, matchIfMissing = true)</div><div class="line">  @ConditionalOnMissingBean(StorageComponent.class)</div><div class="line">  static class InMemoryConfiguration &#123;</div><div class="line">    @Bean StorageComponent storage(@Value(&quot;$&#123;zipkin.storage.strict-trace-id:true&#125;&quot;) boolean strictTraceId) &#123;</div><div class="line">      return InMemoryStorage.builder().strictTraceId(strictTraceId).build();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="提供api"><a href="#提供api" class="headerlink" title="提供api"></a>提供api</h2><h3 id="生成trace"><a href="#生成trace" class="headerlink" title="生成trace"></a>生成trace</h3><p>rest入口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">@CrossOrigin(&quot;$&#123;zipkin.query.allowed-origins:*&#125;&quot;)</div><div class="line">public class ZipkinHttpCollector &#123;</div><div class="line">  static final ResponseEntity&lt;?&gt; SUCCESS = ResponseEntity.accepted().build();</div><div class="line">  static final String APPLICATION_THRIFT = &quot;application/x-thrift&quot;;</div><div class="line"></div><div class="line">  final CollectorMetrics metrics;</div><div class="line">  final Collector collector;</div><div class="line"></div><div class="line">  @Autowired ZipkinHttpCollector(StorageComponent storage, CollectorSampler sampler,</div><div class="line">      CollectorMetrics metrics) &#123;</div><div class="line">    this.metrics = metrics.forTransport(&quot;http&quot;);</div><div class="line">    this.collector = Collector.builder(getClass())</div><div class="line">        .storage(storage).sampler(sampler).metrics(this.metrics).build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  //入口</div><div class="line">  @RequestMapping(value = &quot;/api/v1/spans&quot;, method = POST)</div><div class="line">  public ListenableFuture&lt;ResponseEntity&lt;?&gt;&gt; uploadSpansJson(</div><div class="line">      @RequestHeader(value = &quot;Content-Encoding&quot;, required = false) String encoding,</div><div class="line">      @RequestBody byte[] body</div><div class="line">  ) &#123;</div><div class="line">    return validateAndStoreSpans(encoding, Codec.JSON, body);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @RequestMapping(value = &quot;/api/v1/spans&quot;, method = POST, consumes = APPLICATION_THRIFT)</div><div class="line">  public ListenableFuture&lt;ResponseEntity&lt;?&gt;&gt; uploadSpansThrift(</div><div class="line">      @RequestHeader(value = &quot;Content-Encoding&quot;, required = false) String encoding,</div><div class="line">      @RequestBody byte[] body</div><div class="line">  ) &#123;</div><div class="line">    return validateAndStoreSpans(encoding, Codec.THRIFT, body);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ListenableFuture&lt;ResponseEntity&lt;?&gt;&gt; validateAndStoreSpans(String encoding, Codec codec,</div><div class="line">      byte[] body) &#123;</div><div class="line">    SettableListenableFuture&lt;ResponseEntity&lt;?&gt;&gt; result = new SettableListenableFuture&lt;&gt;();</div><div class="line">    metrics.incrementMessages();</div><div class="line">    if (encoding != null &amp;&amp; encoding.contains(&quot;gzip&quot;)) &#123;</div><div class="line">      try &#123;</div><div class="line">        body = gunzip(body);</div><div class="line">      &#125; catch (IOException e) &#123;</div><div class="line">        metrics.incrementMessagesDropped();</div><div class="line">        result.set(ResponseEntity.badRequest().body(&quot;Cannot gunzip spans: &quot; + e.getMessage() + &quot;\n&quot;));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">	//接收span</div><div class="line">    collector.acceptSpans(body, codec, new Callback&lt;Void&gt;() &#123;</div><div class="line">      @Override public void onSuccess(@Nullable Void value) &#123;</div><div class="line">        result.set(SUCCESS);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override public void onError(Throwable t) &#123;</div><div class="line">        String message = t.getMessage() == null ? t.getClass().getSimpleName() : t.getMessage();</div><div class="line">        result.set(t.getMessage() == null || message.startsWith(&quot;Cannot store&quot;)</div><div class="line">            ? ResponseEntity.status(500).body(message + &quot;\n&quot;)</div><div class="line">            : ResponseEntity.status(400).body(message + &quot;\n&quot;));</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    return result;</div><div class="line">  &#125;</div><div class="line">  //略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>collector处理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">public final class Collector &#123;</div><div class="line"></div><div class="line">  /** Needed to scope this to the correct logging category */</div><div class="line">  public static Builder builder(Class&lt;?&gt; loggingClass) &#123;</div><div class="line">    return new Builder(Logger.getLogger(checkNotNull(loggingClass, &quot;loggingClass&quot;).getName()));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static final class Builder &#123;</div><div class="line">    final Logger logger;</div><div class="line">    StorageComponent storage = null;</div><div class="line">    CollectorSampler sampler = CollectorSampler.ALWAYS_SAMPLE;</div><div class="line">    CollectorMetrics metrics = CollectorMetrics.NOOP_METRICS;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    public Collector build() &#123;</div><div class="line">      return new Collector(this);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  final Logger logger;</div><div class="line">  final StorageComponent storage;</div><div class="line">  final CollectorSampler sampler;</div><div class="line">  final CollectorMetrics metrics;</div><div class="line"></div><div class="line">  Collector(Builder builder) &#123;</div><div class="line">    this.logger = checkNotNull(builder.logger, &quot;logger&quot;);</div><div class="line">    this.storage = checkNotNull(builder.storage, &quot;storage&quot;);</div><div class="line">    this.sampler = builder.sampler == null ? CollectorSampler.ALWAYS_SAMPLE : builder.sampler;</div><div class="line">    this.metrics = builder.metrics == null ? CollectorMetrics.NOOP_METRICS : builder.metrics;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public void acceptSpans(byte[] serializedSpans, Codec codec, Callback&lt;Void&gt; callback) &#123;</div><div class="line">    metrics.incrementBytes(serializedSpans.length);//记录指标</div><div class="line">    List&lt;Span&gt; spans;</div><div class="line">    try &#123;</div><div class="line">      spans = codec.readSpans(serializedSpans);//字节数组转换成对象</div><div class="line">    &#125; catch (RuntimeException e) &#123;</div><div class="line">      callback.onError(errorReading(e));</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    accept(spans, callback);//处理span</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  public void accept(List&lt;Span&gt; spans, Callback&lt;Void&gt; callback) &#123;</div><div class="line">    if (spans.isEmpty()) &#123;</div><div class="line">      callback.onSuccess(null);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    metrics.incrementSpans(spans.size());</div><div class="line"></div><div class="line">    List&lt;Span&gt; sampled = sample(spans);</div><div class="line">    if (sampled.isEmpty()) &#123;</div><div class="line">      callback.onSuccess(null);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">      storage.asyncSpanConsumer().accept(sampled, acceptSpansCallback(sampled));//处理</div><div class="line">      callback.onSuccess(null);</div><div class="line">    &#125; catch (RuntimeException e) &#123;</div><div class="line">      callback.onError(errorStoringSpans(sampled, e));</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  //取样</div><div class="line">  List&lt;Span&gt; sample(List&lt;Span&gt; input) &#123;</div><div class="line">    List&lt;Span&gt; sampled = new ArrayList&lt;&gt;(input.size());</div><div class="line">    for (Span s : input) &#123;</div><div class="line">      if (sampler.isSampled(s)) sampled.add(s);</div><div class="line">    &#125;</div><div class="line">    int dropped = input.size() - sampled.size();</div><div class="line">    if (dropped &gt; 0) metrics.incrementSpansDropped(dropped);</div><div class="line">    return sampled;</div><div class="line">  &#125;</div><div class="line">   ...</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>InMemorySpanStore最终处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">/** Internally, spans are indexed on 64-bit trace ID */</div><div class="line">public final class InMemorySpanStore implements SpanStore &#123;</div><div class="line">  private final Multimap&lt;Long, Span&gt; traceIdToSpans = new LinkedListMultimap&lt;&gt;();//traceId+span</div><div class="line">  private final Set&lt;Pair&lt;Long&gt;&gt; traceIdTimeStamps = new TreeSet&lt;&gt;(VALUE_2_DESCENDING);//traceId+timestap</div><div class="line">  private final Multimap&lt;String, Pair&lt;Long&gt;&gt; serviceToTraceIdTimeStamp =</div><div class="line">      new SortedByValue2Descending&lt;&gt;();</div><div class="line">  private final Multimap&lt;String, String&gt; serviceToSpanNames =</div><div class="line">      new LinkedHashSetMultimap&lt;&gt;();//serviceName+spanName</div><div class="line">  private final boolean strictTraceId;</div><div class="line">  volatile int acceptedSpanCount;</div><div class="line"></div><div class="line">  // Historical constructor</div><div class="line">  public InMemorySpanStore() &#123;</div><div class="line">    this(new InMemoryStorage.Builder());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  InMemorySpanStore(InMemoryStorage.Builder builder) &#123;</div><div class="line">    this.strictTraceId = builder.strictTraceId;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  final StorageAdapters.SpanConsumer spanConsumer = new StorageAdapters.SpanConsumer() &#123;</div><div class="line">    @Override public void accept(List&lt;Span&gt; spans) &#123;</div><div class="line">      for (Span span : spans) &#123;</div><div class="line">        Long timestamp = guessTimestamp(span);</div><div class="line">        Pair&lt;Long&gt; traceIdTimeStamp =</div><div class="line">            Pair.create(span.traceId, timestamp == null ? Long.MIN_VALUE : timestamp);</div><div class="line">        String spanName = span.name;</div><div class="line">        synchronized (InMemorySpanStore.this) &#123;</div><div class="line">          traceIdTimeStamps.add(traceIdTimeStamp);</div><div class="line">          traceIdToSpans.put(span.traceId, span);</div><div class="line">          acceptedSpanCount++;</div><div class="line"></div><div class="line">          for (String serviceName : span.serviceNames()) &#123;</div><div class="line">            serviceToTraceIdTimeStamp.put(serviceName, traceIdTimeStamp);</div><div class="line">            serviceToSpanNames.put(serviceName, spanName);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override public String toString() &#123;</div><div class="line">      return &quot;InMemorySpanConsumer&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"> ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="查询trace"><a href="#查询trace" class="headerlink" title="查询trace"></a>查询trace</h3><p>提供api对应查询为配置的storeage<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@RestController</div><div class="line">@RequestMapping(&quot;/api/v1&quot;)</div><div class="line">@CrossOrigin(&quot;$&#123;zipkin.query.allowed-origins:*&#125;&quot;)</div><div class="line">public class ZipkinQueryApiV1 &#123;</div><div class="line"></div><div class="line">  @Autowired</div><div class="line">  @Value(&quot;$&#123;zipkin.query.lookback:86400000&#125;&quot;)</div><div class="line">  int defaultLookback = 86400000; // 1 day in millis</div><div class="line"></div><div class="line">  /** The Cache-Control max-age (seconds) for /api/v1/services and /api/v1/spans */</div><div class="line">  @Value(&quot;$&#123;zipkin.query.names-max-age:300&#125;&quot;)</div><div class="line">  int namesMaxAge = 300; // 5 minutes</div><div class="line">  volatile int serviceCount; // used as a threshold to start returning cache-control headers</div><div class="line"></div><div class="line">  private final StorageComponent storage;</div><div class="line"></div><div class="line">  @Autowired</div><div class="line">  public ZipkinQueryApiV1(StorageComponent storage) &#123;</div><div class="line">    this.storage = storage; // don&apos;t cache spanStore here as it can cause the app to crash!</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @RequestMapping(value = &quot;/dependencies&quot;, method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE)</div><div class="line">  public byte[] getDependencies(@RequestParam(value = &quot;endTs&quot;, required = true) long endTs,</div><div class="line">                                @RequestParam(value = &quot;lookback&quot;, required = false) Long lookback) &#123;</div><div class="line">    return Codec.JSON.writeDependencyLinks(storage.spanStore().getDependencies(endTs, lookback != null ? lookback : defaultLookback));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @RequestMapping(value = &quot;/services&quot;, method = RequestMethod.GET)</div><div class="line">  public ResponseEntity&lt;List&lt;String&gt;&gt; getServiceNames() &#123;</div><div class="line">    List&lt;String&gt; serviceNames = storage.spanStore().getServiceNames();</div><div class="line">    serviceCount = serviceNames.size();</div><div class="line">    return maybeCacheNames(serviceNames);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @RequestMapping(value = &quot;/spans&quot;, method = RequestMethod.GET)</div><div class="line">  public ResponseEntity&lt;List&lt;String&gt;&gt; getSpanNames(</div><div class="line">      @RequestParam(value = &quot;serviceName&quot;, required = true) String serviceName) &#123;</div><div class="line">    return maybeCacheNames(storage.spanStore().getSpanNames(serviceName));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @RequestMapping(value = &quot;/traces&quot;, method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE)</div><div class="line">  public String getTraces(</div><div class="line">      @RequestParam(value = &quot;serviceName&quot;, required = false) String serviceName,</div><div class="line">      @RequestParam(value = &quot;spanName&quot;, defaultValue = &quot;all&quot;) String spanName,</div><div class="line">      @RequestParam(value = &quot;annotationQuery&quot;, required = false) String annotationQuery,</div><div class="line">      @RequestParam(value = &quot;minDuration&quot;, required = false) Long minDuration,</div><div class="line">      @RequestParam(value = &quot;maxDuration&quot;, required = false) Long maxDuration,</div><div class="line">      @RequestParam(value = &quot;endTs&quot;, required = false) Long endTs,</div><div class="line">      @RequestParam(value = &quot;lookback&quot;, required = false) Long lookback,</div><div class="line">      @RequestParam(value = &quot;limit&quot;, required = false) Integer limit) &#123;</div><div class="line">    QueryRequest queryRequest = QueryRequest.builder()</div><div class="line">        .serviceName(serviceName)</div><div class="line">        .spanName(spanName)</div><div class="line">        .parseAnnotationQuery(annotationQuery)</div><div class="line">        .minDuration(minDuration)</div><div class="line">        .maxDuration(maxDuration)</div><div class="line">        .endTs(endTs)</div><div class="line">        .lookback(lookback != null ? lookback : defaultLookback)</div><div class="line">        .limit(limit).build();</div><div class="line"></div><div class="line">    return new String(Codec.JSON.writeTraces(storage.spanStore().getTraces(queryRequest)), UTF_8);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @RequestMapping(value = &quot;/trace/&#123;traceIdHex&#125;&quot;, method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE)</div><div class="line">  public String getTrace(@PathVariable String traceIdHex, WebRequest request) &#123;</div><div class="line">    long traceIdHigh = traceIdHex.length() == 32 ? lowerHexToUnsignedLong(traceIdHex, 0) : 0L;</div><div class="line">    long traceIdLow = lowerHexToUnsignedLong(traceIdHex);</div><div class="line">    String[] raw = request.getParameterValues(&quot;raw&quot;); // RequestParam doesn&apos;t work for param w/o value</div><div class="line">    List&lt;Span&gt; trace = raw != null</div><div class="line">        ? storage.spanStore().getRawTrace(traceIdHigh, traceIdLow)</div><div class="line">        : storage.spanStore().getTrace(traceIdHigh, traceIdLow);</div><div class="line">    if (trace == null) &#123;</div><div class="line">      throw new TraceNotFoundException(traceIdHex, traceIdHigh, traceIdLow);</div><div class="line">    &#125;</div><div class="line">    return new String(Codec.JSON.writeSpans(trace), UTF_8);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @ExceptionHandler(TraceNotFoundException.class)</div><div class="line">  @ResponseStatus(HttpStatus.NOT_FOUND)</div><div class="line">  public void notFound() &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static class TraceNotFoundException extends RuntimeException &#123;</div><div class="line">    public TraceNotFoundException(String traceIdHex, Long traceIdHigh, long traceId) &#123;</div><div class="line">      super(String.format(&quot;Cannot find trace for id=%s,  parsed value=%s&quot;, traceIdHex,</div><div class="line">          traceIdHigh != null ? traceIdHigh + &quot;,&quot; + traceId : traceId));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * We cache names if there are more than 3 services. This helps people getting started: if we</div><div class="line">   * cache empty results, users have more questions. We assume caching becomes a concern when zipkin</div><div class="line">   * is in active use, and active use usually implies more than 3 services.</div><div class="line">   */</div><div class="line">  ResponseEntity&lt;List&lt;String&gt;&gt; maybeCacheNames(List&lt;String&gt; names) &#123;</div><div class="line">    ResponseEntity.BodyBuilder response = ResponseEntity.ok();</div><div class="line">    if (serviceCount &gt; 3) &#123;</div><div class="line">      response.cacheControl(CacheControl.maxAge(namesMaxAge, TimeUnit.SECONDS).mustRevalidate());</div><div class="line">    &#125;</div><div class="line">    return response.body(names);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ul>
<li>如果更改了存储的类型，默认会进行直接切换，比如storage.type=elasticsearch,基于springboot的autoconfigure原则，ZipkinElasticsearchHttpStorageAutoConfiguration会执行，同时条件成立会直接创建elasticsearchStoreage</li>
<li>当前只查看了inMemory的流程如果有兴趣其他流程可以自己去看</li>
</ul>
<h2 id="贴下流程图"><a href="#贴下流程图" class="headerlink" title="贴下流程图"></a>贴下流程图</h2><ul>
<li><p>zipkin-server接收插入请求-inMemory<br><img src="https://cloud.githubusercontent.com/assets/9413389/25326353/67e3fbd6-2902-11e7-83aa-2432ec8a9b28.png" alt="zipkin-server -inmemory"></p>
</li>
<li><p>zipkin-server接收查询请求-inMemory<br><img src="https://cloud.githubusercontent.com/assets/9413389/25326482/fd8af400-2902-11e7-86ad-65fb3e6ea869.png" alt="zipkin-server -inmemory"></p>
</li>
<li>项目源码<br><img src="https://cloud.githubusercontent.com/assets/9413389/25326514/20f3ad2e-2903-11e7-8261-aee4634e1e89.png" alt="image"></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://dyingbleed.com/zipkin-source/" target="_blank" rel="external">Zipkin 源码解析</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;源码地址&quot;&gt;&lt;a href=&quot;#源码地址&quot; class=&quot;headerlink&quot; title=&quot;源码地址&quot;&gt;&lt;/a&gt;源码地址&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openzipkin/zipkin&quot; target=&quot;_
    
    </summary>
    
      <category term="zipkin" scheme="https://mykite.github.io/categories/zipkin/"/>
    
    
      <category term="源码分析" scheme="https://mykite.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="springboot" scheme="https://mykite.github.io/tags/springboot/"/>
    
      <category term="zipkin" scheme="https://mykite.github.io/tags/zipkin/"/>
    
  </entry>
  
  <entry>
    <title>zipkin简单介绍及环境搭建（一）</title>
    <link href="https://mykite.github.io/2017/04/21/zipkin%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://mykite.github.io/2017/04/21/zipkin简单介绍及环境搭建（一）/</id>
    <published>2017-04-21T09:41:35.747Z</published>
    <updated>2017-04-25T07:45:57.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是zipkin"><a href="#什么是zipkin" class="headerlink" title="什么是zipkin"></a>什么是zipkin</h2><blockquote>
<p>Zipkin 是 Twitter 的一个开源项目，允许开发者收集 Twitter 各个服务上的监控数据，并提供查询接口</p>
</blockquote>
<h2 id="为什么要使用zipkin"><a href="#为什么要使用zipkin" class="headerlink" title="为什么要使用zipkin"></a>为什么要使用zipkin</h2><blockquote>
<p>随着业务发展，系统拆分导致系统调用链路愈发复杂一个前端请求可能最终需要调用很多次后端服务才能完成，当整个请求变慢或不可用时，我们是无法得知该请求是由某个或某些后端服务引起的，这时就需要解决如何快读定位服务故障点，以对症下药。于是就有了分布式系统调用跟踪的诞生。而zipkin就是开源分布式系统调用跟踪的佼佼者</p>
<p>zipkin基于google-Dapper的论文有兴趣的可以看下</p>
</blockquote>
<p><a href="https://henryz.gitbooks.io/pinpoint-leaning/content/design/dapper.html" target="_blank" rel="external">google-Dapper</a></p>
<h2 id="zipkin体系介绍"><a href="#zipkin体系介绍" class="headerlink" title="zipkin体系介绍"></a>zipkin体系介绍</h2><h3 id="zipkin架构"><a href="#zipkin架构" class="headerlink" title="zipkin架构"></a>zipkin架构</h3><p><img src="https://cloud.githubusercontent.com/assets/9413389/25270789/5ec1521a-26b4-11e7-9679-8c429afdbe0c.png" alt="image"><br>包含组件</p>
<ul>
<li>collector 收集器</li>
<li>storage 存储</li>
<li>api 查询api</li>
<li>ui 界面</li>
</ul>
<h3 id="zipkin存储"><a href="#zipkin存储" class="headerlink" title="zipkin存储"></a>zipkin存储</h3><blockquote>
<p>zipkin存储默认使用inMemory</p>
</blockquote>
<p>支持存储模式</p>
<ul>
<li>inMemory</li>
<li>mysql</li>
<li>Cassandra</li>
<li>Elasticsearch</li>
</ul>
<h3 id="ZipKin数据模型"><a href="#ZipKin数据模型" class="headerlink" title="ZipKin数据模型"></a>ZipKin数据模型</h3><ul>
<li>Trace：一组代表一次用户请求所包含的spans，其中根span只有一个。</li>
<li>Span： 一组代表一次HTTP/RPC请求所包含的annotations。</li>
<li>annotation：包括一个值，时间戳，主机名(留痕迹)。</li>
</ul>
<p>几个时间</p>
<ul>
<li>cs：客户端发起请求，标志Span的开始</li>
<li>sr：服务端接收到请求，并开始处理内部事务，其中sr - cs则为网络延迟和时钟抖动</li>
<li>ss：服务端处理完请求，返回响应内容，其中ss - sr则为服务端处理请求耗时</li>
<li>cr：客户端接收到服务端响应内容，标志着Span的结束，其中cr - ss则为网络延迟和时钟抖动</li>
</ul>
<h2 id="搭建zipkin"><a href="#搭建zipkin" class="headerlink" title="搭建zipkin"></a>搭建zipkin</h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><ul>
<li><a href="https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec" target="_blank" rel="external">zipkin last jar 下载地址</a></li>
<li><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="external">zipkin-github</a></li>
</ul>
<h3 id="启动zipkin"><a href="#启动zipkin" class="headerlink" title="启动zipkin"></a>启动zipkin</h3><p>java -jar zipkin-server-1.22.1-exec.jar</p>
<h3 id="使用elasticsearch-5-3-0作为存储启动zipkin"><a href="#使用elasticsearch-5-3-0作为存储启动zipkin" class="headerlink" title="使用elasticsearch-5.3.0作为存储启动zipkin"></a>使用elasticsearch-5.3.0作为存储启动zipkin</h3><p>链接</p>
<ul>
<li><a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="external">elasticsearch-5.3.0下载</a></li>
<li><a href="https://github.com/elastic/elasticsearch" target="_blank" rel="external">github</a><br>解压elasticsearch-5.3.0运行<br><img src="https://cloud.githubusercontent.com/assets/9413389/25267627/16369296-26a8-11e7-87e8-f62b06db983c.png" alt="image"><br>启动完成界面<br><img src="https://cloud.githubusercontent.com/assets/9413389/25267647/2d55caaa-26a8-11e7-9fa5-f2f5a656b001.png" alt="image"><br>启动zipkin使用elasticsearch<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java -jar zipkin-server-1.22.1-exec.jar --STORAGE_TYPE=elasticsearch --DES_HOSTS=http://localhost:9200</div><div class="line">zipkin-server-1.22.1-exec.jar采用springboot编写,springboot传入参数使用--key=value.</div><div class="line">当前为什么使用--STORAGE_TYPE，--DES_HOSTS由配置文件里面决定</div></pre></td></tr></table></figure>
</li>
</ul>
<p>zipkin 控制台<br><img src="https://cloud.githubusercontent.com/assets/9413389/25270543/9fd0ccbe-26b3-11e7-962f-ee5cba0fcd97.png" alt="image"><br>zipkin 明细<br><img src="https://cloud.githubusercontent.com/assets/9413389/25270587/bd039550-26b3-11e7-9901-20065981696f.png" alt="image"><br>zipkin 依赖</p>
<h3 id="springboot-apache-httpclient使用zipkin"><a href="#springboot-apache-httpclient使用zipkin" class="headerlink" title="springboot+apache-httpclient使用zipkin"></a>springboot+apache-httpclient使用zipkin</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://cloud.githubusercontent.com/assets/9413389/25271285/37edea5c-26b6-11e7-8af3-621e05133665.png" alt="image"></p>
<h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.kite.zipkin&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;zipkin-demo-server&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;zipkin-demo-server&lt;/name&gt;</div><div class="line">	&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.5.2.RELEASE&lt;/version&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- brave core --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;io.zipkin.brave&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;brave-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;3.9.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;io.zipkin.brave&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;brave-spancollector-http&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;3.9.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;io.zipkin.brave&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;brave-web-servlet-filter&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;3.9.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;io.zipkin.brave&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;brave-apache-http-interceptors&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;3.9.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;httpclient&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line"></div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">				&lt;configuration&gt;</div><div class="line">					&lt;source&gt;1.7&lt;/source&gt;</div><div class="line">					&lt;target&gt;1.7&lt;/target&gt;</div><div class="line">					&lt;encoding&gt;UTF-8&lt;/encoding&gt;</div><div class="line">				&lt;/configuration&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>ZipkinConfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">package com.kite.zipkin.config;</div><div class="line"></div><div class="line"></div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.impl.client.HttpClients;</div><div class="line">import org.springframework.context.annotation.Bean;</div><div class="line">import org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line">import com.github.kristofa.brave.Brave;</div><div class="line">import com.github.kristofa.brave.Brave.Builder;</div><div class="line">import com.github.kristofa.brave.EmptySpanCollectorMetricsHandler;</div><div class="line">import com.github.kristofa.brave.Sampler;</div><div class="line">import com.github.kristofa.brave.SpanCollector;</div><div class="line">import com.github.kristofa.brave.http.DefaultSpanNameProvider;</div><div class="line">import com.github.kristofa.brave.http.HttpSpanCollector;</div><div class="line">import com.github.kristofa.brave.http.HttpSpanCollector.Config;</div><div class="line">import com.github.kristofa.brave.httpclient.BraveHttpRequestInterceptor;</div><div class="line">import com.github.kristofa.brave.httpclient.BraveHttpResponseInterceptor;</div><div class="line">import com.github.kristofa.brave.servlet.BraveServletFilter;</div><div class="line"></div><div class="line">@Configuration</div><div class="line">public class ZipkinConfig &#123;</div><div class="line">    //span（一次请求信息或者一次链路调用）信息收集器  </div><div class="line">    @Bean  </div><div class="line">    public SpanCollector spanCollector() &#123;  </div><div class="line">        Config config = HttpSpanCollector.Config.builder()  </div><div class="line">                .compressionEnabled(false)// 默认false，span在transport之前是否会被gzipped  </div><div class="line">                .connectTimeout(5000)  </div><div class="line">                .flushInterval(1)  </div><div class="line">                .readTimeout(6000)  </div><div class="line">                .build();  </div><div class="line">        return HttpSpanCollector.create(&quot;http://localhost:9411&quot;, config, new EmptySpanCollectorMetricsHandler());  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //作为各调用链路，只需要负责将指定格式的数据发送给zipkin  </div><div class="line">    @Bean  </div><div class="line">    public Brave brave(SpanCollector spanCollector)&#123;  </div><div class="line">        Builder builder = new Builder(&quot;service1&quot;);//指定serviceName  </div><div class="line">        builder.spanCollector(spanCollector);  </div><div class="line">        builder.traceSampler(Sampler.create(1));//采集率  </div><div class="line">        return builder.build();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    //设置server的（服务端收到请求和服务端完成处理，并将结果发送给客户端）过滤器  </div><div class="line">    @Bean  </div><div class="line">    public BraveServletFilter braveServletFilter(Brave brave) &#123;  </div><div class="line">        BraveServletFilter filter = new BraveServletFilter(brave.serverRequestInterceptor(),  </div><div class="line">                brave.serverResponseInterceptor(), new DefaultSpanNameProvider());  </div><div class="line">        return filter;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    //设置client的（发起请求和获取到服务端返回信息）拦截器  </div><div class="line">    @Bean  </div><div class="line">    public CloseableHttpClient okHttpClient(Brave brave)&#123;  </div><div class="line">       CloseableHttpClient httpclient = HttpClients.custom()</div><div class="line">                .addInterceptorFirst(new BraveHttpRequestInterceptor(brave.clientRequestInterceptor(), new DefaultSpanNameProvider()))</div><div class="line">                .addInterceptorFirst(new BraveHttpResponseInterceptor(brave.clientResponseInterceptor()))</div><div class="line">                .build();</div><div class="line">        return httpclient;  </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ZipkinBraveController<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.kite.zipkin.controller;</div><div class="line"></div><div class="line">import org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line">import org.apache.http.client.methods.HttpGet;</div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.util.EntityUtils;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.web.bind.annotation.GetMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">@RestController</div><div class="line">public class ZipkinBraveController &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private CloseableHttpClient okHttpClient;</div><div class="line">    </div><div class="line">    @GetMapping(&quot;/service1&quot;)</div><div class="line">    public String myboot() throws Exception &#123;</div><div class="line">        Thread.sleep(100);//100ms</div><div class="line">        HttpGet get = new HttpGet(&quot;http://localhost:81/test&quot;);</div><div class="line">        CloseableHttpResponse execute = okHttpClient.execute(get);</div><div class="line">        /*</div><div class="line">         * 1、执行execute()的前后，会执行相应的拦截器（cs,cr）</div><div class="line">         * 2、请求在被调用方执行的前后，也会执行相应的拦截器（sr,ss）</div><div class="line">         */</div><div class="line">        return EntityUtils.toString(execute.getEntity(), &quot;utf-8&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Application启动类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.kite.zipkin;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">public class Application &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>======================</p>
<blockquote>
<p>zipkin-demo-server-2 serviceName修改</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Brave brave(SpanCollector spanCollector)&#123;  </div><div class="line">        Builder builder = new Builder(&quot;service2&quot;);//指定serviceName  </div><div class="line">        builder.spanCollector(spanCollector);  </div><div class="line">        builder.traceSampler(Sampler.create(1));//采集率  </div><div class="line">        return builder.build();  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>controller修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.kite.zipkin.controller;</div><div class="line"></div><div class="line"></div><div class="line">import org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line">import org.apache.http.client.methods.HttpGet;</div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.util.EntityUtils;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.web.bind.annotation.GetMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">@RestController</div><div class="line">public class ZipkinBraveController &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private CloseableHttpClient httpClient;</div><div class="line"></div><div class="line">    @GetMapping(&quot;/test&quot;)</div><div class="line">    public String myboot() throws Exception &#123;</div><div class="line">        Thread.sleep(200);//100ms</div><div class="line">        HttpGet get1 = new HttpGet(&quot;http://localhost:82/test&quot;);</div><div class="line">        CloseableHttpResponse execute1 = httpClient.execute(get1);</div><div class="line">        /*</div><div class="line">         * 1、执行execute()的前后，会执行相应的拦截器（cs,cr）</div><div class="line">         * 2、请求在被调用方执行的前后，也会执行相应的拦截器（sr,ss）</div><div class="line">         */</div><div class="line">        HttpGet get2 = new HttpGet(&quot;http://localhost:83/test&quot;);</div><div class="line">        CloseableHttpResponse execute2 = httpClient.execute(get2);</div><div class="line"></div><div class="line">        return EntityUtils.toString(execute1.getEntity(), &quot;utf-8&quot;) + &quot;-&quot; +EntityUtils.toString(execute2.getEntity(), &quot;utf-8&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>zipkin-demo-server-3 serviceName修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Bean  </div><div class="line">    public Brave brave(SpanCollector spanCollector)&#123;  </div><div class="line">        Builder builder = new Builder(&quot;service3&quot;);//指定serviceName  </div><div class="line">        builder.spanCollector(spanCollector);  </div><div class="line">        builder.traceSampler(Sampler.create(1));//采集率  </div><div class="line">        return builder.build();  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>controller修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.kite.zipkin.controller;</div><div class="line"></div><div class="line">import org.springframework.web.bind.annotation.GetMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">@RestController</div><div class="line">public class ZipkinBraveController &#123;</div><div class="line"></div><div class="line">    </div><div class="line">    @GetMapping(&quot;/test&quot;)</div><div class="line">    public String myboot() throws Exception &#123;</div><div class="line">        Thread.sleep(100);//100ms</div><div class="line">        return &quot;service3&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>zipkin-demo-server-4 serviceName修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Bean  </div><div class="line">    public Brave brave(SpanCollector spanCollector)&#123;  </div><div class="line">        Builder builder = new Builder(&quot;service4&quot;);//指定serviceName  </div><div class="line">        builder.spanCollector(spanCollector);  </div><div class="line">        builder.traceSampler(Sampler.create(1));//采集率  </div><div class="line">        return builder.build();  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>controller修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.kite.zipkin.controller;</div><div class="line"></div><div class="line">import org.springframework.web.bind.annotation.GetMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">@RestController</div><div class="line">public class ZipkinBraveController &#123;</div><div class="line"></div><div class="line">    </div><div class="line">    @GetMapping(&quot;/test&quot;)</div><div class="line">    public String myboot() throws Exception &#123;</div><div class="line">        Thread.sleep(100);//100ms</div><div class="line">        return &quot;service3&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关注点point"><a href="#关注点point" class="headerlink" title="关注点point"></a>关注点point</h2><ul>
<li>zipkin 运行需要jdk8</li>
<li><a href="https://github.com/naver/pinpoint" target="_blank" rel="external">pinpoint</a> 可以关注下，同样是分布式链路追踪系统(ps:搭建环境1天下来，trace一直不能生成。。有谁碰到过这个问题可以回复下 0.0)<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li>
<li><a href="https://t.hao0.me/devops/2016/10/15/distributed-invoke-trace.html" target="_blank" rel="external">分布式系统调用跟踪实践</a></li>
<li><a href="http://www.jianshu.com/p/7cedbbc3d0fa" target="_blank" rel="external">Brave接入ZipKin实现调用链跟踪【上】</a></li>
<li><a href="http://zipkin.io/pages/architecture.html" target="_blank" rel="external">Architecture</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是zipkin&quot;&gt;&lt;a href=&quot;#什么是zipkin&quot; class=&quot;headerlink&quot; title=&quot;什么是zipkin&quot;&gt;&lt;/a&gt;什么是zipkin&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Zipkin 是 Twitter 的一个开源项目，允许开发
    
    </summary>
    
      <category term="zipkin" scheme="https://mykite.github.io/categories/zipkin/"/>
    
    
      <category term="环境搭建" scheme="https://mykite.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="springboot" scheme="https://mykite.github.io/tags/springboot/"/>
    
      <category term="zipkin" scheme="https://mykite.github.io/tags/zipkin/"/>
    
  </entry>
  
  <entry>
    <title>通过google maps获取国家</title>
    <link href="https://mykite.github.io/2017/04/19/%E9%80%9A%E8%BF%87google%20maps%20%E8%8E%B7%E5%8F%96%E5%9B%BD%E5%AE%B6/"/>
    <id>https://mykite.github.io/2017/04/19/通过google maps 获取国家/</id>
    <published>2017-04-19T09:16:02.653Z</published>
    <updated>2017-04-19T09:18:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote>
<p>根据国家过去相关报警电话, 页面为h5</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>最开始直接想到的是通过百度地图api来进行，实现不过查看官方文档来看，满足不了要求，不能获取到国家级别的数据</p>
<h3 id="百度地图api"><a href="#百度地图api" class="headerlink" title="百度地图api"></a>百度地图api</h3><p><a href="http://lbsyun.baidu.com/index.php?title=jspopular" target="_blank" rel="external">官方 JavaScript api</a></p>
</blockquote>
<p>demo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">    &lt;title&gt;Hello, World&lt;/title&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">        html &#123;</div><div class="line">            height: 100%</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        body &#123;</div><div class="line">            height: 100%;</div><div class="line">            margin: 0px;</div><div class="line">            padding: 0px</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        #container &#123;</div><div class="line">            height: 100%</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=8a9c8c9b61196a1b5be23217fc94a489&quot;&gt;</div><div class="line">        //v2.0版本的引用方式：src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=您的密钥&quot;</div><div class="line">//v1.4版本及以前版本的引用方式：src=&quot;http://api.map.baidu.com/api?v=1.4&amp;key=您的密钥&amp;callback=initialize&quot;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        //var point = new BMap.Point(116.404, 39.915);  // 创建点坐标  </div><div class="line">        //map.centerAndZoom(point, 15);                 // 初始化地图，设置中心点坐标和地图级别</div><div class="line">        var geolocation = new BMap.Geolocation();</div><div class="line">        var boundary = new BMap.Boundary();</div><div class="line">        boundary.get(&quot;上海&quot;, function(data) &#123;</div><div class="line">        	console.info(data);</div><div class="line">        &#125;)</div><div class="line">        geolocation.getCurrentPosition(function (r) &#123;</div><div class="line">            if (this.getStatus() == BMAP_STATUS_SUCCESS) &#123;</div><div class="line">                console.info(&apos;您的位置：&apos; + r.point.lng + &apos;,&apos; + r.point.lat);</div><div class="line">                // 创建地理编码实例      </div><div class="line">                var myGeo = new BMap.Geocoder();</div><div class="line">                myGeo.getLocation(new BMap.Point(r.point.lng, r.point.lat), function (result) &#123;</div><div class="line">                    console.info(result);</div><div class="line">                	if (result) &#123;</div><div class="line">                        console.info(result.address);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                alert(&apos;failed&apos; + this.getStatus());</div><div class="line">            &#125;</div><div class="line">        &#125;, &#123; enableHighAccuracy: true &#125;)</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://cloud.githubusercontent.com/assets/9413389/25171491/944c8890-2520-11e7-91ff-f88d4b06dd31.png" alt="image"><br>最高只能获取到province省份，不能获取到国家</p>
<h3 id="高德地图api"><a href="#高德地图api" class="headerlink" title="高德地图api"></a>高德地图api</h3><p><a href="http://lbs.amap.com/api/javascript-api/summary/" target="_blank" rel="external">官方JavaScript api</a><br>同样不能拿到 国家，demo 略</p>
<h3 id="h5api-amp-google-maps-api"><a href="#h5api-amp-google-maps-api" class="headerlink" title="h5api&amp;google maps api"></a>h5api&amp;google maps api</h3><blockquote>
<p>HTML5 Geolocation（地理定位）用于定位用户的位置。是html5的主要特性之一</p>
</blockquote>
<p>demo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;title&gt;test&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.10.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		if (navigator.geolocation) &#123;</div><div class="line">			// getCurrentPosition支持三个参数  </div><div class="line">			// getSuccess是执行成功的回调函数  </div><div class="line">			// getError是失败的回调函数  </div><div class="line">			// getOptions是一个对象，用于设置getCurrentPosition的参数  </div><div class="line">			// 后两个不是必要参数  </div><div class="line">			var getOptions = &#123;</div><div class="line">				//是否使用高精度设备，如GPS。默认是true  </div><div class="line">				enableHighAccuracy : true,</div><div class="line">				//超时时间，单位毫秒，默认为0  </div><div class="line">				timeout : 5000,</div><div class="line">				//使用设置时间内的缓存数据，单位毫秒  </div><div class="line">				//默认为0，即始终请求新数据  </div><div class="line">				//如设为Infinity，则始终使用缓存数据  </div><div class="line">				maximumAge : 0</div><div class="line">			&#125;;</div><div class="line">			//成功回调  </div><div class="line">			function getSuccess(position) &#123;</div><div class="line">				alert(position);</div><div class="line">				// getCurrentPosition执行成功后，会把getSuccess传一个position对象  </div><div class="line">				// position有两个属性，coords和timeStamp  </div><div class="line">				// timeStamp表示地理数据创建的时间？？？？？？  </div><div class="line">				// coords是一个对象，包含了地理位置数据  </div><div class="line">				console.info(position.timeStamp);</div><div class="line">				// 估算的纬度  </div><div class="line">				console.info(position.coords.latitude);</div><div class="line">				// 估算的经度  </div><div class="line">				console.info(position.coords.longitude);</div><div class="line">				alert(&quot;当前位置:&quot; + position.coords.latitude + &quot;,&quot;</div><div class="line">						+ position.coords.longitude);</div><div class="line">				</div><div class="line">				getCounty(&#123;&apos;latitude&apos;:position.coords.latitude, &apos;longitude&apos;:position.coords.longitude&#125;);</div><div class="line">				</div><div class="line">				// 估算的高度 (以米为单位的海拔值)  </div><div class="line">				console.info(position.coords.altitude);</div><div class="line">				// 所得经度和纬度的估算精度，以米为单位  </div><div class="line">				console.info(position.coords.accuracy);</div><div class="line">				// 所得高度的估算精度，以米为单位  </div><div class="line">				console.info(position.coords.altitudeAccuracy);</div><div class="line">				// 宿主设备的当前移动方向，以度为单位，相对于正北方向顺时针方向计算  </div><div class="line">				console.info(position.coords.heading);</div><div class="line">				// 设备的当前对地速度，以米/秒为单位      </div><div class="line">				console.info(position.coords.speed);</div><div class="line">				// 除上述结果外，Firefox还提供了另外一个属性address  </div><div class="line">				if (position.address) &#123;</div><div class="line">					//通过address，可以获得国家、省份、城市  </div><div class="line">					console.info(position.address.country);</div><div class="line">					console.info(position.address.province);</div><div class="line">					console.info(position.address.city);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			//获取国家 根据经纬度获取国家</div><div class="line">			function getCounty(data) &#123;</div><div class="line">				var url = &quot;http://maps.googleapis.com/maps/api/geocode/json?latlng=&quot; + data.latitude + &quot;,&quot; + data.longitude + &quot;&amp;sensor=false&quot;;</div><div class="line">				</div><div class="line">				$.post(url, function(data)&#123;</div><div class="line">					console.info(data);</div><div class="line">					if(data.status == &apos;OK&apos;) &#123;</div><div class="line">						var results = data.results;</div><div class="line">						for (var i=0; i &lt; results[0].address_components.length; i++) &#123;</div><div class="line">				          for (var j=0; j &lt; results[0].address_components[i].types.length; j++) &#123;</div><div class="line">				            if (results[0].address_components[i].types[j] == &quot;country&quot;) &#123;</div><div class="line">				              country = results[0].address_components[i];</div><div class="line">				              console.log(country.long_name)</div><div class="line">				              alert(country.long_name)</div><div class="line">				              console.log(country.short_name)</div><div class="line">				              alert(country.short_name)</div><div class="line">				            &#125;</div><div class="line">				          &#125;</div><div class="line">				        &#125;</div><div class="line">					&#125; else &#123;</div><div class="line">						alert(&apos;定位失败&apos;)</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			//失败回调  </div><div class="line"></div><div class="line">			function getError(error) &#123;</div><div class="line">				// 执行失败的回调函数，会接受一个error对象作为参数  </div><div class="line">				// error拥有一个code属性和三个常量属性TIMEOUT、PERMISSION_DENIED、POSITION_UNAVAILABLE  </div><div class="line">				// 执行失败时，code属性会指向三个常量中的一个，从而指明错误原因 </div><div class="line">				alert(error);</div><div class="line">				switch (error.code) &#123;</div><div class="line">				case error.TIMEOUT:</div><div class="line">					alert(&quot;超时&quot;)</div><div class="line">					console.info(&apos;超时&apos;);</div><div class="line">					break;</div><div class="line">				case error.PERMISSION_DENIED:</div><div class="line">					alert(&quot;用户拒绝提供地理位置&quot;)</div><div class="line">					console.info(&apos;用户拒绝提供地理位置&apos;);</div><div class="line">					break;</div><div class="line">				case error.POSITION_UNAVAILABLE:</div><div class="line">					alert(&quot;地理位置不可用&quot;);</div><div class="line">					console.info(&apos;地理位置不可用&apos;);</div><div class="line">					break;</div><div class="line">				default:</div><div class="line">					break;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			navigator.geolocation.getCurrentPosition(getSuccess, getError,</div><div class="line">					getOptions);</div><div class="line">			// watchPosition方法一样可以设置三个参数  </div><div class="line">			// 使用方法和getCurrentPosition方法一致，只是执行效果不同。  </div><div class="line">			// getCurrentPosition只执行一次  </div><div class="line">			// watchPosition只要设备位置发生变化，就会执行  </div><div class="line">			var watcher_id = navigator.geolocation.watchPosition(getSuccess,</div><div class="line">					getError, getOptions);</div><div class="line">			//clearwatch用于终止watchPosition方法  </div><div class="line">			navigator.geolocation.clearWatch(watcher_id);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>通过navigator.geolocation获取到坐标位置，然后通过google maps api可以获取到国家(无需google map api key) ps:国内需要翻墙</li>
<li>需要开启手机定位，如果不开启定位要获取可以使用ip段or百度api定位（百度获取到的经纬度不能直接使用需要进行转换，原因为坐标系统不一致）</li>
</ul>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ul>
<li>百度&amp;高德没看到支持，希望提供支持(可能没看到，如果有人懂的可以联系下)</li>
<li>代码略挫，因为前端是直接用vue写的，就不需要我来封装了，省事</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://segmentfault.com/a/1190000004048824" target="_blank" rel="external">Javascript学习总结 - html5实现定位地理位置</a></li>
<li><a href="http://stackoverflow.com/questions/12918431/get-only-countries-to-autocomplete-from-google-maps-api" target="_blank" rel="external">Get only countries to autocomplete from Google Maps API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;根据国家过去相关报警电话, 页面为h5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="前端" scheme="https://mykite.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="google maps" scheme="https://mykite.github.io/tags/google-maps/"/>
    
      <category term="h5" scheme="https://mykite.github.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>spring-loaded热部署</title>
    <link href="https://mykite.github.io/2017/04/17/spring-loaded%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://mykite.github.io/2017/04/17/spring-loaded热部署/</id>
    <published>2017-04-17T07:21:48.278Z</published>
    <updated>2017-04-17T07:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是spring-loaded"><a href="#什么是spring-loaded" class="headerlink" title="什么是spring-loaded?"></a>什么是spring-loaded?</h2><p>spring-loaded是一个对于jvm代理运行时期改变类文件的重载（重新加载），它转换类loadtime让他们服从后重新加载。不像“热代码替换”只允许一次简单的改变JVM运行(例如更改方法体)spring-loaded允许您添加/修改/删除/字段/方法构造函数。注释类型/方法/字段/构造函数也可以修改和可以添加/删除/修改值的枚举类型。</p>
<h2 id="有什么好处"><a href="#有什么好处" class="headerlink" title="有什么好处?"></a>有什么好处?</h2><ol>
<li>开发测试阶段：能够在启动后动态更改代码调试,无需重启减少切换debug时间（ps:对于eclipse而言，在debug时期只能做到动态更新方法体不能增加）</li>
<li>对于线上测试发布阶段： 能够在出现问题后直接替换class文件而不重启应用（ps:对于外部提供的服务jar形式同样能做到）</li>
</ol>
<h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用?"></a>怎么使用?</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/spring-projects/spring-loaded</div></pre></td></tr></table></figure>
<h3 id="第一步：下载文件"><a href="#第一步：下载文件" class="headerlink" title="第一步：下载文件"></a>第一步：下载文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://repo.spring.io/release/org/springframework/springloaded/1.2.5.RELEASE/springloaded-1.2.5.RELEASE.jar</div></pre></td></tr></table></figure>
<h3 id="第二步：配置jvm启动参数"><a href="#第二步：配置jvm启动参数" class="headerlink" title="第二步：配置jvm启动参数"></a>第二步：配置jvm启动参数</h3><h4 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">eclipse：run as --&gt; run configurations --&gt; arguments --&gt;&gt; VM arguments</div><div class="line">-javaagent:E:\repository\org\springframework\spring-load\springloaded-1.2.5.RELEASE.jar </div><div class="line">-noverify -Dspringloaded=verbose</div><div class="line">详细描述：</div><div class="line">-javaagent: 配置java代理使用下载后的jar包路径</div><div class="line">-noverify: 禁用字节码验证</div><div class="line">-Dspringloaded=verbose 显示springloaded时的详细信息</div></pre></td></tr></table></figure>
<p><img src="https://cloud.githubusercontent.com/assets/9413389/18079968/ef143758-6ec5-11e6-8a72-ab3cd30b4af9.png" alt="image"></p>
<h4 id="java命令启动"><a href="#java命令启动" class="headerlink" title="java命令启动"></a>java命令启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java -javaagent:E:\repository\org\springframework\spring-load\springloaded-1.2.5.RELEASE.jar -noverify Test </div><div class="line">类似</div></pre></td></tr></table></figure>
<h4 id="java-jar包动态替换"><a href="#java-jar包动态替换" class="headerlink" title="java jar包动态替换"></a>java jar包动态替换</h4><h5 id="1-打成runnable-Jar"><a href="#1-打成runnable-Jar" class="headerlink" title="1.打成runnable Jar"></a>1.打成runnable Jar</h5><h5 id="2-命令启动："><a href="#2-命令启动：" class="headerlink" title="2.命令启动："></a>2.命令启动：</h5><p>java -javaagent:E:\repository\org\springframework\spring-load\springloaded-1.2.5.RELEASE.jar -noverify -Dspringloaded=watchJars=main.jar main.jar</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 类Test.java的实现描述：TODO 类实现描述 </div><div class="line"> * @author Administrator 2016年7月4日 下午4:55:59</div><div class="line"> */</div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">    	</div><div class="line">    	while(true) &#123;</div><div class="line">	    	try &#123;</div><div class="line">	    		println();</div><div class="line">	    		Thread.sleep(1000);</div><div class="line">			&#125; catch (Throwable e) &#123; </div><div class="line">				e.printStackTrace(); </div><div class="line">			&#125;</div><div class="line">    		</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	</div><div class="line">    &#125;</div><div class="line">    public static void println() &#123; </div><div class="line">    	System.out.println(&quot;112222221222222&quot;);     </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改变为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 类Test.java的实现描述：TODO 类实现描述 </div><div class="line"> * @author Administrator 2016年7月4日 下午4:55:59</div><div class="line"> */</div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">    	</div><div class="line">    	while(true) &#123;</div><div class="line">	    	try &#123;</div><div class="line">	    		println();</div><div class="line">	    		Thread.sleep(1000);</div><div class="line">			&#125; catch (Throwable e) &#123; </div><div class="line">				e.printStackTrace(); </div><div class="line">			&#125;</div><div class="line">    		</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	</div><div class="line">    &#125;</div><div class="line">    public static void println() &#123; </div><div class="line">    	System.out.println(&quot;test replace jar&quot;);     </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-重新打包替换"><a href="#3-重新打包替换" class="headerlink" title="3.重新打包替换"></a>3.重新打包替换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS：实测在window下无用</div><div class="line">手上无linux机器待测试</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是spring-loaded&quot;&gt;&lt;a href=&quot;#什么是spring-loaded&quot; class=&quot;headerlink&quot; title=&quot;什么是spring-loaded?&quot;&gt;&lt;/a&gt;什么是spring-loaded?&lt;/h2&gt;&lt;p&gt;spring-loade
    
    </summary>
    
      <category term="spring" scheme="https://mykite.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://mykite.github.io/tags/spring/"/>
    
      <category term="热部署" scheme="https://mykite.github.io/tags/%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://mykite.github.io/2017/04/17/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BAhttps%E7%8E%AF%E5%A2%83/"/>
    <id>https://mykite.github.io/2017/04/17/使用nginx搭建https环境/</id>
    <published>2017-04-17T07:19:40.252Z</published>
    <updated>2017-04-17T07:19:40.252Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring-cloud入门环境搭建</title>
    <link href="https://mykite.github.io/2017/04/17/spring-cloud%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mykite.github.io/2017/04/17/spring-cloud入门环境搭建/</id>
    <published>2017-04-17T07:18:29.826Z</published>
    <updated>2017-04-17T07:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是spring-cloud"><a href="#1-什么是spring-cloud" class="headerlink" title="1.什么是spring-cloud"></a>1.什么是spring-cloud</h3><p>spring-cloud是spring提供的微服务整合开发框架。Spring Cloud 为开发者提供了在分布式系统（如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性 Token、全局锁、决策竞选、分布式会话和集群状态）操作的开发工具。使用 Spring Cloud 开发者可以快速实现上述这些模式。</p>
<h3 id="2-为什么使用spring-cloud"><a href="#2-为什么使用spring-cloud" class="headerlink" title="2.为什么使用spring-cloud"></a>2.为什么使用spring-cloud</h3><ol>
<li>经历过netflix业务考验，国外大规模使用</li>
<li>入门门槛低，国内大批量使用spring</li>
<li>快速搭建</li>
</ol>
<h3 id="3-spring-cloud快熟搭建入门"><a href="#3-spring-cloud快熟搭建入门" class="headerlink" title="3.spring-cloud快熟搭建入门"></a>3.spring-cloud快熟搭建入门</h3><h4 id="1-eureka-服务注册组件"><a href="#1-eureka-服务注册组件" class="headerlink" title="1. eureka 服务注册组件"></a>1. eureka 服务注册组件</h4><p><img src="https://cloud.githubusercontent.com/assets/9413389/17472417/53d76e6c-5d7d-11e6-9a17-6148e6d6e4e5.png" alt="image"><br>下载 <a href="https://github.com/mykite/eureka-server.git" target="_blank" rel="external">https://github.com/mykite/eureka-server.git</a><br>编译后直接运行即可，或 mvn clean install 后直接运行jar包后访问<br>部署后：<br><img src="https://cloud.githubusercontent.com/assets/9413389/17504030/b21d00cc-5e27-11e6-8ab9-ad1ff33a1629.png" alt="_20160809115004"></p>
<h4 id="2-configServer"><a href="#2-configServer" class="headerlink" title="2. configServer"></a>2. configServer</h4><pre><code>对配置的集中管理，使用svn or git
https://github.com/mykite/configserver.git
编译后直接运行即可，或 mvn clean install 后直接运行jar包后访问
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">使用方式</div><div class="line">在configserver中配置的</div><div class="line">spring:</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      server:</div><div class="line">        git:</div><div class="line">          uri: https://github.com/mykite/config-repostory</div><div class="line">提交到test分支文件hell-server.yml</div><div class="line">文件内容：</div><div class="line">test.name: kite</div><div class="line">访问：http://localhost:8888/hello-server/profiles/test</div><div class="line">会访问当前配置github上的test分支下的hello-server.yml(or properties文件)</div><div class="line">对应应用中的配置</div><div class="line">spring:</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      uri: http://localhost:8888</div><div class="line">      label: test</div><div class="line"></div><div class="line">可以实现注入</div></pre></td></tr></table></figure>
<h4 id="3-ribbon"><a href="#3-ribbon" class="headerlink" title="3. ribbon"></a>3. ribbon</h4><p>ribbon用以实现负载均衡；实现软负载均衡，核心有三点：</p>
<ol>
<li>服务发现，发现依赖服务的列表</li>
<li>服务选择规则，在多个服务中如何选择一个有效服务</li>
<li>服务监听，检测失效的服务，高效剔除失效服务</li>
</ol>
<p>服务选择规则,其中包括：</p>
<ul>
<li>简单轮询负载均衡</li>
<li>加权响应时间负载均衡</li>
<li>区域感知轮询负载均衡</li>
<li>随机负载均衡<br><img src="https://cloud.githubusercontent.com/assets/9413389/17539644/5812ef2c-5ee2-11e6-97b5-4b815b653d8e.png" alt="_20160810095858"></li>
</ul>
<h4 id="4-hystrix"><a href="#4-hystrix" class="headerlink" title="4. hystrix"></a>4. hystrix</h4><pre><code>断路器
</code></pre><p><img src="https://cloud.githubusercontent.com/assets/9413389/17539629/37e462b2-5ee2-11e6-8afe-33fa5c435416.png" alt="1495376295-5714a86048d32_articlex"></p>
<h4 id="5-zuul"><a href="#5-zuul" class="headerlink" title="5. zuul"></a>5. zuul</h4><pre><code>类似nginx，提供反向代理的功能
</code></pre><p><img src="https://cloud.githubusercontent.com/assets/9413389/17539658/7a74be06-5ee2-11e6-991c-2269945eedbf.png" alt="2240067315-5714a89f0ce51_articlex">   </p>
<h4 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h4><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><p><img src="https://cloud.githubusercontent.com/assets/9413389/17476360/48ca19f6-5d92-11e6-8de9-99ed1796ce72.png" alt="image"><br>springcloud-server   提供的服务<br>springcloud-client   通过feginClient调用服务<br>springcloud-feginclient 通过feginClient调用server<br>springcloud-parent maven父项目</p>
<h6 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h6><p>pom.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.3.5.RELEASE&lt;/version&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line">	&lt;groupId&gt;com.kite.test&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springcloud-parent&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;pom&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;springcloud-parent&lt;/name&gt;</div><div class="line">	&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line">	&lt;modules&gt;</div><div class="line">		&lt;module&gt;../springcloud-client&lt;/module&gt;</div><div class="line">		&lt;module&gt;../springcloud-server&lt;/module&gt;</div><div class="line">		&lt;module&gt;../springcloud-feginclient&lt;/module&gt;</div><div class="line">	&lt;/modules&gt;</div><div class="line">	&lt;dependencyManagement&gt;</div><div class="line">		&lt;dependencies&gt;</div><div class="line">			&lt;dependency&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;Brixton.SR4&lt;/version&gt;</div><div class="line">				&lt;type&gt;pom&lt;/type&gt;</div><div class="line">				&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">			&lt;/dependency&gt;</div><div class="line">		&lt;/dependencies&gt;</div><div class="line">	&lt;/dependencyManagement&gt;</div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<h6 id="server"><a href="#server" class="headerlink" title="server"></a>server</h6><p>pom.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line">	&lt;name&gt;springcloud-client&lt;/name&gt;</div><div class="line">	&lt;artifactId&gt;springcloud-server&lt;/artifactId&gt;</div><div class="line">	&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;com.kite.test&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;springcloud-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>提供的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.kite.test.springcloud.controller;</div><div class="line"></div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RequestMethod;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * 类HelloController.java的实现描述：暴露对外服务</div><div class="line"> * @author pengliang 2016年8月8日 下午4:23:14</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public class HelloController &#123;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * rest 服务用来测试 </div><div class="line">	 * --@requestParam url?xxx=name </div><div class="line">	 * --requestBody 认定为json传输解析  url?&#123;xxx=name&#125;</div><div class="line">	 * @param name</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	@RequestMapping(value = &quot;/hello&quot;, method = RequestMethod.GET)</div><div class="line">	public String hello(String name) &#123;</div><div class="line">		return &quot;&#123;hello: &apos;&quot; + name + &quot;&apos;&#125;&quot;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.kite.test.springcloud;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line">import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</div><div class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</div><div class="line"></div><div class="line"></div><div class="line">//springBoot  作为主启动类</div><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableCircuitBreaker </div><div class="line">public class ServerApplication &#123;</div><div class="line">	</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">    	SpringApplication.run(ServerApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="feginClient"><a href="#feginClient" class="headerlink" title="feginClient"></a>feginClient</h6><p>pom.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line">	&lt;name&gt;springcloud-feginclient&lt;/name&gt;</div><div class="line">	&lt;artifactId&gt;springcloud-feginclient&lt;/artifactId&gt;</div><div class="line">	&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line">	</div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;com.kite.test&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;springcloud-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>feginClient提供接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.kite.test.springcloud.feginclient;</div><div class="line"></div><div class="line">import org.springframework.cloud.netflix.feign.FeignClient;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * feginClient接口</div><div class="line"> * 类HelloFeginClient.java的实现描述：通过feginClient自动调用</div><div class="line"> * @author pengliang 2016年8月8日 下午4:25:36</div><div class="line"> */</div><div class="line">@FeignClient(value=&quot;HelloServer&quot;) //对应到的server端的spring.application.name</div><div class="line">public interface HelloFeginClient &#123;</div><div class="line">	</div><div class="line">@RequestMapping(value = &quot;/hello&quot;, method=RequestMethod.POST)</div><div class="line">	public String hello(@RequestParam(name=&quot;name&quot;) String name);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="cliet"><a href="#cliet" class="headerlink" title="cliet"></a>cliet</h6><p>pom.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line">	&lt;name&gt;springcloud-client&lt;/name&gt;</div><div class="line">	&lt;artifactId&gt;springcloud-client&lt;/artifactId&gt;</div><div class="line">	&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line">	</div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;com.kite.test&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;springcloud-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line">	</div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;com.kite.test&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;springcloud-feginclient&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>client 调用服务类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.kite.test.springcloud.client.controller;</div><div class="line"></div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RequestMethod;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">import com.kite.test.springcloud.feginclient.HelloFeginClient;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 调用测试</div><div class="line"> * 类CallHelloController.java的实现描述：调用feginClient测试</div><div class="line"> * @author pengliang 2016年8月8日 下午4:42:14</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public class CallHelloController &#123;</div><div class="line">	</div><div class="line">	private Logger log = LoggerFactory.getLogger(CallHelloController.class);</div><div class="line">	@Autowired</div><div class="line">	private HelloFeginClient helloFeginClient;</div><div class="line">	</div><div class="line">	@RequestMapping(value=&quot;/hello&quot;, method = RequestMethod.GET)</div><div class="line">	public String hello(String name) &#123;</div><div class="line">		log.info(&quot;call hello parameter:&#123;&#125;&quot;, name);</div><div class="line">		return helloFeginClient.hello(name);  </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>client 启动类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.kite.test.springcloud.client;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line">import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</div><div class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</div><div class="line">import org.springframework.cloud.netflix.feign.EnableFeignClients;</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableFeignClients(basePackages = &quot;com.kite.test&quot;)</div><div class="line">@EnableCircuitBreaker</div><div class="line">public class ClientApplication &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(ClientApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="调用流程图"><a href="#调用流程图" class="headerlink" title="调用流程图"></a>调用流程图</h6><p><img src="https://cloud.githubusercontent.com/assets/9413389/17510215/8bd81bda-5e50-11e6-9d7e-0aa8d8a32341.png" alt="image"></p>
<h6 id="应用实例："><a href="#应用实例：" class="headerlink" title="应用实例："></a>应用实例：</h6><p>在具体的微服务用力中我们一般采用json来作为数据传输格式，通过feginClient来对服务调用来做一层封装hystrix在对feginClient调用时对依赖失败做隔离，ribbon做负载均衡（使用feginClient时已经默认集成ribbon）</p>
<h6 id="项目源码-https-github-com-mykite-springcloud-test-compoments-git"><a href="#项目源码-https-github-com-mykite-springcloud-test-compoments-git" class="headerlink" title="项目源码 https://github.com/mykite/springcloud-test-compoments.git"></a>项目源码 <a href="https://github.com/mykite/springcloud-test-compoments.git" target="_blank" rel="external">https://github.com/mykite/springcloud-test-compoments.git</a></h6>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是spring-cloud&quot;&gt;&lt;a href=&quot;#1-什么是spring-cloud&quot; class=&quot;headerlink&quot; title=&quot;1.什么是spring-cloud&quot;&gt;&lt;/a&gt;1.什么是spring-cloud&lt;/h3&gt;&lt;p&gt;spring-clo
    
    </summary>
    
      <category term="spring-cloud" scheme="https://mykite.github.io/categories/spring-cloud/"/>
    
    
      <category term="spring" scheme="https://mykite.github.io/tags/spring/"/>
    
      <category term="spring-cloud" scheme="https://mykite.github.io/tags/spring-cloud/"/>
    
      <category term="微服务" scheme="https://mykite.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>搭建redis集群环境</title>
    <link href="https://mykite.github.io/2017/04/17/%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/"/>
    <id>https://mykite.github.io/2017/04/17/搭建redis集群环境/</id>
    <published>2017-04-17T07:10:23.246Z</published>
    <updated>2017-04-17T07:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">伪集群，单机上搭建，没多的机器</div></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Redis3.0版本之后支持Cluster</div><div class="line">当前版本3.2.8</div><div class="line">redis集群搭建最少6个节点其中3个主节点</div></pre></td></tr></table></figure>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">接上文redis环境搭建</div><div class="line">redis1配置</div><div class="line">打开集群配置</div><div class="line">port 7001</div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file nodes-7001.conf</div><div class="line">cluster-node-timeout 5000</div><div class="line">redis2配置</div><div class="line">port 7002</div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file nodes-7002.conf</div><div class="line">cluster-node-timeout 5000</div><div class="line">redis3配置</div><div class="line">port 7003</div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file nodes-7003.conf</div><div class="line">cluster-node-timeout 5000</div></pre></td></tr></table></figure>
<p><img src="https://cloud.githubusercontent.com/assets/9413389/23289859/88ce63e4-fa87-11e6-98ab-0eb3aa460cd5.png" alt="image"></p>
<h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd redis1</div><div class="line">./redis-server redis.conf</div><div class="line">cd redis2</div><div class="line">./redis-server redis.conf</div><div class="line">cd redis3</div><div class="line">./redis-server redis.conf</div></pre></td></tr></table></figure>
<h2 id="查看服务是否正常"><a href="#查看服务是否正常" class="headerlink" title="查看服务是否正常"></a>查看服务是否正常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef|grep redis 查看redis进程</div></pre></td></tr></table></figure>
<p><img src="https://cloud.githubusercontent.com/assets/9413389/23289949/40f62e48-fa88-11e6-87b4-bced2dcecce7.png" alt="image"></p>
<h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">官方有提供工具redis-trib.rb，采用ruby编写，so安装ruby</div></pre></td></tr></table></figure>
<h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install ruby ruby-devel rubygems rpm-build</div></pre></td></tr></table></figure>
<h3 id="通过ruby命令工具安装redis"><a href="#通过ruby命令工具安装redis" class="headerlink" title="通过ruby命令工具安装redis"></a>通过ruby命令工具安装redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install redis</div></pre></td></tr></table></figure>
<h3 id="通过redis-trib-rb-创建集群"><a href="#通过redis-trib-rb-创建集群" class="headerlink" title="通过redis-trib.rb 创建集群"></a>通过redis-trib.rb 创建集群</h3><h4 id="查看命令参数"><a href="#查看命令参数" class="headerlink" title="查看命令参数"></a>查看命令参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[root@vultr src]# ./redis-trib.rb </div><div class="line">Usage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;</div><div class="line"></div><div class="line">  set-timeout     host:port milliseconds</div><div class="line">  reshard         host:port</div><div class="line">                  --pipeline &lt;arg&gt;</div><div class="line">                  --to &lt;arg&gt;</div><div class="line">                  --yes</div><div class="line">                  --slots &lt;arg&gt;</div><div class="line">                  --from &lt;arg&gt;</div><div class="line">                  --timeout &lt;arg&gt;</div><div class="line">  del-node        host:port node_id</div><div class="line">  add-node        new_host:new_port existing_host:existing_port</div><div class="line">                  --slave</div><div class="line">                  --master-id &lt;arg&gt;</div><div class="line">  fix             host:port</div><div class="line">                  --timeout &lt;arg&gt;</div><div class="line">  help            (show this help)</div><div class="line">  rebalance       host:port</div><div class="line">                  --pipeline &lt;arg&gt;</div><div class="line">                  --simulate</div><div class="line">                  --auto-weights</div><div class="line">                  --use-empty-masters</div><div class="line">                  --weight &lt;arg&gt;</div><div class="line">                  --timeout &lt;arg&gt;</div><div class="line">                  --threshold &lt;arg&gt;</div><div class="line">  check           host:port</div><div class="line">  info            host:port</div><div class="line">  create          host1:port1 ... hostN:portN</div><div class="line">                  --replicas &lt;arg&gt;</div><div class="line">  import          host:port</div><div class="line">                  --replace</div><div class="line">                  --copy</div><div class="line">                  --from &lt;arg&gt;</div><div class="line">  call            host:port command arg arg .. arg</div><div class="line">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</div></pre></td></tr></table></figure>
<p>创建集群，出错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">./redis-trib.rb  create  --replicas  1  127.0.0.1:7001 127.0.0.1:7002  127.0.0.1:7003 </div><div class="line"></div><div class="line">*** ERROR: Invalid configuration for cluster creation.</div><div class="line">*** Redis Cluster requires at least 3 master nodes.</div><div class="line">*** This is not possible with 3 nodes and 1 replicas per node.</div><div class="line">*** At least 6 nodes are required.</div><div class="line"></div><div class="line">至少需要6个节点</div></pre></td></tr></table></figure></p>
<p>开始创建节点<br><img src="https://cloud.githubusercontent.com/assets/9413389/23291018/3aa03da6-fa90-11e6-917c-08ab0e8da261.png" alt="image"></p>
<p>重新创建redis集群<br><img src="https://cloud.githubusercontent.com/assets/9413389/23291045/74f2de5a-fa90-11e6-996b-3bd38d4c8802.png" alt="image"><br><img src="https://cloud.githubusercontent.com/assets/9413389/23291071/995aec88-fa90-11e6-9f50-4db37a0a52f1.png" alt="image"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1.通过redis-cli链接redis redis-cli -c -p 7001</div><div class="line">[root@vultr bin]# redis-cli -c -p 7001</div><div class="line">127.0.0.1:7001&gt; set name kite</div><div class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:7002</div><div class="line">OK</div><div class="line">127.0.0.1:7002&gt; get name</div><div class="line">&quot;kite&quot;</div><div class="line">127.0.0.1:7002&gt; exit</div><div class="line">[root@vultr bin]# redis-cli -c -p 7003</div><div class="line">127.0.0.1:7003&gt; get name</div><div class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:7002</div><div class="line">&quot;kite&quot;</div><div class="line">127.0.0.1:7002&gt; </div><div class="line"></div><div class="line">已经进行同步</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/yuanermen/p/5717885.html" target="_blank" rel="external">Redis 3.2.1集群搭建</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="环境搭建" scheme="https://mykite.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="redis" scheme="https://mykite.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>springboot使用redis</title>
    <link href="https://mykite.github.io/2017/04/17/springboot%E4%BD%BF%E7%94%A8redis/"/>
    <id>https://mykite.github.io/2017/04/17/springboot使用redis/</id>
    <published>2017-04-17T07:08:48.946Z</published>
    <updated>2017-04-17T07:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>通过maven创建项目</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">	&lt;groupId&gt;com.kite.springboot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;redis&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;name&gt;redis&lt;/name&gt;</div><div class="line">	&lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;java.version&gt;1.7&lt;/java.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line">	&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</div><div class="line">	&lt;/parent&gt;</div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">			&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>application.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">spring.redis:</div><div class="line">  database: 0</div><div class="line">  host: 45.32.112.158 </div><div class="line">  port: 7001</div><div class="line">  pool:</div><div class="line">    max-idle: 8</div><div class="line">    min-idle: 0</div><div class="line">    max-active: 8</div><div class="line">    max-wait: -1</div></pre></td></tr></table></figure></p>
<h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.kite.springboot.redis;</div><div class="line"></div><div class="line">import java.util.Set;</div><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line">import org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line">import org.springframework.web.bind.annotation.GetMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Hello world!</div><div class="line"> *</div><div class="line"> */</div><div class="line">@SpringBootApplication</div><div class="line">@RestController</div><div class="line">public class App &#123;</div><div class="line">	@Autowired</div><div class="line">	StringRedisTemplate stringRedisTemplate;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(App.class, args);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@GetMapping(&quot;/test&quot;)</div><div class="line">	public String test() &#123;</div><div class="line">		Set&lt;String&gt; keys = stringRedisTemplate.keys(&quot;aa&quot;);</div><div class="line">		System.out.println(keys);</div><div class="line">		return &quot;ok&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">connet refersh</div><div class="line">链接不上，注释掉bind(测试使用，生产请勿关闭)</div><div class="line">DENIED Redis is running in protected mode because protected mode is enabled</div><div class="line">保护模式开启，修改为关闭(测试使用，生产请勿关闭)</div><div class="line">正常连接输出</div></pre></td></tr></table></figure>
<p>注释bind后显示*<br><img src="https://cloud.githubusercontent.com/assets/9413389/23248023/38b0f890-f9d8-11e6-82d3-a7ddaad2498e.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目创建&quot;&gt;&lt;a href=&quot;#项目创建&quot; class=&quot;headerlink&quot; title=&quot;项目创建&quot;&gt;&lt;/a&gt;项目创建&lt;/h2&gt;&lt;p&gt;通过maven创建项目&lt;/p&gt;
&lt;h2 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="springboot" scheme="https://mykite.github.io/categories/springboot/"/>
    
    
      <category term="redis" scheme="https://mykite.github.io/tags/redis/"/>
    
      <category term="springboot" scheme="https://mykite.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>redis集群环境搭建</title>
    <link href="https://mykite.github.io/2017/04/17/redis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mykite.github.io/2017/04/17/redis环境搭建/</id>
    <published>2017-04-17T07:07:54.530Z</published>
    <updated>2017-04-17T07:08:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载redis"><a href="#下载redis" class="headerlink" title="下载redis"></a>下载redis</h2><p><a href="http://download.redis.io/releases/" target="_blank" rel="external">下载地址</a></p>
<blockquote>
<p>下载redis-stable.tar.gz版本,当前为3.2版本</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -zxvf redis-stable.tar.gz</div><div class="line">cd redis-stable</div><div class="line">make PREFIX=/usr/local/redis1 &amp; install  (指定安装目录)</div></pre></td></tr></table></figure>
</blockquote>
<p>PS:安装的坑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">查看gcc版本</div><div class="line">gcc -v 不能低于4.2</div><div class="line">升级gcc </div><div class="line">yum update gcc 会升级到4.4.7</div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="redis-配置详解"><a href="#redis-配置详解" class="headerlink" title="redis 配置详解"></a>redis 配置详解</h3><ul>
<li><p>NETWORK 网络配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bind 127.0.0.1(绑定的主机地址)</div><div class="line">protected-mode yes(是否开启网络保护模式，默认开启)</div><div class="line">port 6379(redis服务端口，默认6379)</div><div class="line">tcp-backlog 511</div><div class="line">timeout 0(该参数表示当某一个客户端连接上来并闲置timeout（单位秒）的时间后，Redis服务端就主动关闭这个客户端连接。该配置参数的默认值为0，表示关闭这个功能。)</div><div class="line">tcp-keepalive 300(客户端TCP连接的健康性检查，如果不设置为0就表示Redis服务端会定时发送SO_KEEPALIVE心跳机制检测客户端的反馈情况。该配置的默认值为300秒，既是300秒检测一次。健康性检查的好处是，在客户端异常关闭的情况下，Redis服务端可以发现这个问题，并主动关闭对端通道。这个参数建议开启)</div></pre></td></tr></table></figure>
</li>
<li><p>GENERAL 一般配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">daemonize no(当为yes的时候，以守护进程的模式运行。该参数的默认值为 no，主要目的是为了在测试环境下调试方便；当运行在生产环境时，可以将这个选项配置为yes)</div><div class="line">supervised no</div><div class="line">pidfile /var/run/redis_6379.pid</div><div class="line">loglevel notice</div><div class="line">logfile &quot;&quot;</div><div class="line">syslog-enabled no</div><div class="line">syslog-ident redis</div><div class="line">syslog-facility local0 (指定syslog工具。必须是用户或LOCAL0-LOCAL7之间,默认没有打开)</div><div class="line">databases 16</div></pre></td></tr></table></figure>
</li>
<li><p>SNAPSHOTTING 快照配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line">stop-writes-on-bgsave-error yes</div><div class="line">rdbcompression yes</div><div class="line">rdbchecksum yes</div><div class="line">dbfilename dump.rdb</div><div class="line">dir ./</div></pre></td></tr></table></figure>
</li>
<li><p>REPLICATION 复制，高可用配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</div><div class="line">masterauth &lt;master-password&gt;</div><div class="line">slave-serve-stale-data yes</div><div class="line">slave-read-only yes</div></pre></td></tr></table></figure>
</li>
<li><p>SECURITY 安全配置项</p>
</li>
<li>LIMITS 资源限制配置项</li>
<li>APPEND ONLY MODE 附加配置</li>
<li>LUA SCRIPTING lua脚本配置项</li>
<li>REDIS CLUSTER 集群配置项</li>
<li>SLOW LOG 日志配置项</li>
<li>LATENCY MONITOR 监控配置项</li>
<li>EVENT NOTIFICATION 事件通知配置项</li>
<li>ADVANCED CONFIG 高级配置项</li>
</ul>
<h3 id="太懒写不下去了需要具体看的请查看redis-conf文件"><a href="#太懒写不下去了需要具体看的请查看redis-conf文件" class="headerlink" title="太懒写不下去了需要具体看的请查看redis.conf文件"></a>太懒写不下去了需要具体看的请查看redis.conf文件</h3><p><a href="http://www.cnblogs.com/zx5253/p/5657114.html" target="_blank" rel="external">复制地址</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div></pre></td><td class="code"><pre><div class="line"># Redis configuration file example.</div><div class="line">## Redis配置文件示例</div><div class="line">#</div><div class="line"># Note that in order to read the configuration file, Redis must be</div><div class="line"># started with the file path as first argument:</div><div class="line">## 注意：为了读取配置文件，Redis必须把配置文件路径作为第一参数：</div><div class="line">#</div><div class="line"># ./redis-server /path/to/redis.conf</div><div class="line"></div><div class="line"># Note on units: when memory size is needed, it is possible to specify</div><div class="line"># it in the usual form of 1k 5GB 4M and so forth:</div><div class="line">## 单位注意：当需要指定内存大小的时候，需要指定1k 5GB 4m等类似这种的单位：</div><div class="line">#</div><div class="line"># 1k =&gt; 1000 bytes</div><div class="line"># 1kb =&gt; 1024 bytes</div><div class="line"># 1m =&gt; 1000000 bytes</div><div class="line"># 1mb =&gt; 1024*1024 bytes</div><div class="line"># 1g =&gt; 1000000000 bytes</div><div class="line"># 1gb =&gt; 1024*1024*1024 bytes</div><div class="line">#</div><div class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</div><div class="line">## 单位对大小写不敏感，所以 1GB 1Gb 1gb是一样的</div><div class="line"></div><div class="line"></div><div class="line">################################## INCLUDES(引入) ###################################</div><div class="line"></div><div class="line"># Include one or more other config files here.  This is useful if you</div><div class="line"># have a standard template that goes to all Redis servers but also need</div><div class="line"># to customize a few per-server settings.  Include files can include</div><div class="line"># other files, so use this wisely.</div><div class="line">## 在这里引入一个或更多个配置文件。假如你有一个标准模板供所有Redis使用，但是对每个单独的Redis</div><div class="line">## 又有单独的配置。在这里引入其他的文件，是非常有用的</div><div class="line"># Notice option &quot;include&quot; won&apos;t be rewritten by command &quot;CONFIG REWRITE&quot;</div><div class="line"># from admin or Redis Sentinel. Since Redis always uses the last processed</div><div class="line"># line as value of a configuration directive, you&apos;d better put includes</div><div class="line"># at the beginning of this file to avoid overwriting config change at runtime.</div><div class="line">#</div><div class="line">## 请注意：include是不能被来自admin或Redis Sentinel的CONFIG REWRITE命令所改写的。所以Redis总是</div><div class="line">## 最后一条加工线作为配置的指令值，你最好把include文件操作放在前面，去避开在运行期间的覆写操作</div><div class="line"># If instead you are interested in using includes to override configuration</div><div class="line"># options, it is better to use include as the last line.</div><div class="line">## 相反，如果你想用include去覆写配置项，你最好把它放在后面</div><div class="line">#</div><div class="line"># include /path/to/local.conf</div><div class="line"># include /path/to/other.conf</div><div class="line"></div><div class="line">################################## NETWORK(网络) #####################################</div><div class="line"></div><div class="line"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</div><div class="line"># for connections from all the network interfaces available on the server.</div><div class="line"># It is possible to listen to just one or multiple selected interfaces using</div><div class="line"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</div><div class="line">## 默认情况，如果没有bind配置，Redis服务端会监听外界所有的可用的连接。如果可以的话，最好</div><div class="line">## 用bind配置一个或多个确定的地址。</div><div class="line"># Examples:</div><div class="line">#</div><div class="line"># bind 192.168.1.100 10.0.0.1</div><div class="line"># bind 127.0.0.1 ::1</div><div class="line">#</div><div class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</div><div class="line"># internet, binding to all the interfaces is dangerous and will expose the</div><div class="line"># instance to everybody on the internet. So by default we uncomment the</div><div class="line"># following bind directive, that will force Redis to listen only into</div><div class="line"># the IPv4 lookback interface address (this means Redis will be able to</div><div class="line"># accept connections only from clients running into the same computer it</div><div class="line"># is running).</div><div class="line">## --警告-- 如果运行Redis的计算机直接暴露于外网，接受所有的接口是非常危险的，将会把实例暴露给网络上</div><div class="line">## 的每个人。所有，默认情况下，我们注释掉了下面的bind命令，这样强制Redis只监听本机的接口（意思就是</div><div class="line">## Redis只能来自接受运行着服务端的计算机的客户端连接，注：就是只能本机连接）</div><div class="line">#</div><div class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</div><div class="line"># JUST COMMENT THE FOLLOWING LINE.</div><div class="line">## 如果你非常肯定你想要你的实例监听所有的接口，请注释掉下面这一行吧</div><div class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">bind 127.0.0.1</div><div class="line"># Protected mode is a layer of security protection, in order to avoid that</div><div class="line"># Redis instances left open on the internet are accessed and exploited.</div><div class="line">## 保护模式是一层安全保障，为了避开可以接触到的网络上的Redis实例</div><div class="line"># When protected mode is on and if:</div><div class="line">#</div><div class="line"># 1) The server is not binding explicitly to a set of addresses using the</div><div class="line">#    &quot;bind&quot; directive.</div><div class="line"># 2) No password is configured.</div><div class="line">## 当安全模式会开启，并且1) 服务端没有显示指定任何bind、2)没有配置密码时，</div><div class="line">## 服务器将只会接受来本地IP的连接和Unix domain sockets</div><div class="line"># The server only accepts connections from clients connecting from the</div><div class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</div><div class="line"># sockets.</div><div class="line">#</div><div class="line"># By default protected mode is enabled. You should disable it only if</div><div class="line"># you are sure you want clients from other hosts to connect to Redis</div><div class="line"># even if no authentication is configured, nor a specific set of interfaces</div><div class="line"># are explicitly listed using the &quot;bind&quot; directive.</div><div class="line"># 默认情况下，安全模式是启用的，如果你想用来自其他主机的客户端连接他，你应该禁止它（下面的两句太啰嗦，没翻译）</div><div class="line">protected-mode no</div><div class="line"></div><div class="line"># Accept connections on the specified port, default is 6379 (IANA #815344).</div><div class="line"># If port 0 is specified Redis will not listen on a TCP socket.</div><div class="line">## 监听端口，如果设为0，Redis将不会监听TCP连接</div><div class="line">port 6379</div><div class="line"></div><div class="line"># TCP listen() backlog.</div><div class="line">#</div><div class="line"># In high requests-per-second environments you need an high backlog in order</div><div class="line"># to avoid slow clients connections issues. Note that the Linux kernel</div><div class="line"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</div><div class="line"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</div><div class="line"># in order to get the desired effect.</div><div class="line">## 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于</div><div class="line">## Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。</div><div class="line">## 当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。（不懂意思，从网上复制的）</div><div class="line">tcp-backlog 511</div><div class="line"></div><div class="line"># Unix socket.</div><div class="line">#</div><div class="line"># Specify the path for the Unix socket that will be used to listen for</div><div class="line"># incoming connections. There is no default, so Redis will not listen</div><div class="line"># on a unix socket when not specified.</div><div class="line">## 指定 Unix socket 的路径，如果没指定，Redis将不会监听Unix socket</div><div class="line"># unixsocket /tmp/redis.sock</div><div class="line"># unixsocketperm 700</div><div class="line"></div><div class="line"># Close the connection after a client is idle for N seconds (0 to disable)</div><div class="line"># 客户端与服务端的连接超时时间，0为如不超市</div><div class="line">timeout 0</div><div class="line"></div><div class="line"># TCP keepalive.</div><div class="line">#</div><div class="line"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</div><div class="line"># of communication. This is useful for two reasons:</div><div class="line">#</div><div class="line"># 1) Detect dead peers.</div><div class="line"># 2) Take the connection alive from the point of view of network</div><div class="line">#    equipment in the middle.</div><div class="line">#</div><div class="line"># On Linux, the specified value (in seconds) is the period used to send ACKs.</div><div class="line"># Note that to close the connection the double of the time is needed.</div><div class="line"># On other kernels the period depends on the kernel configuration.</div><div class="line">#</div><div class="line"># A reasonable value for this option is 300 seconds, which is the new</div><div class="line"># Redis default starting with Redis 3.2.1.</div><div class="line">## 周期性的使用SO_KEEPALIVE检测客户端是否还处于健康状态，避免服务器一直阻塞，</div><div class="line">## 官方建议300秒（从3.2.1版本开始的）</div><div class="line">tcp-keepalive 300</div><div class="line"></div><div class="line">################################# GENERAL #####################################</div><div class="line"></div><div class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</div><div class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</div><div class="line">## 默认情况，Redis不会以后台守护进程方式启动，如果你需要设成&quot;yes&quot;，当设置后，</div><div class="line">## Redis会写一个pid 文件，在/var/run/redis.pid</div><div class="line">daemonize no</div><div class="line"></div><div class="line"># If you run Redis from upstart or systemd, Redis can interact with your</div><div class="line"># supervision tree. Options:</div><div class="line">#   supervised no      - no supervision interaction</div><div class="line">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</div><div class="line">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</div><div class="line">#   supervised auto    - detect upstart or systemd method based on</div><div class="line">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</div><div class="line"># Note: these supervision methods only signal &quot;process is ready.&quot;</div><div class="line">#       They do not enable continuous liveness pings back to your supervisor.</div><div class="line">## 好像是设成开机启动后，系统监控等东东，我对Linux一知半解，不翻译了</div><div class="line">supervised no</div><div class="line"></div><div class="line"># If a pid file is specified, Redis writes it where specified at startup</div><div class="line"># and removes it at exit.</div><div class="line">#</div><div class="line"># When the server runs non daemonized, no pid file is created if none is</div><div class="line"># specified in the configuration. When the server is daemonized, the pid file</div><div class="line"># is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</div><div class="line">#</div><div class="line"># Creating a pid file is best effort: if Redis is not able to create it</div><div class="line"># nothing bad happens, the server will start and run normally.</div><div class="line">## 如果没设置后台守护进程，且没指定pidfile，则没有pid文件被创建</div><div class="line">## 如果设置了后台守护进程，则会创建/var/run/redis.pid</div><div class="line">## 如果没设置后台守护进程，且指定了pidfile，则以pidfile为准</div><div class="line">## 创建pid文件是尽力服务行为，意思就是如果没创建成功也无所谓不耽误Redis正常启动和运行</div><div class="line">pidfile /var/run/redis_6379.pid</div><div class="line"></div><div class="line"># Specify the server verbosity level.</div><div class="line"># This can be one of:</div><div class="line"># debug (a lot of information, useful for development/testing)</div><div class="line"># verbose (many rarely useful info, but not a mess like the debug level)</div><div class="line"># notice (moderately verbose, what you want in production probably)</div><div class="line"># warning (only very important / critical messages are logged)</div><div class="line"># 定义日志级别。</div><div class="line"># 可以是下面的这些值：</div><div class="line"># debug (适用于开发或测试阶段)</div><div class="line"># verbose (比debug少点，但是也不少)</div><div class="line"># notice (适用于生产环境)</div><div class="line"># warning (仅仅一些重要的消息被记录)</div><div class="line">loglevel notice</div><div class="line"></div><div class="line"># Specify the log file name. Also the empty string can be used to force</div><div class="line"># Redis to log on the standard output. Note that if you use standard</div><div class="line"># output for logging but daemonize, logs will be sent to /dev/null</div><div class="line">## 指定日志文件位置</div><div class="line">logfile &quot;&quot;</div><div class="line"></div><div class="line"># To enable logging to the system logger, just set &apos;syslog-enabled&apos; to yes,</div><div class="line"># and optionally update the other syslog parameters to suit your needs.</div><div class="line"># syslog-enabled no</div><div class="line"></div><div class="line"># Specify the syslog identity.</div><div class="line"># syslog-ident redis</div><div class="line"></div><div class="line"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</div><div class="line"># syslog-facility local0</div><div class="line"></div><div class="line"># Set the number of databases. The default database is DB 0, you can select</div><div class="line"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</div><div class="line"># dbid is a number between 0 and &apos;databases&apos;-1</div><div class="line">## 数据库数量，默认16个（0-15）</div><div class="line">databases 16</div><div class="line"></div><div class="line">################################ SNAPSHOTTING(快照)  ################################</div><div class="line">#</div><div class="line"># Save the DB on disk:</div><div class="line">#</div><div class="line">#   save &lt;seconds&gt; &lt;changes&gt;</div><div class="line">#</div><div class="line">#   Will save the DB if both the given number of seconds and the given</div><div class="line">#   number of write operations against the DB occurred.</div><div class="line">#</div><div class="line">#   In the example below the behaviour will be to save:</div><div class="line">#   after 900 sec (15 min) if at least 1 key changed</div><div class="line">#   after 300 sec (5 min) if at least 10 keys changed</div><div class="line">#   after 60 sec if at least 10000 keys changed</div><div class="line">#</div><div class="line">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</div><div class="line">#</div><div class="line">#   It is also possible to remove all the previously configured save</div><div class="line">#   points by adding a save directive with a single empty string argument</div><div class="line">#   like in the following example:</div><div class="line">#</div><div class="line">#   save &quot;&quot;</div><div class="line"></div><div class="line">#</div><div class="line"># 存 DB 到磁盘：</div><div class="line">#</div><div class="line">#   格式：save &lt;间隔时间（秒）&gt; &lt;写入次数&gt;</div><div class="line">#</div><div class="line">#   根据给定的时间间隔和写入次数将数据保存到磁盘</div><div class="line">#</div><div class="line">#   下面的例子的意思是：</div><div class="line">#   900 秒内如果至少有 1 个 key 的值变化，则保存</div><div class="line">#   300 秒内如果至少有 10 个 key 的值变化，则保存</div><div class="line">#   60 秒内如果至少有 10000 个 key 的值变化，则保存</div><div class="line">#　　</div><div class="line">#   注意：你可以注释掉所有的 save 行来停用保存功能。</div><div class="line">#   也可以直接一个空字符串来实现停用：</div><div class="line">#   save &quot;&quot;</div><div class="line"></div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line"></div><div class="line"># By default Redis will stop accepting writes if RDB snapshots are enabled</div><div class="line"># (at least one save point) and the latest background save failed.</div><div class="line"># This will make the user aware (in a hard way) that data is not persisting</div><div class="line"># on disk properly, otherwise chances are that no one will notice and some</div><div class="line"># disaster will happen.</div><div class="line">#</div><div class="line"># If the background saving process will start working again Redis will</div><div class="line"># automatically allow writes again.</div><div class="line">#</div><div class="line"># However if you have setup your proper monitoring of the Redis server</div><div class="line"># and persistence, you may want to disable this feature so that Redis will</div><div class="line"># continue to work as usual even if there are problems with disk,</div><div class="line"># permissions, and so forth.</div><div class="line"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</div><div class="line"># 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，</div><div class="line"># 否则就会没人注意到灾难的发生。</div><div class="line">#</div><div class="line"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</div><div class="line">#</div><div class="line"># 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。</div><div class="line">stop-writes-on-bgsave-error yes</div><div class="line"></div><div class="line"># Compress string objects using LZF when dump .rdb databases?</div><div class="line"># For default that&apos;s set to &apos;yes&apos; as it&apos;s almost always a win.</div><div class="line"># If you want to save some CPU in the saving child set it to &apos;no&apos; but</div><div class="line"># the dataset will likely be bigger if you have compressible values or keys.</div><div class="line"># 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串</div><div class="line"># 默认都设为 yes</div><div class="line"># 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，</div><div class="line"># 不过这个数据集可能就会比较大</div><div class="line">rdbcompression yes</div><div class="line"></div><div class="line"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</div><div class="line"># This makes the format more resistant to corruption but there is a performance</div><div class="line"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</div><div class="line"># for maximum performances.</div><div class="line">#</div><div class="line"># RDB files created with checksum disabled have a checksum of zero that will</div><div class="line"># tell the loading code to skip the check.</div><div class="line"># 是否校验rdb文件</div><div class="line">rdbchecksum yes</div><div class="line"></div><div class="line"># The filename where to dump the DB</div><div class="line"># 设置 dump 的文件位置</div><div class="line">dbfilename dump.rdb</div><div class="line"></div><div class="line"># The working directory.</div><div class="line">#</div><div class="line"># The DB will be written inside this directory, with the filename specified</div><div class="line"># above using the &apos;dbfilename&apos; configuration directive.</div><div class="line">#</div><div class="line"># The Append Only File will also be created inside this directory.</div><div class="line">#</div><div class="line"># Note that you must specify a directory here, not a file name.</div><div class="line"># 工作目录</div><div class="line"># 例如上面的 dbfilename 只指定了文件名，</div><div class="line"># 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。</div><div class="line">dir ./</div><div class="line"></div><div class="line">################################# REPLICATION(主从复制) #################################</div><div class="line"></div><div class="line"># Master-Slave replication. Use slaveof to make a Redis instance a copy of</div><div class="line"># another Redis server. A few things to understand ASAP about Redis replication.</div><div class="line">#</div><div class="line"># 1) Redis replication is asynchronous, but you can configure a master to</div><div class="line">#    stop accepting writes if it appears to be not connected with at least</div><div class="line">#    a given number of slaves.</div><div class="line"># 2) Redis slaves are able to perform a partial resynchronization with the</div><div class="line">#    master if the replication link is lost for a relatively small amount of</div><div class="line">#    time. You may want to configure the replication backlog size (see the next</div><div class="line">#    sections of this file) with a sensible value depending on your needs.</div><div class="line"># 3) Replication is automatic and does not need user intervention. After a</div><div class="line">#    network partition slaves automatically try to reconnect to masters</div><div class="line">#    and resynchronize with them.</div><div class="line">#</div><div class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</div><div class="line"></div><div class="line"># If the master is password protected (using the &quot;requirepass&quot; configuration</div><div class="line"># directive below) it is possible to tell the slave to authenticate before</div><div class="line"># starting the replication synchronization process, otherwise the master will</div><div class="line"># refuse the slave request.</div><div class="line">#</div><div class="line"># masterauth &lt;master-password&gt;</div><div class="line"></div><div class="line"># When a slave loses its connection with the master, or when the replication</div><div class="line"># is still in progress, the slave can act in two different ways:</div><div class="line">#</div><div class="line"># 1) if slave-serve-stale-data is set to &apos;yes&apos; (the default) the slave will</div><div class="line">#    still reply to client requests, possibly with out of date data, or the</div><div class="line">#    data set may just be empty if this is the first synchronization.</div><div class="line">#</div><div class="line"># 2) if slave-serve-stale-data is set to &apos;no&apos; the slave will reply with</div><div class="line">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</div><div class="line">#    but to INFO and SLAVEOF.</div><div class="line">#</div><div class="line"># 当一个 slave 与 master 失去联系，或者复制正在进行的时候，</div><div class="line"># slave 可能会有两种表现：</div><div class="line">#</div><div class="line"># 1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，</div><div class="line">#    或者数据可能是空的在第一次同步的时候</div><div class="line">#</div><div class="line"># 2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，</div><div class="line">#    slave 都将返回一个 &quot;SYNC with master in progress&quot; 的错误，</div><div class="line">slave-serve-stale-data yes</div><div class="line"></div><div class="line"># You can configure a slave instance to accept writes or not. Writing against</div><div class="line"># a slave instance may be useful to store some ephemeral data (because data</div><div class="line"># written on a slave will be easily deleted after resync with the master) but</div><div class="line"># may also cause problems if clients are writing to it because of a</div><div class="line"># misconfiguration.</div><div class="line">#</div><div class="line"># Since Redis 2.6 by default slaves are read-only.</div><div class="line">#</div><div class="line"># Note: read only slaves are not designed to be exposed to untrusted clients</div><div class="line"># on the internet. It&apos;s just a protection layer against misuse of the instance.</div><div class="line"># Still a read only slave exports by default all the administrative commands</div><div class="line"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</div><div class="line"># security of read only slaves using &apos;rename-command&apos; to shadow all the</div><div class="line"># administrative / dangerous commands.</div><div class="line"># 从机是否只读</div><div class="line">slave-read-only yes</div><div class="line"></div><div class="line"># Replication SYNC strategy: disk or socket.</div><div class="line">#</div><div class="line"># -------------------------------------------------------</div><div class="line"># WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</div><div class="line"># -------------------------------------------------------</div><div class="line">#</div><div class="line"># New slaves and reconnecting slaves that are not able to continue the replication</div><div class="line"># process just receiving differences, need to do what is called a &quot;full</div><div class="line"># synchronization&quot;. An RDB file is transmitted from the master to the slaves.</div><div class="line"># The transmission can happen in two different ways:</div><div class="line">#</div><div class="line"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</div><div class="line">#                 file on disk. Later the file is transferred by the parent</div><div class="line">#                 process to the slaves incrementally.</div><div class="line"># 2) Diskless: The Redis master creates a new process that directly writes the</div><div class="line">#              RDB file to slave sockets, without touching the disk at all.</div><div class="line">#</div><div class="line"># With disk-backed replication, while the RDB file is generated, more slaves</div><div class="line"># can be queued and served with the RDB file as soon as the current child producing</div><div class="line"># the RDB file finishes its work. With diskless replication instead once</div><div class="line"># the transfer starts, new slaves arriving will be queued and a new transfer</div><div class="line"># will start when the current one terminates.</div><div class="line">#</div><div class="line"># When diskless replication is used, the master waits a configurable amount of</div><div class="line"># time (in seconds) before starting the transfer in the hope that multiple slaves</div><div class="line"># will arrive and the transfer can be parallelized.</div><div class="line">#</div><div class="line"># With slow disks and fast (large bandwidth) networks, diskless replication</div><div class="line"># works better.</div><div class="line"># 无硬盘备份</div><div class="line">repl-diskless-sync no</div><div class="line"></div><div class="line"># When diskless replication is enabled, it is possible to configure the delay</div><div class="line"># the server waits in order to spawn the child that transfers the RDB via socket</div><div class="line"># to the slaves.</div><div class="line">#</div><div class="line"># This is important since once the transfer starts, it is not possible to serve</div><div class="line"># new slaves arriving, that will be queued for the next RDB transfer, so the server</div><div class="line"># waits a delay in order to let more slaves arrive.</div><div class="line">#</div><div class="line"># The delay is specified in seconds, and by default is 5 seconds. To disable</div><div class="line"># it entirely just set it to 0 seconds and the transfer will start ASAP.</div><div class="line"># 备份等待延迟时间</div><div class="line">repl-diskless-sync-delay 5</div><div class="line"></div><div class="line"># Slaves send PINGs to server in a predefined interval. It&apos;s possible to change</div><div class="line"># this interval with the repl_ping_slave_period option. The default value is 10</div><div class="line"># seconds.</div><div class="line">#</div><div class="line"># repl-ping-slave-period 10</div><div class="line"></div><div class="line"># The following option sets the replication timeout for:</div><div class="line">#</div><div class="line"># 1) Bulk transfer I/O during SYNC, from the point of view of slave.</div><div class="line"># 2) Master timeout from the point of view of slaves (data, pings).</div><div class="line"># 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).</div><div class="line">#</div><div class="line"># It is important to make sure that this value is greater than the value</div><div class="line"># specified for repl-ping-slave-period otherwise a timeout will be detected</div><div class="line"># every time there is low traffic between the master and the slave.</div><div class="line">#</div><div class="line"># repl-timeout 60</div><div class="line"></div><div class="line"># Disable TCP_NODELAY on the slave socket after SYNC?</div><div class="line">#</div><div class="line"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</div><div class="line"># less bandwidth to send data to slaves. But this can add a delay for</div><div class="line"># the data to appear on the slave side, up to 40 milliseconds with</div><div class="line"># Linux kernels using a default configuration.</div><div class="line">#</div><div class="line"># If you select &quot;no&quot; the delay for data to appear on the slave side will</div><div class="line"># be reduced but more bandwidth will be used for replication.</div><div class="line">#</div><div class="line"># By default we optimize for low latency, but in very high traffic conditions</div><div class="line"># or when the master and slaves are many hops away, turning this to &quot;yes&quot; may</div><div class="line"># be a good idea.</div><div class="line">repl-disable-tcp-nodelay no</div><div class="line"></div><div class="line"># Set the replication backlog size. The backlog is a buffer that accumulates</div><div class="line"># slave data when slaves are disconnected for some time, so that when a slave</div><div class="line"># wants to reconnect again, often a full resync is not needed, but a partial</div><div class="line"># resync is enough, just passing the portion of data the slave missed while</div><div class="line"># disconnected.</div><div class="line">#</div><div class="line"># The bigger the replication backlog, the longer the time the slave can be</div><div class="line"># disconnected and later be able to perform a partial resynchronization.</div><div class="line">#</div><div class="line"># The backlog is only allocated once there is at least a slave connected.</div><div class="line">#</div><div class="line"># 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时</div><div class="line"># 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，</div><div class="line"># 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。</div><div class="line"># repl-backlog-size 1mb</div><div class="line"></div><div class="line"># After a master has no longer connected slaves for some time, the backlog</div><div class="line"># will be freed. The following option configures the amount of seconds that</div><div class="line"># need to elapse, starting from the time the last slave disconnected, for</div><div class="line"># the backlog buffer to be freed.</div><div class="line">#</div><div class="line"># A value of 0 means to never release the backlog.</div><div class="line">#</div><div class="line"># repl-backlog-ttl 3600</div><div class="line"></div><div class="line"># The slave priority is an integer number published by Redis in the INFO output.</div><div class="line"># It is used by Redis Sentinel in order to select a slave to promote into a</div><div class="line"># master if the master is no longer working correctly.</div><div class="line">#</div><div class="line"># A slave with a low priority number is considered better for promotion, so</div><div class="line"># for instance if there are three slaves with priority 10, 100, 25 Sentinel will</div><div class="line"># pick the one with priority 10, that is the lowest.</div><div class="line">#</div><div class="line"># However a special priority of 0 marks the slave as not able to perform the</div><div class="line"># role of master, so a slave with priority of 0 will never be selected by</div><div class="line"># Redis Sentinel for promotion.</div><div class="line">#</div><div class="line"># By default the priority is 100.</div><div class="line"># 当 主机 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，</div><div class="line"># 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。</div><div class="line">#</div><div class="line"># 默认优先级为 100。</div><div class="line">slave-priority 100</div><div class="line"></div><div class="line"># It is possible for a master to stop accepting writes if there are less than</div><div class="line"># N slaves connected, having a lag less or equal than M seconds.</div><div class="line">#</div><div class="line"># The N slaves need to be in &quot;online&quot; state.</div><div class="line">#</div><div class="line"># The lag in seconds, that must be &lt;= the specified value, is calculated from</div><div class="line"># the last ping received from the slave, that is usually sent every second.</div><div class="line">#</div><div class="line"># This option does not GUARANTEE that N replicas will accept the write, but</div><div class="line"># will limit the window of exposure for lost writes in case not enough slaves</div><div class="line"># are available, to the specified number of seconds.</div><div class="line">#</div><div class="line"># For example to require at least 3 slaves with a lag &lt;= 10 seconds use:</div><div class="line">#</div><div class="line"># min-slaves-to-write 3</div><div class="line"># min-slaves-max-lag 10</div><div class="line">#</div><div class="line"># Setting one or the other to 0 disables the feature.</div><div class="line">#</div><div class="line"># By default min-slaves-to-write is set to 0 (feature disabled) and</div><div class="line"># min-slaves-max-lag is set to 10.</div><div class="line"></div><div class="line">################################## SECURITY ###################################</div><div class="line"></div><div class="line"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</div><div class="line"># commands.  This might be useful in environments in which you do not trust</div><div class="line"># others with access to the host running redis-server.</div><div class="line">#</div><div class="line"># This should stay commented out for backward compatibility and because most</div><div class="line"># people do not need auth (e.g. they run their own servers).</div><div class="line">#</div><div class="line"># Warning: since Redis is pretty fast an outside user can try up to</div><div class="line"># 150k passwords per second against a good box. This means that you should</div><div class="line"># use a very strong password otherwise it will be very easy to break.</div><div class="line"># 设置密码</div><div class="line"># requirepass foobared</div><div class="line"></div><div class="line"># Command renaming.</div><div class="line">#</div><div class="line"># It is possible to change the name of dangerous commands in a shared</div><div class="line"># environment. For instance the CONFIG command may be renamed into something</div><div class="line"># hard to guess so that it will still be available for internal-use tools</div><div class="line"># but not available for general clients.</div><div class="line">#</div><div class="line"># Example:</div><div class="line">#</div><div class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</div><div class="line">#</div><div class="line"># It is also possible to completely kill a command by renaming it into</div><div class="line"># an empty string:</div><div class="line">#</div><div class="line"># rename-command CONFIG &quot;&quot;</div><div class="line">#</div><div class="line"># Please note that changing the name of commands that are logged into the</div><div class="line"># AOF file or transmitted to slaves may cause problems.</div><div class="line"></div><div class="line">################################### LIMITS ####################################</div><div class="line"></div><div class="line"># Set the max number of connected clients at the same time. By default</div><div class="line"># this limit is set to 10000 clients, however if the Redis server is not</div><div class="line"># able to configure the process file limit to allow for the specified limit</div><div class="line"># the max number of allowed clients is set to the current file limit</div><div class="line"># minus 32 (as Redis reserves a few file descriptors for internal uses).</div><div class="line">#</div><div class="line"># Once the limit is reached Redis will close all the new connections sending</div><div class="line"># an error &apos;max number of clients reached&apos;.</div><div class="line">## 最大连接数，一旦达到最大限制，redis 将关闭所有的新连接</div><div class="line"># 并发送一个‘max number of clients reached’的错误。</div><div class="line"># maxclients 10000</div><div class="line"></div><div class="line"># Don&apos;t use more memory than the specified amount of bytes.</div><div class="line"># When the memory limit is reached Redis will try to remove keys</div><div class="line"># according to the eviction policy selected (see maxmemory-policy).</div><div class="line">#</div><div class="line"># If Redis can&apos;t remove keys according to the policy, or if the policy is</div><div class="line"># set to &apos;noeviction&apos;, Redis will start to reply with errors to commands</div><div class="line"># that would use more memory, like SET, LPUSH, and so on, and will continue</div><div class="line"># to reply to read-only commands like GET.</div><div class="line">#</div><div class="line"># This option is usually useful when using Redis as an LRU cache, or to set</div><div class="line"># a hard memory limit for an instance (using the &apos;noeviction&apos; policy).</div><div class="line">#</div><div class="line"># WARNING: If you have slaves attached to an instance with maxmemory on,</div><div class="line"># the size of the output buffers needed to feed the slaves are subtracted</div><div class="line"># from the used memory count, so that network problems / resyncs will</div><div class="line"># not trigger a loop where keys are evicted, and in turn the output</div><div class="line"># buffer of slaves is full with DELs of keys evicted triggering the deletion</div><div class="line"># of more keys, and so forth until the database is completely emptied.</div><div class="line">#</div><div class="line"># In short... if you have slaves attached it is suggested that you set a lower</div><div class="line"># limit for maxmemory so that there is some free RAM on the system for slave</div><div class="line"># output buffers (but this is not needed if the policy is &apos;noeviction&apos;).</div><div class="line"># 如果你设置了这个值，当缓存的数据容量达到这个值， redis 将根据你选择的</div><div class="line"># eviction 策略来移除一些 keys。</div><div class="line">#</div><div class="line"># 如果 redis 不能根据策略移除 keys ，或者是策略被设置为 ‘noeviction’，</div><div class="line"># redis 将开始响应错误给命令，如 set，lpush 等等，</div><div class="line"># 并继续响应只读的命令，如 get</div><div class="line"># maxmemory &lt;bytes&gt;</div><div class="line"></div><div class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</div><div class="line"># is reached. You can select among five behaviors:</div><div class="line">#</div><div class="line"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</div><div class="line"># allkeys-lru -&gt; remove any key according to the LRU algorithm</div><div class="line"># volatile-random -&gt; remove a random key with an expire set</div><div class="line"># allkeys-random -&gt; remove a random key, any key</div><div class="line"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</div><div class="line"># noeviction -&gt; don&apos;t expire at all, just return an error on write operations</div><div class="line">#</div><div class="line"># Note: with any of the above policies, Redis will return an error on write</div><div class="line">#       operations, when there are no suitable keys for eviction.</div><div class="line">#</div><div class="line">#       At the date of writing these commands are: set setnx setex append</div><div class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</div><div class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</div><div class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</div><div class="line">#       getset mset msetnx exec sort</div><div class="line">#</div><div class="line"># The default is:</div><div class="line">## 设置缓存移除策略（上面五个）</div><div class="line"># maxmemory-policy noeviction</div><div class="line"></div><div class="line"># LRU and minimal TTL algorithms are not precise algorithms but approximated</div><div class="line"># algorithms (in order to save memory), so you can tune it for speed or</div><div class="line"># accuracy. For default Redis will check five keys and pick the one that was</div><div class="line"># used less recently, you can change the sample size using the following</div><div class="line"># configuration directive.</div><div class="line">#</div><div class="line"># The default of 5 produces good enough results. 10 Approximates very closely</div><div class="line"># true LRU but costs a bit more CPU. 3 is very fast but not very accurate.</div><div class="line">#</div><div class="line"># maxmemory-samples 5</div><div class="line"></div><div class="line">############################## APPEND ONLY MODE ###############################</div><div class="line"></div><div class="line"># By default Redis asynchronously dumps the dataset on disk. This mode is</div><div class="line"># good enough in many applications, but an issue with the Redis process or</div><div class="line"># a power outage may result into a few minutes of writes lost (depending on</div><div class="line"># the configured save points).</div><div class="line">#</div><div class="line"># The Append Only File is an alternative persistence mode that provides</div><div class="line"># much better durability. For instance using the default data fsync policy</div><div class="line"># (see later in the config file) Redis can lose just one second of writes in a</div><div class="line"># dramatic event like a server power outage, or a single write if something</div><div class="line"># wrong with the Redis process itself happens, but the operating system is</div><div class="line"># still running correctly.</div><div class="line">#</div><div class="line"># AOF and RDB persistence can be enabled at the same time without problems.</div><div class="line"># If the AOF is enabled on startup Redis will load the AOF, that is the file</div><div class="line"># with the better durability guarantees.</div><div class="line">#</div><div class="line"># Please check http://redis.io/topics/persistence for more information.</div><div class="line"></div><div class="line">appendonly no</div><div class="line"></div><div class="line"># The name of the append only file (default: &quot;appendonly.aof&quot;)</div><div class="line"></div><div class="line">appendfilename &quot;appendonly.aof&quot;</div><div class="line"></div><div class="line"># The fsync() call tells the Operating System to actually write data on disk</div><div class="line"># instead of waiting for more data in the output buffer. Some OS will really flush</div><div class="line"># data on disk, some other OS will just try to do it ASAP.</div><div class="line">#</div><div class="line"># Redis supports three different modes:</div><div class="line">#</div><div class="line"># no: don&apos;t fsync, just let the OS flush the data when it wants. Faster.</div><div class="line"># always: fsync after every write to the append only log. Slow, Safest.</div><div class="line"># everysec: fsync only one time every second. Compromise.</div><div class="line">#</div><div class="line"># The default is &quot;everysec&quot;, as that&apos;s usually the right compromise between</div><div class="line"># speed and data safety. It&apos;s up to you to understand if you can relax this to</div><div class="line"># &quot;no&quot; that will let the operating system flush the output buffer when</div><div class="line"># it wants, for better performances (but if you can live with the idea of</div><div class="line"># some data loss consider the default persistence mode that&apos;s snapshotting),</div><div class="line"># or on the contrary, use &quot;always&quot; that&apos;s very slow but a bit safer than</div><div class="line"># everysec.</div><div class="line">#</div><div class="line"># More details please check the following article:</div><div class="line"># http://antirez.com/post/redis-persistence-demystified.html</div><div class="line">#</div><div class="line"># If unsure, use &quot;everysec&quot;.</div><div class="line"></div><div class="line"># appendfsync always</div><div class="line">appendfsync everysec</div><div class="line"># appendfsync no</div><div class="line"></div><div class="line"># When the AOF fsync policy is set to always or everysec, and a background</div><div class="line"># saving process (a background save or AOF log background rewriting) is</div><div class="line"># performing a lot of I/O against the disk, in some Linux configurations</div><div class="line"># Redis may block too long on the fsync() call. Note that there is no fix for</div><div class="line"># this currently, as even performing fsync in a different thread will block</div><div class="line"># our synchronous write(2) call.</div><div class="line">#</div><div class="line"># In order to mitigate this problem it&apos;s possible to use the following option</div><div class="line"># that will prevent fsync() from being called in the main process while a</div><div class="line"># BGSAVE or BGREWRITEAOF is in progress.</div><div class="line">#</div><div class="line"># This means that while another child is saving, the durability of Redis is</div><div class="line"># the same as &quot;appendfsync none&quot;. In practical terms, this means that it is</div><div class="line"># possible to lose up to 30 seconds of log in the worst scenario (with the</div><div class="line"># default Linux settings).</div><div class="line">#</div><div class="line"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</div><div class="line"># &quot;no&quot; that is the safest pick from the point of view of durability.</div><div class="line"></div><div class="line">no-appendfsync-on-rewrite no</div><div class="line"></div><div class="line"># Automatic rewrite of the append only file.</div><div class="line"># Redis is able to automatically rewrite the log file implicitly calling</div><div class="line"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</div><div class="line">#</div><div class="line"># This is how it works: Redis remembers the size of the AOF file after the</div><div class="line"># latest rewrite (if no rewrite has happened since the restart, the size of</div><div class="line"># the AOF at startup is used).</div><div class="line">#</div><div class="line"># This base size is compared to the current size. If the current size is</div><div class="line"># bigger than the specified percentage, the rewrite is triggered. Also</div><div class="line"># you need to specify a minimal size for the AOF file to be rewritten, this</div><div class="line"># is useful to avoid rewriting the AOF file even if the percentage increase</div><div class="line"># is reached but it is still pretty small.</div><div class="line">#</div><div class="line"># Specify a percentage of zero in order to disable the automatic AOF</div><div class="line"># rewrite feature.</div><div class="line"></div><div class="line">auto-aof-rewrite-percentage 100</div><div class="line">auto-aof-rewrite-min-size 64mb</div><div class="line"></div><div class="line"># An AOF file may be found to be truncated at the end during the Redis</div><div class="line"># startup process, when the AOF data gets loaded back into memory.</div><div class="line"># This may happen when the system where Redis is running</div><div class="line"># crashes, especially when an ext4 filesystem is mounted without the</div><div class="line"># data=ordered option (however this can&apos;t happen when Redis itself</div><div class="line"># crashes or aborts but the operating system still works correctly).</div><div class="line">#</div><div class="line"># Redis can either exit with an error when this happens, or load as much</div><div class="line"># data as possible (the default now) and start if the AOF file is found</div><div class="line"># to be truncated at the end. The following option controls this behavior.</div><div class="line">#</div><div class="line"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</div><div class="line"># the Redis server starts emitting a log to inform the user of the event.</div><div class="line"># Otherwise if the option is set to no, the server aborts with an error</div><div class="line"># and refuses to start. When the option is set to no, the user requires</div><div class="line"># to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</div><div class="line"># the server.</div><div class="line">#</div><div class="line"># Note that if the AOF file will be found to be corrupted in the middle</div><div class="line"># the server will still exit with an error. This option only applies when</div><div class="line"># Redis will try to read more data from the AOF file but not enough bytes</div><div class="line"># will be found.</div><div class="line">aof-load-truncated yes</div><div class="line"></div><div class="line">################################ LUA SCRIPTING  ###############################</div><div class="line"></div><div class="line"># Max execution time of a Lua script in milliseconds.</div><div class="line">#</div><div class="line"># If the maximum execution time is reached Redis will log that a script is</div><div class="line"># still in execution after the maximum allowed time and will start to</div><div class="line"># reply to queries with an error.</div><div class="line">#</div><div class="line"># When a long running script exceeds the maximum execution time only the</div><div class="line"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</div><div class="line"># used to stop a script that did not yet called write commands. The second</div><div class="line"># is the only way to shut down the server in the case a write command was</div><div class="line"># already issued by the script but the user doesn&apos;t want to wait for the natural</div><div class="line"># termination of the script.</div><div class="line">#</div><div class="line"># Set it to 0 or a negative value for unlimited execution without warnings.</div><div class="line"># lua脚本执行时间（毫秒）</div><div class="line">lua-time-limit 5000</div><div class="line"></div><div class="line">################################ REDIS CLUSTER(集群)  ###############################</div><div class="line">#</div><div class="line"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</div><div class="line"># WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however</div><div class="line"># in order to mark it as &quot;mature&quot; we need to wait for a non trivial percentage</div><div class="line"># of users to deploy it in production.</div><div class="line"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</div><div class="line">#</div><div class="line"># Normal Redis instances can&apos;t be part of a Redis Cluster; only nodes that are</div><div class="line"># started as cluster nodes can. In order to start a Redis instance as a</div><div class="line"># cluster node enable the cluster support uncommenting the following:</div><div class="line">## 启用集群</div><div class="line"># cluster-enabled yes</div><div class="line"></div><div class="line"># Every cluster node has a cluster configuration file. This file is not</div><div class="line"># intended to be edited by hand. It is created and updated by Redis nodes.</div><div class="line"># Every Redis Cluster node requires a different cluster configuration file.</div><div class="line"># Make sure that instances running in the same system do not have</div><div class="line"># overlapping cluster configuration file names.</div><div class="line">## Redis自动设成的配置文件，保证每个集群不同</div><div class="line"># cluster-config-file nodes-6379.conf</div><div class="line"></div><div class="line"># Cluster node timeout is the amount of milliseconds a node must be unreachable</div><div class="line"># for it to be considered in failure state.</div><div class="line"># Most other internal time limits are multiple of the node timeout.</div><div class="line">## 集群节点超时时间(毫秒)</div><div class="line"># cluster-node-timeout 15000</div><div class="line"></div><div class="line"># A slave of a failing master will avoid to start a failover if its data</div><div class="line"># looks too old.</div><div class="line">#</div><div class="line"># There is no simple way for a slave to actually have a exact measure of</div><div class="line"># its &quot;data age&quot;, so the following two checks are performed:</div><div class="line">#</div><div class="line"># 1) If there are multiple slaves able to failover, they exchange messages</div><div class="line">#    in order to try to give an advantage to the slave with the best</div><div class="line">#    replication offset (more data from the master processed).</div><div class="line">#    Slaves will try to get their rank by offset, and apply to the start</div><div class="line">#    of the failover a delay proportional to their rank.</div><div class="line">#</div><div class="line"># 2) Every single slave computes the time of the last interaction with</div><div class="line">#    its master. This can be the last ping or command received (if the master</div><div class="line">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</div><div class="line">#    disconnection with the master (if the replication link is currently down).</div><div class="line">#    If the last interaction is too old, the slave will not try to failover</div><div class="line">#    at all.</div><div class="line">#</div><div class="line"># The point &quot;2&quot; can be tuned by user. Specifically a slave will not perform</div><div class="line"># the failover if, since the last interaction with the master, the time</div><div class="line"># elapsed is greater than:</div><div class="line">#</div><div class="line">#   (node-timeout * slave-validity-factor) + repl-ping-slave-period</div><div class="line">#</div><div class="line"># So for example if node-timeout is 30 seconds, and the slave-validity-factor</div><div class="line"># is 10, and assuming a default repl-ping-slave-period of 10 seconds, the</div><div class="line"># slave will not try to failover if it was not able to talk with the master</div><div class="line"># for longer than 310 seconds.</div><div class="line">#</div><div class="line"># A large slave-validity-factor may allow slaves with too old data to failover</div><div class="line"># a master, while a too small value may prevent the cluster from being able to</div><div class="line"># elect a slave at all.</div><div class="line">#</div><div class="line"># For maximum availability, it is possible to set the slave-validity-factor</div><div class="line"># to a value of 0, which means, that slaves will always try to failover the</div><div class="line"># master regardless of the last time they interacted with the master.</div><div class="line"># (However they&apos;ll always try to apply a delay proportional to their</div><div class="line"># offset rank).</div><div class="line">#</div><div class="line"># Zero is the only value able to guarantee that when all the partitions heal</div><div class="line"># the cluster will always be able to continue.</div><div class="line">#</div><div class="line"># cluster-slave-validity-factor 10</div><div class="line"></div><div class="line"># Cluster slaves are able to migrate to orphaned masters, that are masters</div><div class="line"># that are left without working slaves. This improves the cluster ability</div><div class="line"># to resist to failures as otherwise an orphaned master can&apos;t be failed over</div><div class="line"># in case of failure if it has no working slaves.</div><div class="line">#</div><div class="line"># Slaves migrate to orphaned masters only if there are still at least a</div><div class="line"># given number of other working slaves for their old master. This number</div><div class="line"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a slave</div><div class="line"># will migrate only if there is at least 1 other working slave for its master</div><div class="line"># and so forth. It usually reflects the number of slaves you want for every</div><div class="line"># master in your cluster.</div><div class="line">#</div><div class="line"># Default is 1 (slaves migrate only if their masters remain with at least</div><div class="line"># one slave). To disable migration just set it to a very large value.</div><div class="line"># A value of 0 can be set but is useful only for debugging and dangerous</div><div class="line"># in production.</div><div class="line">#</div><div class="line"># cluster-migration-barrier 1</div><div class="line"></div><div class="line"># By default Redis Cluster nodes stop accepting queries if they detect there</div><div class="line"># is at least an hash slot uncovered (no available node is serving it).</div><div class="line"># This way if the cluster is partially down (for example a range of hash slots</div><div class="line"># are no longer covered) all the cluster becomes, eventually, unavailable.</div><div class="line"># It automatically returns available as soon as all the slots are covered again.</div><div class="line">#</div><div class="line"># However sometimes you want the subset of the cluster which is working,</div><div class="line"># to continue to accept queries for the part of the key space that is still</div><div class="line"># covered. In order to do so, just set the cluster-require-full-coverage</div><div class="line"># option to no.</div><div class="line">#</div><div class="line"># cluster-require-full-coverage yes</div><div class="line"></div><div class="line"># In order to setup your cluster make sure to read the documentation</div><div class="line"># available at http://redis.io web site.</div><div class="line"></div><div class="line">################################## SLOW LOG ###################################</div><div class="line"></div><div class="line"># The Redis Slow Log is a system to log queries that exceeded a specified</div><div class="line"># execution time. The execution time does not include the I/O operations</div><div class="line"># like talking with the client, sending the reply and so forth,</div><div class="line"># but just the time needed to actually execute the command (this is the only</div><div class="line"># stage of command execution where the thread is blocked and can not serve</div><div class="line"># other requests in the meantime).</div><div class="line">#</div><div class="line"># You can configure the slow log with two parameters: one tells Redis</div><div class="line"># what is the execution time, in microseconds, to exceed in order for the</div><div class="line"># command to get logged, and the other parameter is the length of the</div><div class="line"># slow log. When a new command is logged the oldest one is removed from the</div><div class="line"># queue of logged commands.</div><div class="line"></div><div class="line"># The following time is expressed in microseconds, so 1000000 is equivalent</div><div class="line"># to one second. Note that a negative number disables the slow log, while</div><div class="line"># a value of zero forces the logging of every command.</div><div class="line">% 记录慢日志</div><div class="line">slowlog-log-slower-than 10000</div><div class="line"></div><div class="line"># There is no limit to this length. Just be aware that it will consume memory.</div><div class="line"># You can reclaim memory used by the slow log with SLOWLOG RESET.</div><div class="line"># 记录占用内存大的日志</div><div class="line">slowlog-max-len 128</div><div class="line"></div><div class="line">################################ LATENCY MONITOR ##############################</div><div class="line"></div><div class="line"># The Redis latency monitoring subsystem samples different operations</div><div class="line"># at runtime in order to collect data related to possible sources of</div><div class="line"># latency of a Redis instance.</div><div class="line">#</div><div class="line"># Via the LATENCY command this information is available to the user that can</div><div class="line"># print graphs and obtain reports.</div><div class="line">#</div><div class="line"># The system only logs operations that were performed in a time equal or</div><div class="line"># greater than the amount of milliseconds specified via the</div><div class="line"># latency-monitor-threshold configuration directive. When its value is set</div><div class="line"># to zero, the latency monitor is turned off.</div><div class="line">#</div><div class="line"># By default latency monitoring is disabled since it is mostly not needed</div><div class="line"># if you don&apos;t have latency issues, and collecting data has a performance</div><div class="line"># impact, that while very small, can be measured under big load. Latency</div><div class="line"># monitoring can easily be enabled at runtime using the command</div><div class="line"># &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.</div><div class="line">latency-monitor-threshold 0</div><div class="line"></div><div class="line">############################# EVENT NOTIFICATION(事件通知) ##############################</div><div class="line"></div><div class="line"># Redis can notify Pub/Sub clients about events happening in the key space.</div><div class="line"># This feature is documented at http://redis.io/topics/notifications</div><div class="line">#</div><div class="line"># For instance if keyspace events notification is enabled, and a client</div><div class="line"># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</div><div class="line"># messages will be published via Pub/Sub:</div><div class="line">#</div><div class="line"># PUBLISH __keyspace@0__:foo del</div><div class="line"># PUBLISH __keyevent@0__:del foo</div><div class="line">#</div><div class="line"># It is possible to select the events that Redis will notify among a set</div><div class="line"># of classes. Every class is identified by a single character:</div><div class="line">#</div><div class="line">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</div><div class="line">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</div><div class="line">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</div><div class="line">#  $     String commands</div><div class="line">#  l     List commands</div><div class="line">#  s     Set commands</div><div class="line">#  h     Hash commands</div><div class="line">#  z     Sorted set commands</div><div class="line">#  x     Expired events (events generated every time a key expires)</div><div class="line">#  e     Evicted events (events generated when a key is evicted for maxmemory)</div><div class="line">#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.</div><div class="line">#</div><div class="line">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</div><div class="line">#  of zero or multiple characters. The empty string means that notifications</div><div class="line">#  are disabled.</div><div class="line">#</div><div class="line">#  Example: to enable list and generic events, from the point of view of the</div><div class="line">#           event name, use:</div><div class="line">#</div><div class="line">#  notify-keyspace-events Elg</div><div class="line">#</div><div class="line">#  Example 2: to get the stream of the expired keys subscribing to channel</div><div class="line">#             name __keyevent@0__:expired use:</div><div class="line">#</div><div class="line">#  notify-keyspace-events Ex</div><div class="line">#</div><div class="line">#  By default all notifications are disabled because most users don&apos;t need</div><div class="line">#  this feature and the feature has some overhead. Note that if you don&apos;t</div><div class="line">#  specify at least one of K or E, no events will be delivered.</div><div class="line"># 客户端可接受的key通知类型，比如想订阅key的过期通知，就设成Ex，E表示key的事件,x表示key过期事件</div><div class="line">notify-keyspace-events &quot;&quot;</div><div class="line"></div><div class="line">############################### ADVANCED CONFIG ###############################</div><div class="line"></div><div class="line"># Hashes are encoded using a memory efficient data structure when they have a</div><div class="line"># small number of entries, and the biggest entry does not exceed a given</div><div class="line"># threshold. These thresholds can be configured using the following directives.</div><div class="line"># 长度低于设置大小会使用紧凑内存，value大小低于设定大小会使用紧凑内存</div><div class="line"># 下面list zset设置类似</div><div class="line">hash-max-ziplist-entries 512</div><div class="line">hash-max-ziplist-value 64</div><div class="line"></div><div class="line"># Lists are also encoded in a special way to save a lot of space.</div><div class="line"># The number of entries allowed per internal list node can be specified</div><div class="line"># as a fixed maximum size or a maximum number of elements.</div><div class="line"># For a fixed maximum size, use -5 through -1, meaning:</div><div class="line"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</div><div class="line"># -4: max size: 32 Kb  &lt;-- not recommended</div><div class="line"># -3: max size: 16 Kb  &lt;-- probably not recommended</div><div class="line"># -2: max size: 8 Kb   &lt;-- good</div><div class="line"># -1: max size: 4 Kb   &lt;-- good</div><div class="line"># Positive numbers mean store up to _exactly_ that number of elements</div><div class="line"># per list node.</div><div class="line"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</div><div class="line"># but if your use case is unique, adjust the settings as necessary.</div><div class="line">list-max-ziplist-size -2</div><div class="line"></div><div class="line"># Lists may also be compressed.</div><div class="line"># Compress depth is the number of quicklist ziplist nodes from *each* side of</div><div class="line"># the list to *exclude* from compression.  The head and tail of the list</div><div class="line"># are always uncompressed for fast push/pop operations.  Settings are:</div><div class="line"># 0: disable all list compression</div><div class="line"># 1: depth 1 means &quot;don&apos;t start compressing until after 1 node into the list,</div><div class="line">#    going from either the head or tail&quot;</div><div class="line">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</div><div class="line">#    [head], [tail] will always be uncompressed; inner nodes will compress.</div><div class="line"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</div><div class="line">#    2 here means: don&apos;t compress head or head-&gt;next or tail-&gt;prev or tail,</div><div class="line">#    but compress all nodes between them.</div><div class="line"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</div><div class="line"># etc.</div><div class="line">list-compress-depth 0</div><div class="line"></div><div class="line"># Sets have a special encoding in just one case: when a set is composed</div><div class="line"># of just strings that happen to be integers in radix 10 in the range</div><div class="line"># of 64 bit signed integers.</div><div class="line"># The following configuration setting sets the limit in the size of the</div><div class="line"># set in order to use this special memory saving encoding.</div><div class="line">set-max-intset-entries 512</div><div class="line"></div><div class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</div><div class="line"># order to save a lot of space. This encoding is only used when the length and</div><div class="line"># elements of a sorted set are below the following limits:</div><div class="line">zset-max-ziplist-entries 128</div><div class="line">zset-max-ziplist-value 64</div><div class="line"></div><div class="line"># HyperLogLog sparse representation bytes limit. The limit includes the</div><div class="line"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</div><div class="line"># this limit, it is converted into the dense representation.</div><div class="line">#</div><div class="line"># A value greater than 16000 is totally useless, since at that point the</div><div class="line"># dense representation is more memory efficient.</div><div class="line">#</div><div class="line"># The suggested value is ~ 3000 in order to have the benefits of</div><div class="line"># the space efficient encoding without slowing down too much PFADD,</div><div class="line"># which is O(N) with the sparse encoding. The value can be raised to</div><div class="line"># ~ 10000 when CPU is not a concern, but space is, and the data set is</div><div class="line"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</div><div class="line">hll-sparse-max-bytes 3000</div><div class="line"></div><div class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</div><div class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</div><div class="line"># keys to values). The hash table implementation Redis uses (see dict.c)</div><div class="line"># performs a lazy rehashing: the more operation you run into a hash table</div><div class="line"># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</div><div class="line"># server is idle the rehashing is never complete and some more memory is used</div><div class="line"># by the hash table.</div><div class="line">#</div><div class="line"># The default is to use this millisecond 10 times every second in order to</div><div class="line"># actively rehash the main dictionaries, freeing memory when possible.</div><div class="line">#</div><div class="line"># If unsure:</div><div class="line"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</div><div class="line"># not a good thing in your environment that Redis can reply from time to time</div><div class="line"># to queries with 2 milliseconds delay.</div><div class="line">#</div><div class="line"># use &quot;activerehashing yes&quot; if you don&apos;t have such hard requirements but</div><div class="line"># want to free memory asap when possible.</div><div class="line">activerehashing yes</div><div class="line"></div><div class="line"># The client output buffer limits can be used to force disconnection of clients</div><div class="line"># that are not reading data from the server fast enough for some reason (a</div><div class="line"># common reason is that a Pub/Sub client can&apos;t consume messages as fast as the</div><div class="line"># publisher can produce them).</div><div class="line">#</div><div class="line"># The limit can be set differently for the three different classes of clients:</div><div class="line">#</div><div class="line"># normal -&gt; normal clients including MONITOR clients</div><div class="line"># slave  -&gt; slave clients</div><div class="line"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</div><div class="line">#</div><div class="line"># The syntax of every client-output-buffer-limit directive is the following:</div><div class="line">#</div><div class="line"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</div><div class="line">#</div><div class="line"># A client is immediately disconnected once the hard limit is reached, or if</div><div class="line"># the soft limit is reached and remains reached for the specified number of</div><div class="line"># seconds (continuously).</div><div class="line"># So for instance if the hard limit is 32 megabytes and the soft limit is</div><div class="line"># 16 megabytes / 10 seconds, the client will get disconnected immediately</div><div class="line"># if the size of the output buffers reach 32 megabytes, but will also get</div><div class="line"># disconnected if the client reaches 16 megabytes and continuously overcomes</div><div class="line"># the limit for 10 seconds.</div><div class="line">#</div><div class="line"># By default normal clients are not limited because they don&apos;t receive data</div><div class="line"># without asking (in a push way), but just after a request, so only</div><div class="line"># asynchronous clients may create a scenario where data is requested faster</div><div class="line"># than it can read.</div><div class="line">#</div><div class="line"># Instead there is a default limit for pubsub and slave clients, since</div><div class="line"># subscribers and slaves receive data in a push fashion.</div><div class="line">#</div><div class="line"># Both the hard or the soft limit can be disabled by setting them to zero.</div><div class="line">client-output-buffer-limit normal 0 0 0</div><div class="line">client-output-buffer-limit slave 256mb 64mb 60</div><div class="line">client-output-buffer-limit pubsub 32mb 8mb 60</div><div class="line"></div><div class="line"># Redis calls an internal function to perform many background tasks, like</div><div class="line"># closing connections of clients in timeout, purging expired keys that are</div><div class="line"># never requested, and so forth.</div><div class="line">#</div><div class="line"># Not all tasks are performed with the same frequency, but Redis checks for</div><div class="line"># tasks to perform according to the specified &quot;hz&quot; value.</div><div class="line">#</div><div class="line"># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</div><div class="line"># Redis is idle, but at the same time will make Redis more responsive when</div><div class="line"># there are many keys expiring at the same time, and timeouts may be</div><div class="line"># handled with more precision.</div><div class="line">#</div><div class="line"># The range is between 1 and 500, however a value over 100 is usually not</div><div class="line"># a good idea. Most users should use the default of 10 and raise this up to</div><div class="line"># 100 only in environments where very low latency is required.</div><div class="line">hz 10</div><div class="line"></div><div class="line"># When a child rewrites the AOF file, if the following option is enabled</div><div class="line"># the file will be fsync-ed every 32 MB of data generated. This is useful</div><div class="line"># in order to commit the file to the disk more incrementally and avoid</div><div class="line"># big latency spikes.</div><div class="line">aof-rewrite-incremental-fsync yes</div></pre></td></tr></table></figure></p>
<h3 id="具体修改配置"><a href="#具体修改配置" class="headerlink" title="具体修改配置"></a>具体修改配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">进入到刚配置的目录</div><div class="line">cd /usr/local/redis1</div><div class="line">目录下不存在redis.conf 文件，去解压目录下的redis-stable下</div><div class="line">cp redis.conf /usr/local/redis1/bin</div><div class="line">daemonize 修改为yes 后台运行</div><div class="line">port 改为7001 方便搭建集群环境</div><div class="line">bild 去除</div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-server redis.conf</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/lifetragedy/article/details/50628820" target="_blank" rel="external">亲密接触Redis-第一天</a></li>
<li><a href="http://blog.csdn.net/yinwenjie/article/details/53407288" target="_blank" rel="external">架构设计：系统存储（15）——Redis基本概念和安装使用</a></li>
<li>PS 推荐以上两个博客的其他文章</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载redis&quot;&gt;&lt;a href=&quot;#下载redis&quot; class=&quot;headerlink&quot; title=&quot;下载redis&quot;&gt;&lt;/a&gt;下载redis&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://download.redis.io/releases/&quot; targe
    
    </summary>
    
      <category term="环境搭建" scheme="https://mykite.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="redis" scheme="https://mykite.github.io/tags/redis/"/>
    
      <category term="环境搭建" scheme="https://mykite.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用springboot+springsession实现分布式session以及源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/%E4%BD%BF%E7%94%A8springboot+springsession%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8Fsession%E4%BB%A5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/使用springboot+springsession实现分布式session以及源码解析/</id>
    <published>2017-04-17T07:06:58.656Z</published>
    <updated>2017-04-17T07:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">接上问springboot使用redis</div></pre></td></tr></table></figure>
<h2 id="springsession是什么"><a href="#springsession是什么" class="headerlink" title="springsession是什么"></a>springsession是什么</h2><blockquote>
<p>实现分布式session管理</p>
<h2 id="为什么要使用springsession"><a href="#为什么要使用springsession" class="headerlink" title="为什么要使用springsession"></a>为什么要使用springsession</h2><p>spring全家桶，不想自己实现分布式session管理可以使用</p>
</blockquote>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;            </div><div class="line">    &lt;artifactId&gt;spring-session&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@EnableRedisHttpSession</div><div class="line">public class HttpSessionConfiguration &#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://cloud.githubusercontent.com/assets/9413389/23248693/b13d567a-f9db-11e6-93f2-111e93f1d209.png" alt="image"><br><img src="https://cloud.githubusercontent.com/assets/9413389/23248724/daed2f90-f9db-11e6-96da-d94886cc50cb.png" alt="image"></p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>SpringHttpSession</p>
<ul>
<li><p>第一步查看@EnableRedisHttpSession</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Retention(java.lang.annotation.RetentionPolicy.RUNTIME)</div><div class="line">@Target(&#123; java.lang.annotation.ElementType.TYPE &#125;)</div><div class="line">@Documented</div><div class="line">@Import(RedisHttpSessionConfiguration.class)</div><div class="line">@Configuration</div><div class="line">public @interface EnableRedisHttpSession &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>进二步查看RedisHttpSessionConfiguration</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableScheduling</div><div class="line">public class RedisHttpSessionConfiguration extends SpringHttpSessionConfiguration</div><div class="line">		implements EmbeddedValueResolverAware, ImportAware &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>第三步发现其集成自SpringHttpSessionConfiguration查看</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">public class SpringHttpSessionConfiguration implements ApplicationContextAware &#123;</div><div class="line">	private CookieHttpSessionStrategy defaultHttpSessionStrategy = new CookieHttpSessionStrategy();</div><div class="line">	private boolean usesSpringSessionRememberMeServices;</div><div class="line">	private ServletContext servletContext;</div><div class="line">	private CookieSerializer cookieSerializer;</div><div class="line">	private HttpSessionStrategy httpSessionStrategy = this.defaultHttpSessionStrategy;</div><div class="line">	private List&lt;HttpSessionListener&gt; httpSessionListeners = new ArrayList&lt;HttpSessionListener&gt;();</div><div class="line">	@PostConstruct</div><div class="line">	public void init() &#123;</div><div class="line">		if (this.cookieSerializer != null) &#123;</div><div class="line">			this.defaultHttpSessionStrategy.setCookieSerializer(this.cookieSerializer);</div><div class="line">		&#125;</div><div class="line">		else if (this.usesSpringSessionRememberMeServices) &#123;</div><div class="line">			DefaultCookieSerializer cookieSerializer = new DefaultCookieSerializer();</div><div class="line">			cookieSerializer.setRememberMeRequestAttribute(</div><div class="line">					SpringSessionRememberMeServices.REMEMBER_ME_LOGIN_ATTR);</div><div class="line">			this.defaultHttpSessionStrategy.setCookieSerializer(cookieSerializer);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	@Bean</div><div class="line">	public SessionEventHttpSessionListenerAdapter sessionEventHttpSessionListenerAdapter() &#123;</div><div class="line">		return new SessionEventHttpSessionListenerAdapter(this.httpSessionListeners);</div><div class="line">	&#125;</div><div class="line">	@Bean</div><div class="line">	public &lt;S extends ExpiringSession&gt; SessionRepositoryFilter&lt;? extends ExpiringSession&gt; springSessionRepositoryFilter(</div><div class="line">			SessionRepository&lt;S&gt; sessionRepository) &#123;</div><div class="line">		SessionRepositoryFilter&lt;S&gt; sessionRepositoryFilter = new SessionRepositoryFilter&lt;S&gt;(</div><div class="line">				sessionRepository);</div><div class="line">		sessionRepositoryFilter.setServletContext(this.servletContext);</div><div class="line">		if (this.httpSessionStrategy instanceof MultiHttpSessionStrategy) &#123;</div><div class="line">			sessionRepositoryFilter.setHttpSessionStrategy(</div><div class="line">					(MultiHttpSessionStrategy) this.httpSessionStrategy);</div><div class="line">		&#125;</div><div class="line">		else &#123;</div><div class="line">			sessionRepositoryFilter.setHttpSessionStrategy(this.httpSessionStrategy);</div><div class="line">		&#125;</div><div class="line">		return sessionRepositoryFilter;</div><div class="line">	&#125;</div><div class="line">	public void setApplicationContext(ApplicationContext applicationContext)</div><div class="line">			throws BeansException &#123;</div><div class="line">		if (ClassUtils.isPresent(</div><div class="line">				&quot;org.springframework.security.web.authentication.RememberMeServices&quot;,</div><div class="line">				null)) &#123;</div><div class="line">			this.usesSpringSessionRememberMeServices = !ObjectUtils</div><div class="line">					.isEmpty(applicationContext</div><div class="line">							.getBeanNamesForType(SpringSessionRememberMeServices.class));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	@Autowired(required = false)</div><div class="line">	public void setServletContext(ServletContext servletContext) &#123;</div><div class="line">		this.servletContext = servletContext;</div><div class="line">	&#125;</div><div class="line">	@Autowired(required = false)</div><div class="line">	public void setCookieSerializer(CookieSerializer cookieSerializer) &#123;</div><div class="line">		this.cookieSerializer = cookieSerializer;</div><div class="line">	&#125;</div><div class="line">	@Autowired(required = false)</div><div class="line">	public void setHttpSessionStrategy(HttpSessionStrategy httpSessionStrategy) &#123;</div><div class="line">		this.httpSessionStrategy = httpSessionStrategy;</div><div class="line">	&#125;</div><div class="line">	@Autowired(required = false)</div><div class="line">	public void setHttpSessionListeners(List&lt;HttpSessionListener&gt; listeners) &#123;</div><div class="line">		this.httpSessionListeners = listeners;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">发现其session默认的策略是使用</div><div class="line">defaultHttpSessionStrategy=new CookieHttpSessionStrategy();cookie来实现</div><div class="line">继续看</div><div class="line">@Bean</div><div class="line">public &lt;S extends ExpiringSession&gt; SessionRepositoryFilter&lt;? extends ExpiringSession&gt; springSessionRepositoryFilter(</div><div class="line">		SessionRepository&lt;S&gt; sessionRepository) &#123;</div><div class="line">	SessionRepositoryFilter&lt;S&gt; sessionRepositoryFilter = new SessionRepositoryFilter&lt;S&gt;(</div><div class="line">			sessionRepository);</div><div class="line">	sessionRepositoryFilter.setServletContext(this.servletContext);</div><div class="line">	if (this.httpSessionStrategy instanceof MultiHttpSessionStrategy) &#123;</div><div class="line">		sessionRepositoryFilter.setHttpSessionStrategy(</div><div class="line">				(MultiHttpSessionStrategy) this.httpSessionStrategy);</div><div class="line">	&#125;</div><div class="line">	else &#123;</div><div class="line">		sessionRepositoryFilter.setHttpSessionStrategy(this.httpSessionStrategy);</div><div class="line">	&#125;</div><div class="line">	return sessionRepositoryFilter;</div><div class="line">&#125;</div><div class="line">传入参数SessionRepository的实现类RedisOperationsSessionRepository在RedisHttpSessionConfiguration被进行创建所以sessionRepository使用的就是RedisOperationsSessionRepository用来做于存储</div></pre></td></tr></table></figure>
<ul>
<li>继续查看SessionRepositoryFilter<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public class SessionRepositoryFilter&lt;S extends ExpiringSession&gt;</div><div class="line">		extends OncePerRequestFilter &#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line">继承自OncePerRequestFilter</div><div class="line">abstract class OncePerRequestFilter implements Filter &#123;</div><div class="line">    public final void doFilter(ServletRequest request, ServletResponse response,</div><div class="line">			FilterChain filterChain) throws ServletException, IOException &#123;</div><div class="line">			调用doFilterInternal由SessionRepositoryFilter实现</div><div class="line">			</div><div class="line">			</div><div class="line">			</div><div class="line">@Override</div><div class="line">protected void doFilterInternal(HttpServletRequest request,</div><div class="line">		HttpServletResponse response, FilterChain filterChain)</div><div class="line">		throws ServletException, IOException &#123;</div><div class="line">	request.setAttribute(SESSION_REPOSITORY_ATTR, this.sessionRepository);</div><div class="line"></div><div class="line">	SessionRepositoryRequestWrapper wrappedRequest = new SessionRepositoryRequestWrapper(</div><div class="line">			request, response, this.servletContext);</div><div class="line">	SessionRepositoryResponseWrapper wrappedResponse = new SessionRepositoryResponseWrapper(</div><div class="line">			wrappedRequest, response);</div><div class="line"></div><div class="line">	HttpServletRequest strategyRequest = this.httpSessionStrategy</div><div class="line">			.wrapRequest(wrappedRequest, wrappedResponse);</div><div class="line">	HttpServletResponse strategyResponse = this.httpSessionStrategy</div><div class="line">			.wrapResponse(wrappedRequest, wrappedResponse);</div><div class="line"></div><div class="line">	try &#123;</div><div class="line">		filterChain.doFilter(strategyRequest, strategyResponse);</div><div class="line">	&#125;</div><div class="line">	finally &#123;</div><div class="line">		wrappedRequest.commitSession();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">包装请求，响应对象</div><div class="line">根据策略处理包装请求对象</div><div class="line">最后wrappedRequest.commitSession();</div><div class="line">HttpSessionWrapper wrappedSession = getCurrentSession();</div><div class="line">if (wrappedSession == null) &#123;</div><div class="line">	if (isInvalidateClientSession()) &#123;</div><div class="line">		SessionRepositoryFilter.this.httpSessionStrategy</div><div class="line">				.onInvalidateSession(this, this.response);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">	S session = wrappedSession.getSession();</div><div class="line">	SessionRepositoryFilter.this.sessionRepository.save(session);</div><div class="line">	if (!isRequestedSessionIdValid()</div><div class="line">			|| !session.getId().equals(getRequestedSessionId())) &#123;</div><div class="line">		SessionRepositoryFilter.this.httpSessionStrategy.onNewSession(session,</div><div class="line">				this, this.response);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">这就是最终处理，就不做详细解释了</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="几张图"><a href="#几张图" class="headerlink" title="几张图"></a>几张图</h2><p><img src="https://cloud.githubusercontent.com/assets/9413389/23250741/5fc12506-f9e5-11e6-90b1-69ccfcd813d5.png" alt="image"></p>
<p>SessionRepository的实现类<br><img src="https://cloud.githubusercontent.com/assets/9413389/23250660/0e93d8ae-f9e5-11e6-8b6a-1ecc305beb07.png" alt="image"></p>
<p><img src="https://cloud.githubusercontent.com/assets/9413389/23249890/80286024-f9e1-11e6-9994-a64e02890369.png" alt="image"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.spring.io/spring-session/docs/current/reference/html5/guides/boot.html" target="_blank" rel="external">springsession</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="springboot" scheme="https://mykite.github.io/categories/springboot/"/>
    
    
      <category term="spring" scheme="https://mykite.github.io/tags/spring/"/>
    
      <category term="springboot" scheme="https://mykite.github.io/tags/springboot/"/>
    
      <category term="springsession" scheme="https://mykite.github.io/tags/springsession/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="https://mykite.github.io/2017/04/17/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://mykite.github.io/2017/04/17/docker学习笔记/</id>
    <published>2017-04-17T07:06:01.951Z</published>
    <updated>2017-04-17T07:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><blockquote>
<p>Docker是使用google公司推出的Go语言进行开发实现，基于Linux内核的cgroup,namespace以及AUFS类的union FS等技术，对进程进行封装隔离属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>
<p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p>
</blockquote>
<ul>
<li><a href="https://golang.org/" target="_blank" rel="external">Go语言</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Cgroups" target="_blank" rel="external">cgroup</a></li>
<li><a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="external">namespace</a></li>
<li><a href="https://en.wikipedia.org/wiki/Aufs" target="_blank" rel="external">AUFS</a></li>
<li><a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="external">Union FS</a><h2 id="为什么要使用Docker"><a href="#为什么要使用Docker" class="headerlink" title="为什么要使用Docker"></a>为什么要使用Docker</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3></li>
<li>更高效的利用系统资源</li>
<li>更快速的启动时间</li>
<li>一致的运行环境</li>
<li>持续交付和部署</li>
<li>更轻松的迁移</li>
<li>更轻松的维护和扩展<h3 id="对比传统虚拟机技术"><a href="#对比传统虚拟机技术" class="headerlink" title="对比传统虚拟机技术"></a>对比传统虚拟机技术</h3></li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td>一般为MB</td>
<td>一般为 GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody>
</table>
<p>传统虚拟机<br><img src="https://cloud.githubusercontent.com/assets/9413389/23054727/9c095f92-f51c-11e6-85fa-d7f302ac8da5.png" alt="image"><br>docker<br><img src="https://cloud.githubusercontent.com/assets/9413389/23054742/ba21f782-f51c-11e6-8ec5-3567f4cf8b25.png" alt="image"></p>
<h2 id="docker基本概念"><a href="#docker基本概念" class="headerlink" title="docker基本概念"></a>docker基本概念</h2><ul>
<li>镜像</li>
<li>容器</li>
<li>仓库</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="external">Docker — 从入门到实践</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker&quot;&gt;&lt;/a&gt;什么是Docker&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker是使用google公司推出的Go语言进行开发实
    
    </summary>
    
      <category term="docker" scheme="https://mykite.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://mykite.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>springboot打包docker镜像部署</title>
    <link href="https://mykite.github.io/2017/04/17/springboot%E6%89%93%E5%8C%85docker%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2/"/>
    <id>https://mykite.github.io/2017/04/17/springboot打包docker镜像部署/</id>
    <published>2017-04-17T07:04:09.935Z</published>
    <updated>2017-04-17T07:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>机器 vultr一台,centos7</p>
<h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ol>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk8</a></li>
<li><a href="http://maven.apache.org/download.cgi?spm=5176.100239.blogcont47344.12.SYAOhU&amp;file=download.cgi" target="_blank" rel="external">maven</a></li>
<li>git  yum install git</li>
<li>docker yum install docker-io</li>
</ol>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>jdk,maven<br><img src="https://cloud.githubusercontent.com/assets/9413389/23006522/634ab8d4-f43d-11e6-9c30-620056439d1f.png" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1.解压资源</div><div class="line">tar -zxvf jdk8.tar.gz</div><div class="line">tar -zxvf apache-maven-3.3.9-bin.tar.gz</div><div class="line"></div><div class="line">2.配置环境变量</div><div class="line">vim /etc/profile</div><div class="line">export JAVA_HOME=/root/jdk8</div><div class="line">export MAVEN_HOME=/root/apache-maven-3.3.9</div><div class="line">export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</div><div class="line">3.资源生效</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure></p>
<h2 id="项目准备-使用现有项目"><a href="#项目准备-使用现有项目" class="headerlink" title="项目准备(使用现有项目)"></a>项目准备(使用现有项目)</h2><p><a href="https://github.com/mykite/pan-search-springboot.git" target="_blank" rel="external">pan-search-springboot</a><br>pom.xml新增docker配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">	&lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.4.3&lt;/version&gt;</div><div class="line">	&lt;configuration&gt;</div><div class="line">	&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</div><div class="line">	&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</div><div class="line">	&lt;resources&gt;</div><div class="line">		&lt;resource&gt;</div><div class="line">			&lt;targetPath&gt;/&lt;/targetPath&gt;</div><div class="line">			&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</div><div class="line">			&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</div><div class="line">		&lt;/resource&gt;</div><div class="line">	&lt;/resources&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure></p>
<h3 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h3><ol>
<li>imageName镜像名称</li>
<li>dockerDirectory Dockerfile位置</li>
<li>resources 指那些需要和 Dockerfile 放在一起，在构建镜像时使用的文件，一般应用 jar 包需要纳入。本例，只需一个 jar 文件<br>Dockerfile定义 /src/main/docker/Dockerfile<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FROM frolvlad/alpine-oraclejdk8:slim</div><div class="line">VOLUME /tmp</div><div class="line">ADD docker-spring-boot-1.0.0.jar app.jar</div><div class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配置解释-1"><a href="#配置解释-1" class="headerlink" title="配置解释"></a>配置解释</h3><ol>
<li>VOLUME 指定了临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到 Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录</li>
<li>项目的 jar 文件作为 “app.jar” 添加到容器的</li>
<li>ENTRYPOINT 执行项目 app.jar。为了缩短 Tomcat 启动时间，添加一个系统属性指向 “/dev/urandom” 作为 Entropy Source</li>
</ol>
<h2 id="构建dockerImage"><a href="#构建dockerImage" class="headerlink" title="构建dockerImage"></a>构建dockerImage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">项目根路径下执行</div><div class="line">mvn package docker:build</div></pre></td></tr></table></figure>
<h2 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 8080:8080 -t kite/pan-search-springboot</div></pre></td></tr></table></figure>
<h2 id="打包上传"><a href="#打包上传" class="headerlink" title="打包上传"></a>打包上传</h2><h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p><a href="https://hub.docker.com/" target="_blank" rel="external">register</a></p>
<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker login</div></pre></td></tr></table></figure>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push kitesweet/pan-search-springboot</div></pre></td></tr></table></figure>
<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull kitesweet/pan-search-springboot</div></pre></td></tr></table></figure>
<h2 id="常用docker命令"><a href="#常用docker命令" class="headerlink" title="常用docker命令"></a>常用docker命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">查看</div><div class="line">docker ps</div><div class="line">docker ps -a为查看所有的容器，包括已经停止的</div><div class="line">删除所有容器</div><div class="line">docker rm $(docker ps -a -q)</div><div class="line">删除单个容器</div><div class="line">docker rm &lt;容器名orID&gt;</div><div class="line">停止、启动、杀死一个容器</div><div class="line">docker stop &lt;容器名orID&gt;</div><div class="line">docker start &lt;容器名orID&gt;</div><div class="line">docker kill &lt;容器名orID&gt;</div><div class="line">查看所有镜像</div><div class="line">docker images</div><div class="line">查看容器日志</div><div class="line">docker logs -f &lt;容器名orID&gt;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://blog.csdn.net/wsscy2004/article/details/25878363" target="_blank" rel="external">常用docker命令，及一些坑 </a></li>
<li><a href="https://yq.aliyun.com/articles/47344" target="_blank" rel="external">用 Docker 构建、运行、发布一个 Spring Boot 应用 </a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;机器 vultr一台,centos7&lt;/p&gt;
&lt;h2 id=&quot;资源下载&quot;&gt;&lt;a href=&quot;#资源下载&quot; class=&quot;he
    
    </summary>
    
      <category term="环境搭建" scheme="https://mykite.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="docker" scheme="https://mykite.github.io/tags/docker/"/>
    
      <category term="springboot" scheme="https://mykite.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>jvm 启动参数配置参考</title>
    <link href="https://mykite.github.io/2017/04/17/jvm%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/"/>
    <id>https://mykite.github.io/2017/04/17/jvm启动参数配置参考/</id>
    <published>2017-04-17T07:01:22.687Z</published>
    <updated>2017-04-17T07:01:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>java -jar xxx.jar -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+CMSParallelRemarkEnabled -XX:+CMSPermGenSweepingEnabled -XX:+CMSClassUnloadingEnabled -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+DisableExplicitGC -XX:+UseCompressedOops -XX:+DoEscapeAnalysis -XX:MaxTenuringThreshold=10 -verbose:gc -Xloggc:/alidata1/admin/logs/gc.log -XX:+PrintGCDetails</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;java -jar xxx.jar -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+UseCo
    
    </summary>
    
      <category term="jvm" scheme="https://mykite.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://mykite.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java命令</title>
    <link href="https://mykite.github.io/2017/04/17/java%E5%91%BD%E4%BB%A4/"/>
    <id>https://mykite.github.io/2017/04/17/java命令/</id>
    <published>2017-04-17T07:00:06.350Z</published>
    <updated>2017-04-17T07:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>演示命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">readme</div><div class="line">当前使用 pid=14750</div></pre></td></tr></table></figure></p>
<p>jinfo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查看Java进程的栈空间大小:jinfo - ThreadStackSize 14750</div><div class="line">查看是否使用了压缩指针:jinfo -flag UseCompressedOops 14750</div><div class="line">查看系统属性:jinfo -sysprops 14750</div></pre></td></tr></table></figure></p>
<p>jstack:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看一个指定的Java进程中的线程的状态:jstack 14750</div></pre></td></tr></table></figure>
<p>jstat:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看gc的信息:jstat -gcutil 14750</div></pre></td></tr></table></figure>
<p>jmap&amp;mat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">空间中各个年龄段的空间的使用情况:jmap -heap 14750</div><div class="line">dump当前java运行状态</div><div class="line">jmap -dump:live,format=b,file=/fileName 14750</div></pre></td></tr></table></figure>
<p>本文参考链接: <a href="http://www.javaranger.com/archives/1063" target="_blank" rel="external">http://www.javaranger.com/archives/1063</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;演示命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
    
    </summary>
    
      <category term="jvm" scheme="https://mykite.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://mykite.github.io/tags/jvm/"/>
    
      <category term="命令" scheme="https://mykite.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>jvm内存模型</title>
    <link href="https://mykite.github.io/2017/04/17/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://mykite.github.io/2017/04/17/jvm内存模型/</id>
    <published>2017-04-17T06:58:58.311Z</published>
    <updated>2017-04-17T06:59:53.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p>方法区（methodArea）,java堆（heap）,java栈（stack）,本地方法栈（native Method Stack） </p>
<h2 id="对象分为：年轻代-Young-、年老代-Tenured-、持久代-Perm"><a href="#对象分为：年轻代-Young-、年老代-Tenured-、持久代-Perm" class="headerlink" title="对象分为：年轻代(Young)、年老代(Tenured)、持久代(Perm)"></a>对象分为：年轻代(Young)、年老代(Tenured)、持久代(Perm)</h2><h3 id="年轻代-Young-："><a href="#年轻代-Young-：" class="headerlink" title="年轻代(Young)："></a>年轻代(Young)：</h3><p> 年轻代分三个区。一个Eden区，两个Survivor区。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个），当这个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制年老区(Tenured。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来 对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。</p>
<h3 id="Tenured（年老代）"><a href="#Tenured（年老代）" class="headerlink" title="Tenured（年老代）"></a>Tenured（年老代）</h3><p>年老代存放从年轻代存活的对象。一般来说年老代存放的都是生命期较长的对象。<br>Perm（持久代） 用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=进行设置。</p>
<h3 id="持久代-Perm"><a href="#持久代-Perm" class="headerlink" title="持久代(Perm)"></a>持久代(Perm)</h3><p>持久代是指MethodArea，不属于Heap。</p>
<p>本文参考链接：<a href="http://www.javaranger.com/archives/472" target="_blank" rel="external">http://www.javaranger.com/archives/472</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内存模型&quot;&gt;&lt;a href=&quot;#内存模型&quot; class=&quot;headerlink&quot; title=&quot;内存模型&quot;&gt;&lt;/a&gt;内存模型&lt;/h2&gt;&lt;p&gt;方法区（methodArea）,java堆（heap）,java栈（stack）,本地方法栈（native Method S
    
    </summary>
    
      <category term="jvm" scheme="https://mykite.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://mykite.github.io/tags/jvm/"/>
    
      <category term="内存模型" scheme="https://mykite.github.io/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>ArrayBlockingQueue源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/ArrayBlockingQueue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/ArrayBlockingQueue源码解析/</id>
    <published>2017-04-17T06:48:26.506Z</published>
    <updated>2017-04-17T06:56:57.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ArrayBlockingQueue"><a href="#什么是ArrayBlockingQueue" class="headerlink" title="什么是ArrayBlockingQueue"></a>什么是ArrayBlockingQueue</h2><blockquote>
<p>ArrayBlockingQueue底层是由数组实现的定长阻塞队列(阻塞表示如果没有原始那么获取元素会阻塞当前线程)</p>
</blockquote>
<h2 id="ArrayBlockingQueue用来干嘛"><a href="#ArrayBlockingQueue用来干嘛" class="headerlink" title="ArrayBlockingQueue用来干嘛"></a>ArrayBlockingQueue用来干嘛</h2><blockquote>
<p>ArrayBlockingQueue一般用于生产者消费者模型业务(排队机制，先进先出)</p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class ArrayBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt;</div><div class="line">        implements BlockingQueue&lt;E&gt;, java.io.Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = -817911632652898426L;</div><div class="line"></div><div class="line">    /** The queued items 存储元素容器*/</div><div class="line">    final Object[] items;</div><div class="line"></div><div class="line">    /** items index for next take, poll, peek or remove 使用过的元素 */</div><div class="line">    int takeIndex;</div><div class="line"></div><div class="line">    /** items index for next put, offer, or add 添加过的元素 */</div><div class="line">    int putIndex;</div><div class="line"></div><div class="line">    /** Number of elements in the queue 当前元素数量 */</div><div class="line">    int count;</div></pre></td></tr></table></figure>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><p>add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">	return super.add(e);</div><div class="line">&#125;</div><div class="line">super.add</div><div class="line">public boolean add(E e) &#123;</div><div class="line">	if (offer(e))</div><div class="line">		return true;</div><div class="line">	else</div><div class="line">		throw new IllegalStateException(&quot;Queue full&quot;);</div><div class="line">&#125;</div><div class="line">public boolean offer(E e) &#123;</div><div class="line">	checkNotNull(e);//ArrayBlockingQueue不能存储null对象</div><div class="line">	final ReentrantLock lock = this.lock;//插入操作线程安全</div><div class="line">	lock.lock();</div><div class="line">	try &#123;</div><div class="line">		if (count == items.length)//如果当前count==items.length表示队列已经忙了，不能插入</div><div class="line">			return false;</div><div class="line">		else &#123;</div><div class="line">			insert(e);//插入元素</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">private void insert(E x) &#123;</div><div class="line">	items[putIndex] = x;//第一次put为0</div><div class="line">	putIndex = inc(putIndex);//递增</div><div class="line">	++count;//数量递增</div><div class="line">	notEmpty.signal();//通知获取原始方法可以进行获取</div><div class="line">&#125;</div><div class="line">final int inc(int i) &#123;//如果当前putIndex==items.length那么putIndex重新从零开始</div><div class="line">	return (++i == items.length) ? 0 : i;</div><div class="line">&#125;</div><div class="line">//同样为添加元素，lock.lockInterruptibly如果检测到有Thread.interrupted();会直接抛出异常</div><div class="line">public void put(E e) throws InterruptedException &#123;</div><div class="line">	checkNotNull(e);</div><div class="line">	final ReentrantLock lock = this.lock;</div><div class="line">	lock.lockInterruptibly();</div><div class="line">	try &#123;</div><div class="line">		while (count == items.length)</div><div class="line">			notFull.await();</div><div class="line">		insert(e);</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>remove<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public boolean remove(Object o) &#123;</div><div class="line">	if (o == null) return false;</div><div class="line">	final Object[] items = this.items;</div><div class="line">	final ReentrantLock lock = this.lock;</div><div class="line">	lock.lock();</div><div class="line">	try &#123;</div><div class="line">		for (int i = takeIndex, k = count; k &gt; 0; i = inc(i), k--) &#123;</div><div class="line">			if (o.equals(items[i])) &#123;//从头部开始遍历元素判断</div><div class="line">				removeAt(i);</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return false;</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//queue size = 10 putSize = 5 tackSize = 0</div><div class="line">//queue 1,2,3,4,5</div><div class="line">removeAt 3</div><div class="line">step1: removeAt != takeIndex</div><div class="line">i = </div><div class="line">nexti = 4</div><div class="line"></div><div class="line"></div><div class="line">void removeAt(int i) &#123;</div><div class="line">	final Object[] items = this.items;</div><div class="line">	// if removing front item, just advance</div><div class="line">	if (i == takeIndex) &#123;</div><div class="line">		items[takeIndex] = null;//引用设置为空</div><div class="line">		takeIndex = inc(takeIndex);//takeIndex++</div><div class="line">	&#125; else &#123;</div><div class="line">		// slide over all others up through putIndex.</div><div class="line">		for (;;) &#123;</div><div class="line">			int nexti = inc(i);//&gt;队列的头部  递增(putIndex一个循环的0-n)</div><div class="line">			if (nexti != putIndex) &#123;//递增后部位putIndex全部向前移动位置</div><div class="line">				items[i] = items[nexti];</div><div class="line">				i = nexti;</div><div class="line">			&#125; else &#123;</div><div class="line">				items[i] = null;//元素设置为空</div><div class="line">				putIndex = i;</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	--count;//元素递减</div><div class="line">	notFull.signal();//通知notFull.awit()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>update<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">get</div></pre></td></tr></table></figure></p>
<p>public E poll() {//获取队列头部元素，获取后设置为空<br>    final ReentrantLock lock = this.lock;<br>    lock.lock();<br>    try {<br>        return (count == 0) ? null : extract();//如果当前队列为空直接返回null,不为空调用extract()<br>    } finally {<br>        lock.unlock();<br>    }<br>}<br>//获取队列头部元素，获取后设置为空<br>//take获取原始如果队列为空会进入阻塞状态知道等到有添加元素才会去返回<br>public E take() throws InterruptedException {<br>    final ReentrantLock lock = this.lock;<br>    lock.lockInterruptibly();//lock.lockInterruptibly如果检测到有Thread.interrupted();会直接抛出异常<br>    try {<br>        while (count == 0)<br>            notEmpty.await();//如果没有元素进入等待状态，等待被唤醒<br>        return extract();<br>    } finally {<br>        lock.unlock();<br>    }<br>}<br>//peek查看队列头部元素<br>public E peek() {<br>    final ReentrantLock lock = this.lock;<br>    lock.lock();<br>    try {<br>        return (count == 0) ? null : itemAt(takeIndex);//如果元素为空直接返回null,不为空条用itemAt(takeIndex)<br>    } finally {<br>        lock.unlock();<br>    }<br>}<br>private E extract() {<br>    final Object[] items = this.items;<br>    E x = this.<e>cast(items[takeIndex]);//泛型转换并且获得当前元素<br>    items[takeIndex] = null;//当前元素设置为空<br>    takeIndex = inc(takeIndex);//获取原始递增<br>    –count;//队列元素递减<br>    notFull.signal();//通知notFull.await()可以进行插入元素<br>    return x;//返回当前获取原始<br>}<br>//获取元素<br>final E itemAt(int i) {<br>    return this.<e>cast(items[i]);<br>}<br>```</e></e></p>
<h3 id="什么时候扩容"><a href="#什么时候扩容" class="headerlink" title="什么时候扩容"></a>什么时候扩容</h3><blockquote>
<p>定长队列，不能进行扩容</p>
</blockquote>
<h3 id="是否线程安全"><a href="#是否线程安全" class="headerlink" title="是否线程安全"></a>是否线程安全</h3><blockquote>
<p>线程安全</p>
</blockquote>
<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ul>
<li>ArrayBlockingQueue为定长队列</li>
<li>ArrayBlockingQueue的添加和获取方法都有提供阻塞和非阻塞的根据需要使用</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是ArrayBlockingQueue&quot;&gt;&lt;a href=&quot;#什么是ArrayBlockingQueue&quot; class=&quot;headerlink&quot; title=&quot;什么是ArrayBlockingQueue&quot;&gt;&lt;/a&gt;什么是ArrayBlockingQueue&lt;/
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="queue" scheme="https://mykite.github.io/categories/Collection/queue/"/>
    
    
      <category term="queue" scheme="https://mykite.github.io/tags/queue/"/>
    
      <category term="blockngQueue" scheme="https://mykite.github.io/tags/blockngQueue/"/>
    
      <category term="java" scheme="https://mykite.github.io/tags/java/"/>
    
      <category term="源码分析" scheme="https://mykite.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>LinkedBlockingQueue源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/LinkedBlockingQueue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/LinkedBlockingQueue源码解析/</id>
    <published>2017-04-17T06:47:16.504Z</published>
    <updated>2017-04-17T06:57:03.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是LinkedBlockingQueue"><a href="#什么是LinkedBlockingQueue" class="headerlink" title="什么是LinkedBlockingQueue"></a>什么是LinkedBlockingQueue</h2><blockquote>
<p>LinkedBlockingQueue底层是由节点链表实现的定长阻塞队列(阻塞表示如果没有原始那么获取元素会阻塞当前线程)</p>
</blockquote>
<h2 id="LinkedBlockingQueue用来干嘛"><a href="#LinkedBlockingQueue用来干嘛" class="headerlink" title="LinkedBlockingQueue用来干嘛"></a>LinkedBlockingQueue用来干嘛</h2><blockquote>
<p>LinkedBlockingQueue一般用于生产者消费者模型业务(排队机制，先进先出)</p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class LinkedBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt;</div><div class="line">        implements BlockingQueue&lt;E&gt;, java.io.Serializable &#123;</div><div class="line">    private static final long serialVersionUID = -6903933977591709194L;</div><div class="line">    /**</div><div class="line">     * Linked list node class</div><div class="line">     */</div><div class="line">    static class Node&lt;E&gt; &#123;//存储数据的节点</div><div class="line">        E item;</div><div class="line"> </div><div class="line">        Node&lt;E&gt; next;</div><div class="line"></div><div class="line">        Node(E x) &#123; item = x; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** The capacity bound, or Integer.MAX_VALUE if none */</div><div class="line">    private final int capacity;//链表的最大长度，如果不设置值默认为Integer.MAX_VALUE</div><div class="line"></div><div class="line">    /** Current number of elements */</div><div class="line">    private final AtomicInteger count = new AtomicInteger(0);//统计数量线程安全</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Head of linked list.</div><div class="line">     * Invariant: head.item == null</div><div class="line">     */</div><div class="line">    private transient Node&lt;E&gt; head;//头节点</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Tail of linked list.</div><div class="line">     * Invariant: last.next == null</div><div class="line">     */</div><div class="line">    private transient Node&lt;E&gt; last;//尾节点</div><div class="line"></div><div class="line">    /** Lock held by take, poll, etc */</div><div class="line">    private final ReentrantLock takeLock = new ReentrantLock();//tackLock</div><div class="line"></div><div class="line">    /** Wait queue for waiting takes */</div><div class="line">    private final Condition notEmpty = takeLock.newCondition();//tackLock条件不为空</div><div class="line"></div><div class="line">    /** Lock held by put, offer, etc */</div><div class="line">    private final ReentrantLock putLock = new ReentrantLock();//putLock</div><div class="line"></div><div class="line">    /** Wait queue for waiting puts */</div><div class="line">    private final Condition notFull = putLock.newCondition();//putLock条件没满</div><div class="line">    public LinkedBlockingQueue() &#123;</div><div class="line">            this(Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line">    public LinkedBlockingQueue(int capacity) &#123;</div><div class="line">    	if (capacity &lt;= 0) throw new IllegalArgumentException();</div><div class="line">    	this.capacity = capacity;</div><div class="line">    	last = head = new Node&lt;E&gt;(null);//默认last=head=空节点</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><p>add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public void put(E e) throws InterruptedException &#123;</div><div class="line">	if (e == null) throw new NullPointerException();//不能存储空元素</div><div class="line">	int c = -1;</div><div class="line">	Node&lt;E&gt; node = new Node(e);//创建节点</div><div class="line">	final ReentrantLock putLock = this.putLock;//获得putLock</div><div class="line">	final AtomicInteger count = this.count;//获取当前数量</div><div class="line">	putLock.lockInterruptibly();//获取锁，如果有调用Thread.Interrupted()直接抛出异常</div><div class="line">	try &#123;</div><div class="line">		</div><div class="line">		while (count.get() == capacity) &#123;//如果当前队列以满，进入等待状态</div><div class="line">			notFull.await();</div><div class="line">		&#125;</div><div class="line">		enqueue(node);</div><div class="line">		c = count.getAndIncrement();</div><div class="line">		if (c + 1 &lt; capacity)</div><div class="line">			notFull.signal();</div><div class="line">	&#125; finally &#123;</div><div class="line">		putLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == 0)</div><div class="line">		signalNotEmpty();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public boolean offer(E e, long timeout, TimeUnit unit)	offer(e)类似</div><div class="line">	throws InterruptedException &#123;</div><div class="line"></div><div class="line">	if (e == null) throw new NullPointerException();//不能存储空元素</div><div class="line">	long nanos = unit.toNanos(timeout);//装换为纳秒</div><div class="line">	int c = -1;</div><div class="line">	final ReentrantLock putLock = this.putLock;</div><div class="line">	final AtomicInteger count = this.count;</div><div class="line">	putLock.lockInterruptibly();</div><div class="line">	try &#123;</div><div class="line">		while (count.get() == capacity) &#123;</div><div class="line">			if (nanos &lt;= 0)</div><div class="line">				return false;</div><div class="line">			nanos = notFull.awaitNanos(nanos);//等待一段时间</div><div class="line">		&#125;</div><div class="line">		enqueue(new Node&lt;E&gt;(e));</div><div class="line">		c = count.getAndIncrement();//递增</div><div class="line">		if (c + 1 &lt; capacity)//如果未满唤醒notFull.awit</div><div class="line">			notFull.signal();</div><div class="line">	&#125; finally &#123;</div><div class="line">		putLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == 0)</div><div class="line">		signalNotEmpty();//唤醒notEmpty.await()</div><div class="line">	return true;</div><div class="line">&#125;</div><div class="line">private void enqueue(Node&lt;E&gt; node) &#123;</div><div class="line">	// assert putLock.isHeldByCurrentThread();</div><div class="line">	// assert last.next == null;</div><div class="line">	//拆分为两步 last.next = node，last = node</div><div class="line">	//每次head.next=当前的last然后last.next指向node</div><div class="line">	last = last.next = node;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>remove<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public boolean remove(Object o) &#123;</div><div class="line">	if (o == null) return false;</div><div class="line">	fullyLock();//删除数据时全部lock</div><div class="line">	try &#123;</div><div class="line">		for (Node&lt;E&gt; trail = head, p = trail.next;</div><div class="line">			 p != null;</div><div class="line">			 trail = p, p = p.next) &#123;</div><div class="line">			if (o.equals(p.item)) &#123;</div><div class="line">				unlink(p, trail);</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return false;</div><div class="line">	&#125; finally &#123;</div><div class="line">		fullyUnlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">void unlink(Node&lt;E&gt; p, Node&lt;E&gt; trail) &#123;</div><div class="line">	// assert isFullyLocked();</div><div class="line">	// p.next is not changed, to allow iterators that are</div><div class="line">	// traversing p to maintain their weak-consistency guarantee.</div><div class="line">	p.item = null;</div><div class="line">	trail.next = p.next;//前后元素执行，大年元素设置为空</div><div class="line">	if (last == p)</div><div class="line">		last = trail;</div><div class="line">	if (count.getAndDecrement() == capacity)//count获取数量同时递减(获取数量为递减钱数量)</div><div class="line">		notFull.signal();//唤醒 notFull.await()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>get<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">//获取元素，消费，可能被中断</div><div class="line">public E take() throws InterruptedException &#123;</div><div class="line">	E x;</div><div class="line">	int c = -1;</div><div class="line">	final AtomicInteger count = this.count;</div><div class="line">	final ReentrantLock takeLock = this.takeLock;</div><div class="line">	takeLock.lockInterruptibly();//如果有调用Thread.Interrupted()抛出异常</div><div class="line">	try &#123;</div><div class="line">		while (count.get() == 0) &#123;</div><div class="line">			notEmpty.await();//元素为空进入等待状态</div><div class="line">		&#125;</div><div class="line">		x = dequeue();//</div><div class="line">		c = count.getAndDecrement();</div><div class="line">		if (c &gt; 1)</div><div class="line">			notEmpty.signal();</div><div class="line">	&#125; finally &#123;</div><div class="line">		takeLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == capacity)</div><div class="line">		signalNotFull();</div><div class="line">	return x;</div><div class="line">&#125;</div><div class="line">//获取元素，消费</div><div class="line">public E poll() &#123;</div><div class="line">	final AtomicInteger count = this.count;</div><div class="line">	if (count.get() == 0)</div><div class="line">		return null;</div><div class="line">	E x = null;</div><div class="line">	int c = -1;</div><div class="line">	final ReentrantLock takeLock = this.takeLock;</div><div class="line">	takeLock.lock();</div><div class="line">	try &#123;</div><div class="line">		if (count.get() &gt; 0) &#123;</div><div class="line">			x = dequeue();</div><div class="line">			c = count.getAndDecrement();</div><div class="line">			if (c &gt; 1)</div><div class="line">				notEmpty.signal();</div><div class="line">		&#125;</div><div class="line">	&#125; finally &#123;</div><div class="line">		takeLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == capacity)</div><div class="line">		signalNotFull();</div><div class="line">	return x;</div><div class="line">&#125;</div><div class="line">//查看元素</div><div class="line">public E peek() &#123;</div><div class="line">	if (count.get() == 0)</div><div class="line">		return null;</div><div class="line">	final ReentrantLock takeLock = this.takeLock;</div><div class="line">	takeLock.lock();</div><div class="line">	try &#123;</div><div class="line">		Node&lt;E&gt; first = head.next;</div><div class="line">		if (first == null)</div><div class="line">			return null;</div><div class="line">		else</div><div class="line">			return first.item;</div><div class="line">	&#125; finally &#123;</div><div class="line">		takeLock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">[null,aaa,bbb] queue</div><div class="line">[null,bbb] delete after queue</div><div class="line">去掉头部null元素获取aaa元素修改aaa元素的item=null</div><div class="line">private E dequeue() &#123;</div><div class="line">	// assert takeLock.isHeldByCurrentThread();</div><div class="line">	// assert head.item == null;</div><div class="line">	Node&lt;E&gt; h = head;</div><div class="line">	Node&lt;E&gt; first = h.next;//first第一个有值的节点</div><div class="line">	h.next = h; // help GC</div><div class="line">	head = first;</div><div class="line">	E x = first.item;//获取元素</div><div class="line">	first.item = null;//设置为空</div><div class="line">	return x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="什么时候扩容"><a href="#什么时候扩容" class="headerlink" title="什么时候扩容"></a>什么时候扩容</h3><blockquote>
<p>定长链表不支持扩容</p>
</blockquote>
<h3 id="是否线程安全"><a href="#是否线程安全" class="headerlink" title="是否线程安全"></a>是否线程安全</h3><blockquote>
<p>线程安全</p>
</blockquote>
<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ul>
<li>默认创建方式链表醉大长度为Ineger.MAX_SIZE</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是LinkedBlockingQueue&quot;&gt;&lt;a href=&quot;#什么是LinkedBlockingQueue&quot; class=&quot;headerlink&quot; title=&quot;什么是LinkedBlockingQueue&quot;&gt;&lt;/a&gt;什么是LinkedBlockingQue
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="queue" scheme="https://mykite.github.io/categories/Collection/queue/"/>
    
    
      <category term="queue" scheme="https://mykite.github.io/tags/queue/"/>
    
      <category term="源码分析" scheme="https://mykite.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="BlocingQueue" scheme="https://mykite.github.io/tags/BlocingQueue/"/>
    
      <category term="LinkedBlockingQueue" scheme="https://mykite.github.io/tags/LinkedBlockingQueue/"/>
    
  </entry>
  
</feed>
