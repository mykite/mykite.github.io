<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>放手の风筝博客</title>
  <subtitle>放手の风筝博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mykite.github.io/"/>
  <updated>2017-04-17T07:01:57.000Z</updated>
  <id>https://mykite.github.io/</id>
  
  <author>
    <name>kite</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jvm 启动参数配置参考</title>
    <link href="https://mykite.github.io/2017/04/17/jvm%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/"/>
    <id>https://mykite.github.io/2017/04/17/jvm启动参数配置参考/</id>
    <published>2017-04-17T07:01:22.687Z</published>
    <updated>2017-04-17T07:01:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>java -jar xxx.jar -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+CMSParallelRemarkEnabled -XX:+CMSPermGenSweepingEnabled -XX:+CMSClassUnloadingEnabled -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+DisableExplicitGC -XX:+UseCompressedOops -XX:+DoEscapeAnalysis -XX:MaxTenuringThreshold=10 -verbose:gc -Xloggc:/alidata1/admin/logs/gc.log -XX:+PrintGCDetails</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;java -jar xxx.jar -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+UseCo
    
    </summary>
    
      <category term="jvm" scheme="https://mykite.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://mykite.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java命令</title>
    <link href="https://mykite.github.io/2017/04/17/java%E5%91%BD%E4%BB%A4/"/>
    <id>https://mykite.github.io/2017/04/17/java命令/</id>
    <published>2017-04-17T07:00:06.350Z</published>
    <updated>2017-04-17T07:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>演示命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">readme</div><div class="line">当前使用 pid=14750</div></pre></td></tr></table></figure></p>
<p>jinfo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查看Java进程的栈空间大小:jinfo - ThreadStackSize 14750</div><div class="line">查看是否使用了压缩指针:jinfo -flag UseCompressedOops 14750</div><div class="line">查看系统属性:jinfo -sysprops 14750</div></pre></td></tr></table></figure></p>
<p>jstack:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看一个指定的Java进程中的线程的状态:jstack 14750</div></pre></td></tr></table></figure>
<p>jstat:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查看gc的信息:jstat -gcutil 14750</div></pre></td></tr></table></figure>
<p>jmap&amp;mat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">空间中各个年龄段的空间的使用情况:jmap -heap 14750</div><div class="line">dump当前java运行状态</div><div class="line">jmap -dump:live,format=b,file=/fileName 14750</div></pre></td></tr></table></figure>
<p>本文参考链接: <a href="http://www.javaranger.com/archives/1063" target="_blank" rel="external">http://www.javaranger.com/archives/1063</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;演示命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
    
    </summary>
    
      <category term="jvm" scheme="https://mykite.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://mykite.github.io/tags/jvm/"/>
    
      <category term="命令" scheme="https://mykite.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>jvm内存模型</title>
    <link href="https://mykite.github.io/2017/04/17/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://mykite.github.io/2017/04/17/jvm内存模型/</id>
    <published>2017-04-17T06:58:58.311Z</published>
    <updated>2017-04-17T06:59:53.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p>方法区（methodArea）,java堆（heap）,java栈（stack）,本地方法栈（native Method Stack） </p>
<h2 id="对象分为：年轻代-Young-、年老代-Tenured-、持久代-Perm"><a href="#对象分为：年轻代-Young-、年老代-Tenured-、持久代-Perm" class="headerlink" title="对象分为：年轻代(Young)、年老代(Tenured)、持久代(Perm)"></a>对象分为：年轻代(Young)、年老代(Tenured)、持久代(Perm)</h2><h3 id="年轻代-Young-："><a href="#年轻代-Young-：" class="headerlink" title="年轻代(Young)："></a>年轻代(Young)：</h3><p> 年轻代分三个区。一个Eden区，两个Survivor区。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个），当这个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制年老区(Tenured。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来 对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。</p>
<h3 id="Tenured（年老代）"><a href="#Tenured（年老代）" class="headerlink" title="Tenured（年老代）"></a>Tenured（年老代）</h3><p>年老代存放从年轻代存活的对象。一般来说年老代存放的都是生命期较长的对象。<br>Perm（持久代） 用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=进行设置。</p>
<h3 id="持久代-Perm"><a href="#持久代-Perm" class="headerlink" title="持久代(Perm)"></a>持久代(Perm)</h3><p>持久代是指MethodArea，不属于Heap。</p>
<p>本文参考链接：<a href="http://www.javaranger.com/archives/472" target="_blank" rel="external">http://www.javaranger.com/archives/472</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内存模型&quot;&gt;&lt;a href=&quot;#内存模型&quot; class=&quot;headerlink&quot; title=&quot;内存模型&quot;&gt;&lt;/a&gt;内存模型&lt;/h2&gt;&lt;p&gt;方法区（methodArea）,java堆（heap）,java栈（stack）,本地方法栈（native Method S
    
    </summary>
    
      <category term="jvm" scheme="https://mykite.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://mykite.github.io/tags/jvm/"/>
    
      <category term="内存模型" scheme="https://mykite.github.io/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>ArrayBlockingQueue源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/ArrayBlockingQueue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/ArrayBlockingQueue源码解析/</id>
    <published>2017-04-17T06:48:26.506Z</published>
    <updated>2017-04-17T06:56:57.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ArrayBlockingQueue"><a href="#什么是ArrayBlockingQueue" class="headerlink" title="什么是ArrayBlockingQueue"></a>什么是ArrayBlockingQueue</h2><blockquote>
<p>ArrayBlockingQueue底层是由数组实现的定长阻塞队列(阻塞表示如果没有原始那么获取元素会阻塞当前线程)</p>
</blockquote>
<h2 id="ArrayBlockingQueue用来干嘛"><a href="#ArrayBlockingQueue用来干嘛" class="headerlink" title="ArrayBlockingQueue用来干嘛"></a>ArrayBlockingQueue用来干嘛</h2><blockquote>
<p>ArrayBlockingQueue一般用于生产者消费者模型业务(排队机制，先进先出)</p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class ArrayBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt;</div><div class="line">        implements BlockingQueue&lt;E&gt;, java.io.Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = -817911632652898426L;</div><div class="line"></div><div class="line">    /** The queued items 存储元素容器*/</div><div class="line">    final Object[] items;</div><div class="line"></div><div class="line">    /** items index for next take, poll, peek or remove 使用过的元素 */</div><div class="line">    int takeIndex;</div><div class="line"></div><div class="line">    /** items index for next put, offer, or add 添加过的元素 */</div><div class="line">    int putIndex;</div><div class="line"></div><div class="line">    /** Number of elements in the queue 当前元素数量 */</div><div class="line">    int count;</div></pre></td></tr></table></figure>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><p>add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">	return super.add(e);</div><div class="line">&#125;</div><div class="line">super.add</div><div class="line">public boolean add(E e) &#123;</div><div class="line">	if (offer(e))</div><div class="line">		return true;</div><div class="line">	else</div><div class="line">		throw new IllegalStateException(&quot;Queue full&quot;);</div><div class="line">&#125;</div><div class="line">public boolean offer(E e) &#123;</div><div class="line">	checkNotNull(e);//ArrayBlockingQueue不能存储null对象</div><div class="line">	final ReentrantLock lock = this.lock;//插入操作线程安全</div><div class="line">	lock.lock();</div><div class="line">	try &#123;</div><div class="line">		if (count == items.length)//如果当前count==items.length表示队列已经忙了，不能插入</div><div class="line">			return false;</div><div class="line">		else &#123;</div><div class="line">			insert(e);//插入元素</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">private void insert(E x) &#123;</div><div class="line">	items[putIndex] = x;//第一次put为0</div><div class="line">	putIndex = inc(putIndex);//递增</div><div class="line">	++count;//数量递增</div><div class="line">	notEmpty.signal();//通知获取原始方法可以进行获取</div><div class="line">&#125;</div><div class="line">final int inc(int i) &#123;//如果当前putIndex==items.length那么putIndex重新从零开始</div><div class="line">	return (++i == items.length) ? 0 : i;</div><div class="line">&#125;</div><div class="line">//同样为添加元素，lock.lockInterruptibly如果检测到有Thread.interrupted();会直接抛出异常</div><div class="line">public void put(E e) throws InterruptedException &#123;</div><div class="line">	checkNotNull(e);</div><div class="line">	final ReentrantLock lock = this.lock;</div><div class="line">	lock.lockInterruptibly();</div><div class="line">	try &#123;</div><div class="line">		while (count == items.length)</div><div class="line">			notFull.await();</div><div class="line">		insert(e);</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>remove<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public boolean remove(Object o) &#123;</div><div class="line">	if (o == null) return false;</div><div class="line">	final Object[] items = this.items;</div><div class="line">	final ReentrantLock lock = this.lock;</div><div class="line">	lock.lock();</div><div class="line">	try &#123;</div><div class="line">		for (int i = takeIndex, k = count; k &gt; 0; i = inc(i), k--) &#123;</div><div class="line">			if (o.equals(items[i])) &#123;//从头部开始遍历元素判断</div><div class="line">				removeAt(i);</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return false;</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//queue size = 10 putSize = 5 tackSize = 0</div><div class="line">//queue 1,2,3,4,5</div><div class="line">removeAt 3</div><div class="line">step1: removeAt != takeIndex</div><div class="line">i = </div><div class="line">nexti = 4</div><div class="line"></div><div class="line"></div><div class="line">void removeAt(int i) &#123;</div><div class="line">	final Object[] items = this.items;</div><div class="line">	// if removing front item, just advance</div><div class="line">	if (i == takeIndex) &#123;</div><div class="line">		items[takeIndex] = null;//引用设置为空</div><div class="line">		takeIndex = inc(takeIndex);//takeIndex++</div><div class="line">	&#125; else &#123;</div><div class="line">		// slide over all others up through putIndex.</div><div class="line">		for (;;) &#123;</div><div class="line">			int nexti = inc(i);//&gt;队列的头部  递增(putIndex一个循环的0-n)</div><div class="line">			if (nexti != putIndex) &#123;//递增后部位putIndex全部向前移动位置</div><div class="line">				items[i] = items[nexti];</div><div class="line">				i = nexti;</div><div class="line">			&#125; else &#123;</div><div class="line">				items[i] = null;//元素设置为空</div><div class="line">				putIndex = i;</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	--count;//元素递减</div><div class="line">	notFull.signal();//通知notFull.awit()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>update<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">get</div></pre></td></tr></table></figure></p>
<p>public E poll() {//获取队列头部元素，获取后设置为空<br>    final ReentrantLock lock = this.lock;<br>    lock.lock();<br>    try {<br>        return (count == 0) ? null : extract();//如果当前队列为空直接返回null,不为空调用extract()<br>    } finally {<br>        lock.unlock();<br>    }<br>}<br>//获取队列头部元素，获取后设置为空<br>//take获取原始如果队列为空会进入阻塞状态知道等到有添加元素才会去返回<br>public E take() throws InterruptedException {<br>    final ReentrantLock lock = this.lock;<br>    lock.lockInterruptibly();//lock.lockInterruptibly如果检测到有Thread.interrupted();会直接抛出异常<br>    try {<br>        while (count == 0)<br>            notEmpty.await();//如果没有元素进入等待状态，等待被唤醒<br>        return extract();<br>    } finally {<br>        lock.unlock();<br>    }<br>}<br>//peek查看队列头部元素<br>public E peek() {<br>    final ReentrantLock lock = this.lock;<br>    lock.lock();<br>    try {<br>        return (count == 0) ? null : itemAt(takeIndex);//如果元素为空直接返回null,不为空条用itemAt(takeIndex)<br>    } finally {<br>        lock.unlock();<br>    }<br>}<br>private E extract() {<br>    final Object[] items = this.items;<br>    E x = this.<e>cast(items[takeIndex]);//泛型转换并且获得当前元素<br>    items[takeIndex] = null;//当前元素设置为空<br>    takeIndex = inc(takeIndex);//获取原始递增<br>    –count;//队列元素递减<br>    notFull.signal();//通知notFull.await()可以进行插入元素<br>    return x;//返回当前获取原始<br>}<br>//获取元素<br>final E itemAt(int i) {<br>    return this.<e>cast(items[i]);<br>}<br>```</e></e></p>
<h3 id="什么时候扩容"><a href="#什么时候扩容" class="headerlink" title="什么时候扩容"></a>什么时候扩容</h3><blockquote>
<p>定长队列，不能进行扩容</p>
</blockquote>
<h3 id="是否线程安全"><a href="#是否线程安全" class="headerlink" title="是否线程安全"></a>是否线程安全</h3><blockquote>
<p>线程安全</p>
</blockquote>
<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ul>
<li>ArrayBlockingQueue为定长队列</li>
<li>ArrayBlockingQueue的添加和获取方法都有提供阻塞和非阻塞的根据需要使用</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是ArrayBlockingQueue&quot;&gt;&lt;a href=&quot;#什么是ArrayBlockingQueue&quot; class=&quot;headerlink&quot; title=&quot;什么是ArrayBlockingQueue&quot;&gt;&lt;/a&gt;什么是ArrayBlockingQueue&lt;/
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="queue" scheme="https://mykite.github.io/categories/Collection/queue/"/>
    
    
      <category term="queue" scheme="https://mykite.github.io/tags/queue/"/>
    
      <category term="blockngQueue" scheme="https://mykite.github.io/tags/blockngQueue/"/>
    
      <category term="java" scheme="https://mykite.github.io/tags/java/"/>
    
      <category term="源码分析" scheme="https://mykite.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>LinkedBlockingQueue源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/LinkedBlockingQueue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/LinkedBlockingQueue源码解析/</id>
    <published>2017-04-17T06:47:16.504Z</published>
    <updated>2017-04-17T06:57:03.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是LinkedBlockingQueue"><a href="#什么是LinkedBlockingQueue" class="headerlink" title="什么是LinkedBlockingQueue"></a>什么是LinkedBlockingQueue</h2><blockquote>
<p>LinkedBlockingQueue底层是由节点链表实现的定长阻塞队列(阻塞表示如果没有原始那么获取元素会阻塞当前线程)</p>
</blockquote>
<h2 id="LinkedBlockingQueue用来干嘛"><a href="#LinkedBlockingQueue用来干嘛" class="headerlink" title="LinkedBlockingQueue用来干嘛"></a>LinkedBlockingQueue用来干嘛</h2><blockquote>
<p>LinkedBlockingQueue一般用于生产者消费者模型业务(排队机制，先进先出)</p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class LinkedBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt;</div><div class="line">        implements BlockingQueue&lt;E&gt;, java.io.Serializable &#123;</div><div class="line">    private static final long serialVersionUID = -6903933977591709194L;</div><div class="line">    /**</div><div class="line">     * Linked list node class</div><div class="line">     */</div><div class="line">    static class Node&lt;E&gt; &#123;//存储数据的节点</div><div class="line">        E item;</div><div class="line"> </div><div class="line">        Node&lt;E&gt; next;</div><div class="line"></div><div class="line">        Node(E x) &#123; item = x; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** The capacity bound, or Integer.MAX_VALUE if none */</div><div class="line">    private final int capacity;//链表的最大长度，如果不设置值默认为Integer.MAX_VALUE</div><div class="line"></div><div class="line">    /** Current number of elements */</div><div class="line">    private final AtomicInteger count = new AtomicInteger(0);//统计数量线程安全</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Head of linked list.</div><div class="line">     * Invariant: head.item == null</div><div class="line">     */</div><div class="line">    private transient Node&lt;E&gt; head;//头节点</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Tail of linked list.</div><div class="line">     * Invariant: last.next == null</div><div class="line">     */</div><div class="line">    private transient Node&lt;E&gt; last;//尾节点</div><div class="line"></div><div class="line">    /** Lock held by take, poll, etc */</div><div class="line">    private final ReentrantLock takeLock = new ReentrantLock();//tackLock</div><div class="line"></div><div class="line">    /** Wait queue for waiting takes */</div><div class="line">    private final Condition notEmpty = takeLock.newCondition();//tackLock条件不为空</div><div class="line"></div><div class="line">    /** Lock held by put, offer, etc */</div><div class="line">    private final ReentrantLock putLock = new ReentrantLock();//putLock</div><div class="line"></div><div class="line">    /** Wait queue for waiting puts */</div><div class="line">    private final Condition notFull = putLock.newCondition();//putLock条件没满</div><div class="line">    public LinkedBlockingQueue() &#123;</div><div class="line">            this(Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line">    public LinkedBlockingQueue(int capacity) &#123;</div><div class="line">    	if (capacity &lt;= 0) throw new IllegalArgumentException();</div><div class="line">    	this.capacity = capacity;</div><div class="line">    	last = head = new Node&lt;E&gt;(null);//默认last=head=空节点</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><p>add<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public void put(E e) throws InterruptedException &#123;</div><div class="line">	if (e == null) throw new NullPointerException();//不能存储空元素</div><div class="line">	int c = -1;</div><div class="line">	Node&lt;E&gt; node = new Node(e);//创建节点</div><div class="line">	final ReentrantLock putLock = this.putLock;//获得putLock</div><div class="line">	final AtomicInteger count = this.count;//获取当前数量</div><div class="line">	putLock.lockInterruptibly();//获取锁，如果有调用Thread.Interrupted()直接抛出异常</div><div class="line">	try &#123;</div><div class="line">		</div><div class="line">		while (count.get() == capacity) &#123;//如果当前队列以满，进入等待状态</div><div class="line">			notFull.await();</div><div class="line">		&#125;</div><div class="line">		enqueue(node);</div><div class="line">		c = count.getAndIncrement();</div><div class="line">		if (c + 1 &lt; capacity)</div><div class="line">			notFull.signal();</div><div class="line">	&#125; finally &#123;</div><div class="line">		putLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == 0)</div><div class="line">		signalNotEmpty();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public boolean offer(E e, long timeout, TimeUnit unit)	offer(e)类似</div><div class="line">	throws InterruptedException &#123;</div><div class="line"></div><div class="line">	if (e == null) throw new NullPointerException();//不能存储空元素</div><div class="line">	long nanos = unit.toNanos(timeout);//装换为纳秒</div><div class="line">	int c = -1;</div><div class="line">	final ReentrantLock putLock = this.putLock;</div><div class="line">	final AtomicInteger count = this.count;</div><div class="line">	putLock.lockInterruptibly();</div><div class="line">	try &#123;</div><div class="line">		while (count.get() == capacity) &#123;</div><div class="line">			if (nanos &lt;= 0)</div><div class="line">				return false;</div><div class="line">			nanos = notFull.awaitNanos(nanos);//等待一段时间</div><div class="line">		&#125;</div><div class="line">		enqueue(new Node&lt;E&gt;(e));</div><div class="line">		c = count.getAndIncrement();//递增</div><div class="line">		if (c + 1 &lt; capacity)//如果未满唤醒notFull.awit</div><div class="line">			notFull.signal();</div><div class="line">	&#125; finally &#123;</div><div class="line">		putLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == 0)</div><div class="line">		signalNotEmpty();//唤醒notEmpty.await()</div><div class="line">	return true;</div><div class="line">&#125;</div><div class="line">private void enqueue(Node&lt;E&gt; node) &#123;</div><div class="line">	// assert putLock.isHeldByCurrentThread();</div><div class="line">	// assert last.next == null;</div><div class="line">	//拆分为两步 last.next = node，last = node</div><div class="line">	//每次head.next=当前的last然后last.next指向node</div><div class="line">	last = last.next = node;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>remove<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public boolean remove(Object o) &#123;</div><div class="line">	if (o == null) return false;</div><div class="line">	fullyLock();//删除数据时全部lock</div><div class="line">	try &#123;</div><div class="line">		for (Node&lt;E&gt; trail = head, p = trail.next;</div><div class="line">			 p != null;</div><div class="line">			 trail = p, p = p.next) &#123;</div><div class="line">			if (o.equals(p.item)) &#123;</div><div class="line">				unlink(p, trail);</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return false;</div><div class="line">	&#125; finally &#123;</div><div class="line">		fullyUnlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">void unlink(Node&lt;E&gt; p, Node&lt;E&gt; trail) &#123;</div><div class="line">	// assert isFullyLocked();</div><div class="line">	// p.next is not changed, to allow iterators that are</div><div class="line">	// traversing p to maintain their weak-consistency guarantee.</div><div class="line">	p.item = null;</div><div class="line">	trail.next = p.next;//前后元素执行，大年元素设置为空</div><div class="line">	if (last == p)</div><div class="line">		last = trail;</div><div class="line">	if (count.getAndDecrement() == capacity)//count获取数量同时递减(获取数量为递减钱数量)</div><div class="line">		notFull.signal();//唤醒 notFull.await()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>get<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">//获取元素，消费，可能被中断</div><div class="line">public E take() throws InterruptedException &#123;</div><div class="line">	E x;</div><div class="line">	int c = -1;</div><div class="line">	final AtomicInteger count = this.count;</div><div class="line">	final ReentrantLock takeLock = this.takeLock;</div><div class="line">	takeLock.lockInterruptibly();//如果有调用Thread.Interrupted()抛出异常</div><div class="line">	try &#123;</div><div class="line">		while (count.get() == 0) &#123;</div><div class="line">			notEmpty.await();//元素为空进入等待状态</div><div class="line">		&#125;</div><div class="line">		x = dequeue();//</div><div class="line">		c = count.getAndDecrement();</div><div class="line">		if (c &gt; 1)</div><div class="line">			notEmpty.signal();</div><div class="line">	&#125; finally &#123;</div><div class="line">		takeLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == capacity)</div><div class="line">		signalNotFull();</div><div class="line">	return x;</div><div class="line">&#125;</div><div class="line">//获取元素，消费</div><div class="line">public E poll() &#123;</div><div class="line">	final AtomicInteger count = this.count;</div><div class="line">	if (count.get() == 0)</div><div class="line">		return null;</div><div class="line">	E x = null;</div><div class="line">	int c = -1;</div><div class="line">	final ReentrantLock takeLock = this.takeLock;</div><div class="line">	takeLock.lock();</div><div class="line">	try &#123;</div><div class="line">		if (count.get() &gt; 0) &#123;</div><div class="line">			x = dequeue();</div><div class="line">			c = count.getAndDecrement();</div><div class="line">			if (c &gt; 1)</div><div class="line">				notEmpty.signal();</div><div class="line">		&#125;</div><div class="line">	&#125; finally &#123;</div><div class="line">		takeLock.unlock();</div><div class="line">	&#125;</div><div class="line">	if (c == capacity)</div><div class="line">		signalNotFull();</div><div class="line">	return x;</div><div class="line">&#125;</div><div class="line">//查看元素</div><div class="line">public E peek() &#123;</div><div class="line">	if (count.get() == 0)</div><div class="line">		return null;</div><div class="line">	final ReentrantLock takeLock = this.takeLock;</div><div class="line">	takeLock.lock();</div><div class="line">	try &#123;</div><div class="line">		Node&lt;E&gt; first = head.next;</div><div class="line">		if (first == null)</div><div class="line">			return null;</div><div class="line">		else</div><div class="line">			return first.item;</div><div class="line">	&#125; finally &#123;</div><div class="line">		takeLock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">[null,aaa,bbb] queue</div><div class="line">[null,bbb] delete after queue</div><div class="line">去掉头部null元素获取aaa元素修改aaa元素的item=null</div><div class="line">private E dequeue() &#123;</div><div class="line">	// assert takeLock.isHeldByCurrentThread();</div><div class="line">	// assert head.item == null;</div><div class="line">	Node&lt;E&gt; h = head;</div><div class="line">	Node&lt;E&gt; first = h.next;//first第一个有值的节点</div><div class="line">	h.next = h; // help GC</div><div class="line">	head = first;</div><div class="line">	E x = first.item;//获取元素</div><div class="line">	first.item = null;//设置为空</div><div class="line">	return x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="什么时候扩容"><a href="#什么时候扩容" class="headerlink" title="什么时候扩容"></a>什么时候扩容</h3><blockquote>
<p>定长链表不支持扩容</p>
</blockquote>
<h3 id="是否线程安全"><a href="#是否线程安全" class="headerlink" title="是否线程安全"></a>是否线程安全</h3><blockquote>
<p>线程安全</p>
</blockquote>
<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ul>
<li>默认创建方式链表醉大长度为Ineger.MAX_SIZE</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是LinkedBlockingQueue&quot;&gt;&lt;a href=&quot;#什么是LinkedBlockingQueue&quot; class=&quot;headerlink&quot; title=&quot;什么是LinkedBlockingQueue&quot;&gt;&lt;/a&gt;什么是LinkedBlockingQue
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="queue" scheme="https://mykite.github.io/categories/Collection/queue/"/>
    
    
      <category term="queue" scheme="https://mykite.github.io/tags/queue/"/>
    
      <category term="源码分析" scheme="https://mykite.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="BlocingQueue" scheme="https://mykite.github.io/tags/BlocingQueue/"/>
    
      <category term="LinkedBlockingQueue" scheme="https://mykite.github.io/tags/LinkedBlockingQueue/"/>
    
  </entry>
  
  <entry>
    <title>List总结</title>
    <link href="https://mykite.github.io/2017/04/17/List%E6%80%BB%E7%BB%93/"/>
    <id>https://mykite.github.io/2017/04/17/List总结/</id>
    <published>2017-04-17T06:16:01.950Z</published>
    <updated>2017-04-17T06:56:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">为体现差距使用 快，中等，一般</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>对比</th>
<th>增加</th>
<th>删除</th>
<th>修改</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArrayList</td>
<td>快</td>
<td>一般</td>
<td>快</td>
<td>快</td>
</tr>
<tr>
<td>LinkedList</td>
<td>快</td>
<td>快</td>
<td>快</td>
<td>一般</td>
</tr>
<tr>
<td>copyOnWriteList</td>
<td>一般</td>
<td>一般</td>
<td>一般</td>
<td>快</td>
</tr>
</tbody>
</table>
<ul>
<li>ArrayList删除元素设计到元素的移动</li>
<li>LinkedList只能遍历(first last除外)</li>
<li>copyOnWriteList增加删除都设计到数组的拷贝</li>
</ul>
<h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copyOnWriteList没有实际使用过，感觉应用场景不多</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="List" scheme="https://mykite.github.io/categories/Collection/List/"/>
    
    
  </entry>
  
  <entry>
    <title>LinkedList源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/LinkedList源码解析/</id>
    <published>2017-04-17T06:15:30.565Z</published>
    <updated>2017-04-17T06:55:58.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是LinkedList"><a href="#什么是LinkedList" class="headerlink" title="什么是LinkedList"></a>什么是LinkedList</h2><blockquote>
<p>ArrayList底层是由链表组成的一种数据结构，可以进行动态的增删改查</p>
</blockquote>
<h2 id="LinkedList用来干嘛"><a href="#LinkedList用来干嘛" class="headerlink" title="LinkedList用来干嘛"></a>LinkedList用来干嘛</h2><blockquote>
<p>LinkedList一般用于对数据的存储</p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><ol>
<li>数据的存储</li>
<li>数据的操作</li>
<li>什么时候扩容</li>
<li>是否线程安全<blockquote>
<p>带上问题去找答案</p>
</blockquote>
</li>
</ol>
<h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class LinkedList&lt;E&gt;</div><div class="line">    extends AbstractSequentialList&lt;E&gt;</div><div class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</div><div class="line">&#123;</div><div class="line">    transient int size = 0;</div><div class="line">    /**</div><div class="line">     * Pointer to first node.</div><div class="line">     * Invariant: (first == null &amp;&amp; last == null) ||</div><div class="line">     *            (first.prev == null &amp;&amp; first.item != null)</div><div class="line">     */</div><div class="line">    transient Node&lt;E&gt; first;</div><div class="line">    /**</div><div class="line">     * Pointer to last node.</div><div class="line">     * Invariant: (first == null &amp;&amp; last == null) ||</div><div class="line">     *            (last.next == null &amp;&amp; last.item != null)</div><div class="line">     */</div><div class="line">    transient Node&lt;E&gt; last;</div></pre></td></tr></table></figure>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><p>add (addFirst addLast类似)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">    linkLast(e);</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line">void linkLast(E e) &#123;</div><div class="line">    final Node&lt;E&gt; l = last;//获取last</div><div class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);//创建Node</div><div class="line">    last = newNode;//last为新的节点</div><div class="line">	//如果当前l为空，表示是第一次添加，那么first也会=新的节点</div><div class="line">	//如果第一次添加就是first=last=newNode</div><div class="line">    if (l == null)</div><div class="line">        first = newNode;</div><div class="line">    //l不为空也就是说不是第一次添加</div><div class="line">	//当前的last=newNode,而现在由于创建Node的时候已经吧newNode.prev=last也就是说现在是维护双向的关系</div><div class="line">    else</div><div class="line">        l.next = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div><div class="line">//创建Node参数prev上一个，element当前元素，next下一个。添加的时候给定prev为last,element为当前，next为空</div><div class="line">Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">	this.item = element;</div><div class="line">	this.next = next;</div><div class="line">	this.prev = prev;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>删除对象 linkedList可以存储null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public boolean remove(Object o) &#123;</div><div class="line">	//删除元素为空从first开始遍历判断为空</div><div class="line">	if (o == null) &#123;</div><div class="line">		for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">			if (x.item == null) &#123;</div><div class="line">				unlink(x);</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; else &#123;</div><div class="line">		for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">			if (o.equals(x.item)) &#123;</div><div class="line">				unlink(x);</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return false;</div><div class="line">&#125;</div><div class="line">/*</div><div class="line">解除关系</div><div class="line">1.将当前Node的prev next item都设置为空</div><div class="line">2.将prev节点的next直接指向next(如果prev为空将first指向next)</div><div class="line">3.强next节点的prev直接指向prev(如果next为空将last指向prev)</div><div class="line">*/</div><div class="line">E unlink(Node&lt;E&gt; x) &#123;</div><div class="line">	// assert x != null;</div><div class="line">	final E element = x.item;//当前元素</div><div class="line">	final Node&lt;E&gt; next = x.next;//当前元素的下一个节点</div><div class="line">	final Node&lt;E&gt; prev = x.prev;//当前元素的上一个节点</div><div class="line"></div><div class="line">	if (prev == null) &#123;//如果上一个节点为空，那么first将直接指向next</div><div class="line">		first = next;</div><div class="line">	&#125; else &#123;</div><div class="line">		prev.next = next;//当前元素不为空将prev的next直接指向当前元素的下一个节点()</div><div class="line">		x.prev = null;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (next == null) &#123;</div><div class="line">		last = prev;</div><div class="line">	&#125; else &#123;</div><div class="line">		next.prev = prev;</div><div class="line">		x.next = null;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	x.item = null;</div><div class="line">	size--;</div><div class="line">	modCount++;</div><div class="line">	return element;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">因为是链表结构，只支持getFirst,getLast</div></pre></td></tr></table></figure></p>
<h3 id="什么时候扩容"><a href="#什么时候扩容" class="headerlink" title="什么时候扩容"></a>什么时候扩容</h3><blockquote>
<p>链表没有终点不需要扩容</p>
</blockquote>
<h3 id="是否线程安全"><a href="#是否线程安全" class="headerlink" title="是否线程安全"></a>是否线程安全</h3><blockquote>
<p>线程不安全</p>
</blockquote>
<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ul>
<li>LinkedList不支持直接定位到元素</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是LinkedList&quot;&gt;&lt;a href=&quot;#什么是LinkedList&quot; class=&quot;headerlink&quot; title=&quot;什么是LinkedList&quot;&gt;&lt;/a&gt;什么是LinkedList&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ArrayList底层是由
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="List" scheme="https://mykite.github.io/categories/Collection/List/"/>
    
    
  </entry>
  
  <entry>
    <title>CopyOnWriteArrayList源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/CopyOnWriteArrayList源码解析/</id>
    <published>2017-04-17T06:14:59.397Z</published>
    <updated>2017-04-17T06:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是CopyOnWriteArrayList"><a href="#什么是CopyOnWriteArrayList" class="headerlink" title="什么是CopyOnWriteArrayList"></a>什么是CopyOnWriteArrayList</h2><blockquote>
<p>CopyOnWriteArrayList底层是由数组组成的一种数据结构，可以进行动态的增删改查</p>
</blockquote>
<h2 id="CopyOnWriteArrayList用来干嘛"><a href="#CopyOnWriteArrayList用来干嘛" class="headerlink" title="CopyOnWriteArrayList用来干嘛"></a>CopyOnWriteArrayList用来干嘛</h2><blockquote>
<p>CopyOnWriteArrayList一般用于对数据的存储(最好针对少量数据，添加会涉及到整个数组的复制)</p>
</blockquote>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><ol>
<li>数据的存储</li>
<li>数据的操作</li>
<li>什么时候扩容</li>
<li>是否线程安全<blockquote>
<p>带上问题去找答案</p>
<h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3></blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class CopyOnWriteArrayList&lt;E&gt;</div><div class="line">    implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</div><div class="line">    private static final long serialVersionUID = 8673264195747942595L;</div><div class="line"></div><div class="line">    /** 用于实现add的同步操作 */</div><div class="line">    transient final ReentrantLock lock = new ReentrantLock();</div><div class="line"></div><div class="line">    /** volatile针对读取时获取最新值，同时作为容器 */</div><div class="line">    private volatile transient Object[] array;</div></pre></td></tr></table></figure>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">添加</div><div class="line">public boolean add(E e) &#123;</div><div class="line">	final ReentrantLock lock = this.lock;</div><div class="line">	lock.lock();</div><div class="line">	try &#123;//同步操作</div><div class="line">		Object[] elements = getArray();</div><div class="line">		int len = elements.length;</div><div class="line">		Object[] newElements = Arrays.copyOf(elements, len + 1);//添加操作设计到整个数组的复制，影响性能</div><div class="line">		newElements[len] = e;</div><div class="line">		setArray(newElements);</div><div class="line">		return true;</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">删除</div><div class="line">public E remove(int index) &#123;</div><div class="line">	final ReentrantLock lock = this.lock;</div><div class="line">	lock.lock();</div><div class="line">	try &#123;//同步代码</div><div class="line">		Object[] elements = getArray();</div><div class="line">		int len = elements.length;</div><div class="line">		E oldValue = get(elements, index);</div><div class="line">		int numMoved = len - index - 1;</div><div class="line">		if (numMoved == 0)</div><div class="line">			setArray(Arrays.copyOf(elements, len - 1));//数组复制</div><div class="line">		else &#123;</div><div class="line">			Object[] newElements = new Object[len - 1];</div><div class="line">			System.arraycopy(elements, 0, newElements, 0, index);</div><div class="line">			System.arraycopy(elements, index + 1, newElements, index,</div><div class="line">							 numMoved);</div><div class="line">			setArray(newElements);</div><div class="line">		&#125;</div><div class="line">		return oldValue;</div><div class="line">	&#125; finally &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">获取</div><div class="line">public E get(int index) &#123;//基于volatile获取最新值</div><div class="line">	return get(getArray(), index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="什么时候扩容"><a href="#什么时候扩容" class="headerlink" title="什么时候扩容"></a>什么时候扩容</h3><blockquote>
<p>每次添加删除，针对array做copy操作</p>
<h3 id="是否线程安全"><a href="#是否线程安全" class="headerlink" title="是否线程安全"></a>是否线程安全</h3><p>基于Lock实现并发写入的安全，针对并发修改的读取，修改基于copy后的新数组，读取如果未set获取到的还是原数组。如果set后读取到的就是最新的值</p>
</blockquote>
<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ol>
<li>避免CopyOnWriteArrayList过长，copy影响性能</li>
</ol>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是CopyOnWriteArrayList&quot;&gt;&lt;a href=&quot;#什么是CopyOnWriteArrayList&quot; class=&quot;headerlink&quot; title=&quot;什么是CopyOnWriteArrayList&quot;&gt;&lt;/a&gt;什么是CopyOnWriteArr
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="List" scheme="https://mykite.github.io/categories/Collection/List/"/>
    
    
      <category term="List" scheme="https://mykite.github.io/tags/List/"/>
    
      <category term="集合框架" scheme="https://mykite.github.io/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="CopyOnWriteArrayList" scheme="https://mykite.github.io/tags/CopyOnWriteArrayList/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList源码解析</title>
    <link href="https://mykite.github.io/2017/04/17/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://mykite.github.io/2017/04/17/ArrayList源码解析/</id>
    <published>2017-04-17T06:14:18.183Z</published>
    <updated>2017-04-17T06:55:52.327Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">闲来无事,有空会继续写下</div><div class="line">List</div><div class="line">LinkedList</div><div class="line">CopyOnWriteArrayList</div><div class="line">Set</div><div class="line">HashSet</div><div class="line">LinkedHashSet</div><div class="line">Map</div><div class="line">HashMap</div><div class="line">IdentityHashMap</div><div class="line">LinkedHashMap</div><div class="line">TreeMap</div><div class="line">ConcurrentHashMap</div><div class="line">Queue</div><div class="line">ArrayBlockingQueue</div><div class="line">LinkedBlockingQueue</div><div class="line">ConcurrentLinkedQueue</div><div class="line"></div><div class="line">为节省空间对于非重点代码不做展示</div></pre></td></tr></table></figure>
<h2 id="什么是ArrayList"><a href="#什么是ArrayList" class="headerlink" title="什么是ArrayList"></a>什么是ArrayList</h2><blockquote>
<p>ArrayList底层是由数组组成的一种数据结构，可以进行动态的增删改查</p>
</blockquote>
<h2 id="ArrayList用来干嘛"><a href="#ArrayList用来干嘛" class="headerlink" title="ArrayList用来干嘛"></a>ArrayList用来干嘛</h2><blockquote>
<p>ArrayList一般用于对数据的存储</p>
<h2 id="源码解析针对重要点"><a href="#源码解析针对重要点" class="headerlink" title="源码解析针对重要点"></a>源码解析针对重要点</h2><ol>
<li>数据的存储</li>
<li>数据的操作</li>
<li>什么时候扩容</li>
<li>是否线程安全<br>带上问题去找答案<h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">从我们使用ArrayList开始</div><div class="line">new ArrayList&lt;&gt;();</div><div class="line">public ArrayList() &#123;</div><div class="line">    super();</div><div class="line">    this.elementData = EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div><div class="line">private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line">private transient Object[] elementData;</div><div class="line">elementData为储存数据所用容器，通过默认构造方法创建的ArrayList容器为空</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public boolean add(E e) &#123;</div><div class="line">	ensureCapacityInternal(size + 1);  </div><div class="line">	elementData[size++] = e;//size表示当前使用下表，直接将元素放入到elementData的指定位置</div><div class="line">	return true;</div><div class="line">&#125;</div><div class="line">指定位置的添加，设计到元素的后移</div><div class="line"> public void add(int index, E element) &#123;</div><div class="line">	rangeCheckForAdd(index);//检查是否超出</div><div class="line">	ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">	System.arraycopy(elementData, index, elementData, index + 1,</div><div class="line">					 size - index);//元素后裔</div><div class="line">	elementData[index] = element;</div><div class="line">	size++;</div><div class="line">&#125;</div><div class="line">private void rangeCheckForAdd(int index) &#123;</div><div class="line">	if (index &gt; size || index &lt; 0)</div><div class="line">		throw new IndexOutOfBoundsException(outOfBoundsMsg(index));//很常见的异常</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public E remove(int index) &#123;</div><div class="line">	rangeCheck(index);</div><div class="line">	checkForComodification();</div><div class="line">	E result = parent.remove(parentOffset + index);</div><div class="line">	this.modCount = parent.modCount;</div><div class="line">	this.size--;</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line">final void checkForComodification() &#123;</div><div class="line">	if (modCount != expectedModCount)//针对在对于list进行遍历时进行其他操作，modCount会改变，而expectedModCount值在listInterator时给定的会抛出异常</div><div class="line">		throw new ConcurrentModificationException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> public E get(int index) &#123;</div><div class="line">    rangeCheck(index);//这就没啥好多的了</div><div class="line">    return elementData(index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="什么时候扩容"><a href="#什么时候扩容" class="headerlink" title="什么时候扩容"></a>什么时候扩容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> public boolean add(E e) &#123;</div><div class="line">	ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">	elementData[size++] = e;</div><div class="line">	return true;</div><div class="line">&#125;</div><div class="line">private void ensureCapacityInternal(int minCapacity) &#123;</div><div class="line">	if (elementData == EMPTY_ELEMENTDATA) &#123; //如果容器为空，初始化容器，两个值中取最大值</div><div class="line">		minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">	&#125;</div><div class="line">	ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div><div class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</div><div class="line">	modCount++;//操作次数+1</div><div class="line">	// overflow-conscious code</div><div class="line">	if (minCapacity - elementData.length &gt; 0) //扩容，当前元素数量已经等于容器了需要进行扩容</div><div class="line">		grow(minCapacity);</div><div class="line">&#125;</div><div class="line">private void grow(int minCapacity) &#123;</div><div class="line">	// overflow-conscious code</div><div class="line">	int oldCapacity = elementData.length;//当前容器大小</div><div class="line">	int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);// oldCapacity + oldCapacity*0.5</div><div class="line">	if (newCapacity - minCapacity &lt; 0)</div><div class="line">		newCapacity = minCapacity;</div><div class="line">	if (newCapacity - MAX_ARRAY_SIZE &gt; 0)	</div><div class="line">		newCapacity = hugeCapacity(minCapacity);//计算是否超出</div><div class="line">	// minCapacity is usually close to size, so this is a win:</div><div class="line">	elementData = Arrays.copyOf(elementData, newCapacity);//扩容</div><div class="line">&#125;</div><div class="line">private static int hugeCapacity(int minCapacity) &#123;</div><div class="line">	if (minCapacity &lt; 0) // overflow //如果为负数抛出内存溢出错误</div><div class="line">		throw new OutOfMemoryError();</div><div class="line">	return (minCapacity &gt; MAX_ARRAY_SIZE) ? //还没有为负数，那么元素最大大小改为int的最大值，注意MAX_ARRAY_SIZE为最大值-8</div><div class="line">		Integer.MAX_VALUE :</div><div class="line">		MAX_ARRAY_SIZE;</div><div class="line">&#125;</div><div class="line">private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</div></pre></td></tr></table></figure>
<h3 id="是否线程安全"><a href="#是否线程安全" class="headerlink" title="是否线程安全"></a>是否线程安全</h3><p> ArrayList不是线程安全的<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> 以添加为例</div><div class="line"> elementData[size++] = e;</div><div class="line"> 一个 ArrayList ，在添加一个元素的时候，它可能会有两步来完成： </div><div class="line">1. 在 Items[Size] 的位置存放此元素； </div><div class="line">2. 增大 Size 的值。 </div><div class="line">在单线程运行的情况下，如果 Size = 0，添加一个元素后，此元素在位置 0，而且 Size=1； </div><div class="line">而如果是在多线程情况下，比如有两个线程，线程 A 先将元素存放在位置 0。但是此时 CPU 调度线程A暂停，线程 B 得到运行的机会。线程B也向此 ArrayList 添加元素，因为此时 Size 仍然等于 0 （注意哦，我们假设的是添加一个元素是要两个步骤哦，而线程A仅仅完成了步骤1），所以线程B也将元素存放在位置0。然后线程A和线程B都继续运行，都增加 Size 的值。 </div><div class="line">那好，现在我们来看看 ArrayList 的情况，元素实际上只有一个，存放在位置 0，而 Size 却等于 2。这就是“线程不安全”了。</div></pre></td></tr></table></figure></p>
<h2 id="使用ArrayList的注意事项"><a href="#使用ArrayList的注意事项" class="headerlink" title="使用ArrayList的注意事项"></a>使用ArrayList的注意事项</h2><ol>
<li>arrayList不是线程安全的，不要有多个线程同时操作一个arrayList</li>
<li>不要在循环中对arrayList做其他操作，会引发异常</li>
<li>针对已经确定大小的List请直接传入参数，避免多次扩容</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/jiaochunyu1992/article/details/51177373" target="_blank" rel="external">为什么说ArrayList是线程不安全的？</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="Collection" scheme="https://mykite.github.io/categories/Collection/"/>
    
      <category term="List" scheme="https://mykite.github.io/categories/Collection/List/"/>
    
    
  </entry>
  
</feed>
